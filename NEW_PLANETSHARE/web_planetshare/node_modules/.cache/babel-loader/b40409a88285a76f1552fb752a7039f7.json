{"ast":null,"code":"var _jsxFileName = \"/var/www/html/REACT_WORK/NEW_PLANETSHARE/web_planetshare/src/Container/ImageCrop/ImageCrop.js\";\nimport ReactDOM from \"react-dom\";\nimport React, { Component } from \"react\";\nimport ReactCrop from \"react-image-crop\";\nimport \"react-image-crop/dist/ReactCrop.css\";\nimport $ from 'jquery';\n\nclass Cropper extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      src: null,\n      croppedImageUrl: '',\n      crop: {\n        unit: 'px',\n        width: 250,\n        height: 375,\n        x: 25,\n        y: 25\n      },\n      cropped_img_data_url: null\n    };\n\n    this.onSelectFile = e => {\n      if (e.target.files && e.target.files.length > 0) {\n        const reader = new FileReader();\n        reader.addEventListener(\"load\", () => {\n          //console.log(reader.result)\n          this.setState({\n            src: reader.result\n          });\n        });\n        reader.readAsDataURL(e.target.files[0]);\n      }\n    };\n\n    this.onImageLoaded = image => {\n      this.imageRef = image;\n    };\n\n    this.onCropComplete = crop => {\n      this.makeClientCrop(crop);\n    };\n\n    this.onCropChange = (crop, percentCrop) => {\n      // You could also use percentCrop:\n      // this.setState({ crop: percentCrop });\n      this.setState({\n        crop\n      });\n    };\n  }\n\n  componentDidMount() {\n    this.setState({\n      src: this.props.original_img,\n      croppedImageUrl: this.props.croppedImageUrl\n    });\n  } // componentDidUpdate()\n  // {\n  //   console.log(\"update\"+this.props.croppedImageUrl );\n  //   // (this.state.croppedImageUrl!=this.props.croppedImageUrl || this.state.src!=this.props.original_img)&&\n  //   if(this.props.updateTrue)\n  //   {\n  //     this.setState({src:this.props.original_img,croppedImageUrl:this.props.croppedImageUrl})\n  //   }\n  // }\n\n\n  async makeClientCrop(crop) {\n    if (this.imageRef && crop.width && crop.height) {\n      const croppedImageUrl = await this.getCroppedImg(this.imageRef, crop, \"newFile.jpeg\");\n      this.setState({\n        croppedImageUrl\n      }); //this.props.cropImgUrl(this.state.src,croppedImageUrl)\n    }\n  }\n\n  getCroppedImg(image, crop, fileName) {\n    const canvas = document.createElement(\"canvas\");\n    const scaleX = image.naturalWidth / image.width;\n    const scaleY = image.naturalHeight / image.height;\n    canvas.width = crop.width;\n    canvas.height = crop.height;\n    const ctx = canvas.getContext(\"2d\");\n    ctx.drawImage(image, crop.x * scaleX, crop.y * scaleY, crop.width * scaleX, crop.height * scaleY, 0, 0, crop.width, crop.height); // return canvas;\n\n    var dataURL = canvas.toDataURL(); // var pic = dataURL.replace(/^data:image\\/(png|jpg);base64,/, \"\");\n    //var pic = dataURL.replace(/^data:image\\/(png|jpg);base64,/, \"\");\n    // console.log(dataURL);\n\n    this.setState({\n      cropped_img_data_url: dataURL\n    });\n    return new Promise((resolve, reject) => {\n      canvas.toBlob(blob => {\n        if (!blob) {\n          //reject(new Error('Canvas is empty'));\n          console.error(\"Canvas is empty\");\n          return;\n        }\n\n        blob.name = fileName; // console.log(blob);\n\n        window.URL.revokeObjectURL(this.fileUrl);\n        this.fileUrl = window.URL.createObjectURL(blob);\n        resolve(this.fileUrl);\n      }, \"image/jpeg\");\n    });\n  }\n\n  render() {\n    const _this$state = this.state,\n          crop = _this$state.crop,\n          croppedImageUrl = _this$state.croppedImageUrl,\n          src = _this$state.src,\n          cropped_img_data_url = _this$state.cropped_img_data_url;\n    return React.createElement(\"div\", {\n      className: \"App\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 114\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 115\n      },\n      __self: this\n    }, croppedImageUrl == '' && React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 116\n      },\n      __self: this\n    }, React.createElement(\"label\", {\n      for: \"upload_vimg1\",\n      class: \"crop_upload\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 117\n      },\n      __self: this\n    }, React.createElement(\"input\", {\n      type: \"file\",\n      id: \"upload_vimg1\",\n      accept: \"image/*\",\n      onChange: this.onSelectFile,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 118\n      },\n      __self: this\n    }), React.createElement(\"i\", {\n      class: \"fa fa-upload\",\n      \"aria-hidden\": \"true\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 119\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 120\n      },\n      __self: this\n    }, \"Upload key artwork \", React.createElement(\"sup\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 120\n      },\n      __self: this\n    }, \"*\")), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 121\n      },\n      __self: this\n    }, \"Click here to choose poster file to upload\"), React.createElement(\"img\", {\n      src: \"\",\n      id: \"bid_thumbnail\",\n      alt: \"\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 122\n      },\n      __self: this\n    })))), React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 125\n      },\n      __self: this\n    }, src && React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 126\n      },\n      __self: this\n    }, React.createElement(\"a\", {\n      href: \"javascript:\",\n      className: \"back\",\n      onClick: () => this.setState({\n        croppedImageUrl: '',\n        src: null\n      }),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 127\n      },\n      __self: this\n    }, React.createElement(\"i\", {\n      class: \"fa fa-arrow-left\",\n      \"aria-hidden\": \"true\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 127\n      },\n      __self: this\n    })), React.createElement(\"div\", {\n      class: \"crop_container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 128\n      },\n      __self: this\n    }, React.createElement(ReactCrop, {\n      src: src,\n      crop: crop,\n      maxHeight: 375,\n      minHeight: 375,\n      maxWidth: 250,\n      minWidth: 250,\n      ruleOfThirds: true,\n      onImageLoaded: this.onImageLoaded,\n      onComplete: this.onCropComplete,\n      onChange: this.onCropChange,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 128\n      },\n      __self: this\n    })))), React.createElement(\"div\", {\n      class: \"buttons\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 142\n      },\n      __self: this\n    }, React.createElement(\"button\", {\n      type: \"button\",\n      class: \"btndefault\",\n      onClick: () => {\n        $(\"#portal_modal\").removeClass(\"show\");\n        this.props.onChange();\n        this.props.cropImgUrl(this.state.src, croppedImageUrl, cropped_img_data_url);\n      },\n      disabled: croppedImageUrl == '' ? true : false,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 143\n      },\n      __self: this\n    }, \"Save\")));\n  }\n\n}\n\nexport default Cropper;","map":{"version":3,"sources":["/var/www/html/REACT_WORK/NEW_PLANETSHARE/web_planetshare/src/Container/ImageCrop/ImageCrop.js"],"names":["ReactDOM","React","Component","ReactCrop","$","Cropper","state","src","croppedImageUrl","crop","unit","width","height","x","y","cropped_img_data_url","onSelectFile","e","target","files","length","reader","FileReader","addEventListener","setState","result","readAsDataURL","onImageLoaded","image","imageRef","onCropComplete","makeClientCrop","onCropChange","percentCrop","componentDidMount","props","original_img","getCroppedImg","fileName","canvas","document","createElement","scaleX","naturalWidth","scaleY","naturalHeight","ctx","getContext","drawImage","dataURL","toDataURL","Promise","resolve","reject","toBlob","blob","console","error","name","window","URL","revokeObjectURL","fileUrl","createObjectURL","render","removeClass","onChange","cropImgUrl"],"mappings":"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","sourcesContent":["import ReactDOM from \"react-dom\";\nimport React, { Component } from \"react\";\nimport ReactCrop from \"react-image-crop\";\nimport \"react-image-crop/dist/ReactCrop.css\";\nimport $ from 'jquery'\nclass Cropper extends Component {\n  state = {\n    src: null,\n    croppedImageUrl:'',\n    crop: {\n      unit: 'px',\n      width: 250,\n      height: 375,\n      x: 25,\n      y: 25\n    },\n    cropped_img_data_url:null\n  };\ncomponentDidMount()\n{\n  this.setState({src:this.props.original_img,croppedImageUrl:this.props.croppedImageUrl})\n}\n// componentDidUpdate()\n// {\n//   console.log(\"update\"+this.props.croppedImageUrl );\n//   // (this.state.croppedImageUrl!=this.props.croppedImageUrl || this.state.src!=this.props.original_img)&&\n//   if(this.props.updateTrue)\n//   {\n//     this.setState({src:this.props.original_img,croppedImageUrl:this.props.croppedImageUrl})\n//   }\n// }\n  onSelectFile = e => {\n    if (e.target.files && e.target.files.length > 0) {\n      const reader = new FileReader();\n      reader.addEventListener(\"load\", () =>{\n      //console.log(reader.result)\n        this.setState({ src: reader.result })}\n      );\n      reader.readAsDataURL(e.target.files[0]);\n    }\n  };\n\n  // If you setState the crop in here you should return false.\n  onImageLoaded = image => {\n    this.imageRef = image;\n  };\n\n  onCropComplete = crop => {\n    this.makeClientCrop(crop);\n  };\n\n  onCropChange = (crop, percentCrop) => {\n    // You could also use percentCrop:\n    // this.setState({ crop: percentCrop });\n    this.setState({ crop });\n  };\n\n  async makeClientCrop(crop) {\n    if (this.imageRef && crop.width && crop.height) {\n      const croppedImageUrl = await this.getCroppedImg(\n        this.imageRef,\n        crop,\n        \"newFile.jpeg\"\n      );\n      this.setState({ croppedImageUrl });\n      //this.props.cropImgUrl(this.state.src,croppedImageUrl)\n    }\n  }\n\n  getCroppedImg(image, crop, fileName) {\n    const canvas = document.createElement(\"canvas\");\n    const scaleX = image.naturalWidth / image.width;\n    const scaleY = image.naturalHeight / image.height;\n    canvas.width = crop.width;\n    canvas.height = crop.height;\n    const ctx = canvas.getContext(\"2d\");\n\n    ctx.drawImage(\n      image,\n      crop.x * scaleX,\n      crop.y * scaleY,\n      crop.width * scaleX,\n      crop.height * scaleY,\n      0,\n      0,\n      crop.width,\n      crop.height\n    );\n// return canvas;\nvar dataURL = canvas.toDataURL();\n// var pic = dataURL.replace(/^data:image\\/(png|jpg);base64,/, \"\");\n//var pic = dataURL.replace(/^data:image\\/(png|jpg);base64,/, \"\");\n// console.log(dataURL);\nthis.setState({cropped_img_data_url:dataURL})\n    return new Promise((resolve, reject) => {\n      canvas.toBlob(blob => {\n        if (!blob) {\n          //reject(new Error('Canvas is empty'));\n          console.error(\"Canvas is empty\");\n          return;\n        }\n        blob.name = fileName;\n        // console.log(blob);\n        window.URL.revokeObjectURL(this.fileUrl);\n        this.fileUrl = window.URL.createObjectURL(blob);\n        resolve(this.fileUrl);\n      }, \"image/jpeg\");\n    });\n  }\n\n  render() {\n    const { crop, croppedImageUrl, src,cropped_img_data_url} = this.state;\n    return (\n      <div className=\"App\">\n        <div>\n          {croppedImageUrl=='' && <div>\n          <label for=\"upload_vimg1\" class=\"crop_upload\">\n              <input type=\"file\" id=\"upload_vimg1\" accept=\"image/*\" onChange={this.onSelectFile} />\n              <i class=\"fa fa-upload\" aria-hidden=\"true\"></i>\n              <b>Upload key artwork <sup>*</sup></b>\n              <p>Click here to choose poster file to upload</p>\n              <img src=\"\" id=\"bid_thumbnail\" alt=\"\" />\n          </label></div>}\n        </div>\n        <div >\n          {src && <div>\n            <a href=\"javascript:\" className=\"back\" onClick={()=>this.setState({croppedImageUrl:'',src:null})}><i class=\"fa fa-arrow-left\" aria-hidden=\"true\"></i></a>\n            <div class=\"crop_container\"><ReactCrop\n              src={src}\n              crop={crop}\n              maxHeight={375}\n              minHeight={375}\n              maxWidth={250}\n              minWidth={250}\n              ruleOfThirds\n              onImageLoaded={this.onImageLoaded}\n              onComplete={this.onCropComplete}\n              onChange={this.onCropChange}\n            /></div>\n          </div>}\n        </div>\n        <div class=\"buttons\">\n          <button type=\"button\" class=\"btndefault\" onClick={()=>{$(\"#portal_modal\").removeClass(\"show\");this.props.onChange();this.props.cropImgUrl(this.state.src,croppedImageUrl,cropped_img_data_url)}} disabled={croppedImageUrl==''?true:false}>Save</button>\n        </div>\n        {/*croppedImageUrl && (\n          <div class=\"cropped_img\"><img alt=\"Crop\" style={{ maxWidth: \"50%\" }} src={croppedImageUrl} /></div>\n        )*/}\n      </div>\n    );\n  }\n}\n\nexport default Cropper;\n"]},"metadata":{},"sourceType":"module"}