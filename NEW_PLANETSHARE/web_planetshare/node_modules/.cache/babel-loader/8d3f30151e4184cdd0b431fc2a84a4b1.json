{"ast":null,"code":"var _jsxFileName = \"/var/www/html/REACT_WORK/NEW_PLANETSHARE/web_planetshare/src/Container/ImageCrop/ImageCrop.js\";\nimport ReactDOM from \"react-dom\";\nimport React, { Component } from \"react\";\nimport ReactCrop from \"react-image-crop\";\nimport \"react-image-crop/dist/ReactCrop.css\";\n\nclass Cropper extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      src: null,\n      crop: {\n        unit: 'px',\n        width: 400,\n        height: 600,\n        x: 25,\n        y: 25\n      }\n    };\n\n    this.onSelectFile = e => {\n      if (e.target.files && e.target.files.length > 0) {\n        const reader = new FileReader();\n        reader.addEventListener(\"load\", () => this.setState({\n          src: reader.result\n        }));\n        reader.readAsDataURL(e.target.files[0]);\n      }\n    };\n\n    this.onImageLoaded = image => {\n      this.imageRef = image;\n    };\n\n    this.onCropComplete = crop => {\n      this.makeClientCrop(crop);\n    };\n\n    this.onCropChange = (crop, percentCrop) => {\n      // You could also use percentCrop:\n      // this.setState({ crop: percentCrop });\n      this.setState({\n        crop\n      });\n    };\n  }\n\n  async makeClientCrop(crop) {\n    if (this.imageRef && crop.width && crop.height) {\n      const croppedImageUrl = await this.getCroppedImg(this.imageRef, crop, \"newFile.jpeg\");\n      this.setState({\n        croppedImageUrl\n      });\n    }\n  }\n\n  getCroppedImg(image, crop, fileName) {\n    const canvas = document.createElement(\"canvas\");\n    const scaleX = image.naturalWidth / image.width;\n    const scaleY = image.naturalHeight / image.height;\n    canvas.width = crop.width;\n    canvas.height = crop.height;\n    const ctx = canvas.getContext(\"2d\");\n    ctx.drawImage(image, crop.x * scaleX, crop.y * scaleY, crop.width * scaleX, crop.height * scaleY, 0, 0, crop.width, crop.height);\n    return new Promise((resolve, reject) => {\n      canvas.toBlob(blob => {\n        if (!blob) {\n          //reject(new Error('Canvas is empty'));\n          console.error(\"Canvas is empty\");\n          return;\n        }\n\n        blob.name = fileName;\n        window.URL.revokeObjectURL(this.fileUrl);\n        this.fileUrl = window.URL.createObjectURL(blob);\n        resolve(this.fileUrl);\n      }, \"image/jpeg\");\n    });\n  }\n\n  render() {\n    console.log(\"hello\" + croppedImageUrl);\n    const _this$state = this.state,\n          crop = _this$state.crop,\n          croppedImageUrl = _this$state.croppedImageUrl,\n          src = _this$state.src;\n    return React.createElement(\"div\", {\n      className: \"App\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 94\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 95\n      },\n      __self: this\n    }, croppedImageUrl == '' && React.createElement(\"label\", {\n      for: \"upload_vimg1\",\n      class: \"crop_upload\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 96\n      },\n      __self: this\n    }, React.createElement(\"input\", {\n      type: \"file\",\n      id: \"upload_vimg1\",\n      accept: \"image/*\",\n      onChange: this.onSelectFile,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 97\n      },\n      __self: this\n    }), React.createElement(\"i\", {\n      class: \"fa fa-upload\",\n      \"aria-hidden\": \"true\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 98\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 99\n      },\n      __self: this\n    }, \"Upload key artwork \", React.createElement(\"sup\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 99\n      },\n      __self: this\n    }, \"*\")), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 100\n      },\n      __self: this\n    }, \"Click here to choose poster file to upload\"), React.createElement(\"img\", {\n      src: \"\",\n      id: \"bid_thumbnail\",\n      alt: \"\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 101\n      },\n      __self: this\n    }))), src && React.createElement(ReactCrop, {\n      src: src,\n      crop: crop,\n      maxHeight: 600,\n      minHeight: 600,\n      maxWidth: 400,\n      minWidth: 400,\n      ruleOfThirds: true,\n      onImageLoaded: this.onImageLoaded,\n      onComplete: this.onCropComplete,\n      onChange: this.onCropChange,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 105\n      },\n      __self: this\n    }), croppedImageUrl && React.createElement(\"img\", {\n      alt: \"Crop\",\n      style: {\n        maxWidth: \"50%\"\n      },\n      src: croppedImageUrl,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 119\n      },\n      __self: this\n    }));\n  }\n\n}\n\nexport default Cropper;","map":{"version":3,"sources":["/var/www/html/REACT_WORK/NEW_PLANETSHARE/web_planetshare/src/Container/ImageCrop/ImageCrop.js"],"names":["ReactDOM","React","Component","ReactCrop","Cropper","state","src","crop","unit","width","height","x","y","onSelectFile","e","target","files","length","reader","FileReader","addEventListener","setState","result","readAsDataURL","onImageLoaded","image","imageRef","onCropComplete","makeClientCrop","onCropChange","percentCrop","croppedImageUrl","getCroppedImg","fileName","canvas","document","createElement","scaleX","naturalWidth","scaleY","naturalHeight","ctx","getContext","drawImage","Promise","resolve","reject","toBlob","blob","console","error","name","window","URL","revokeObjectURL","fileUrl","createObjectURL","render","log","maxWidth"],"mappings":";AAAA,OAAOA,QAAP,MAAqB,WAArB;AACA,OAAOC,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,SAAP,MAAsB,kBAAtB;AACA,OAAO,qCAAP;;AAEA,MAAMC,OAAN,SAAsBF,SAAtB,CAAgC;AAAA;AAAA;AAAA,SAC9BG,KAD8B,GACtB;AACNC,MAAAA,GAAG,EAAE,IADC;AAENC,MAAAA,IAAI,EAAE;AACJC,QAAAA,IAAI,EAAE,IADF;AAEJC,QAAAA,KAAK,EAAE,GAFH;AAGJC,QAAAA,MAAM,EAAE,GAHJ;AAIJC,QAAAA,CAAC,EAAE,EAJC;AAKJC,QAAAA,CAAC,EAAE;AALC;AAFA,KADsB;;AAAA,SAY9BC,YAZ8B,GAYfC,CAAC,IAAI;AAClB,UAAIA,CAAC,CAACC,MAAF,CAASC,KAAT,IAAkBF,CAAC,CAACC,MAAF,CAASC,KAAT,CAAeC,MAAf,GAAwB,CAA9C,EAAiD;AAC/C,cAAMC,MAAM,GAAG,IAAIC,UAAJ,EAAf;AACAD,QAAAA,MAAM,CAACE,gBAAP,CAAwB,MAAxB,EAAgC,MAC9B,KAAKC,QAAL,CAAc;AAAEf,UAAAA,GAAG,EAAEY,MAAM,CAACI;AAAd,SAAd,CADF;AAGAJ,QAAAA,MAAM,CAACK,aAAP,CAAqBT,CAAC,CAACC,MAAF,CAASC,KAAT,CAAe,CAAf,CAArB;AACD;AACF,KApB6B;;AAAA,SAuB9BQ,aAvB8B,GAuBdC,KAAK,IAAI;AACvB,WAAKC,QAAL,GAAgBD,KAAhB;AACD,KAzB6B;;AAAA,SA2B9BE,cA3B8B,GA2BbpB,IAAI,IAAI;AACvB,WAAKqB,cAAL,CAAoBrB,IAApB;AACD,KA7B6B;;AAAA,SA+B9BsB,YA/B8B,GA+Bf,CAACtB,IAAD,EAAOuB,WAAP,KAAuB;AACpC;AACA;AACA,WAAKT,QAAL,CAAc;AAAEd,QAAAA;AAAF,OAAd;AACD,KAnC6B;AAAA;;AAqC9B,QAAMqB,cAAN,CAAqBrB,IAArB,EAA2B;AACzB,QAAI,KAAKmB,QAAL,IAAiBnB,IAAI,CAACE,KAAtB,IAA+BF,IAAI,CAACG,MAAxC,EAAgD;AAC9C,YAAMqB,eAAe,GAAG,MAAM,KAAKC,aAAL,CAC5B,KAAKN,QADuB,EAE5BnB,IAF4B,EAG5B,cAH4B,CAA9B;AAKA,WAAKc,QAAL,CAAc;AAAEU,QAAAA;AAAF,OAAd;AACD;AACF;;AAEDC,EAAAA,aAAa,CAACP,KAAD,EAAQlB,IAAR,EAAc0B,QAAd,EAAwB;AACnC,UAAMC,MAAM,GAAGC,QAAQ,CAACC,aAAT,CAAuB,QAAvB,CAAf;AACA,UAAMC,MAAM,GAAGZ,KAAK,CAACa,YAAN,GAAqBb,KAAK,CAAChB,KAA1C;AACA,UAAM8B,MAAM,GAAGd,KAAK,CAACe,aAAN,GAAsBf,KAAK,CAACf,MAA3C;AACAwB,IAAAA,MAAM,CAACzB,KAAP,GAAeF,IAAI,CAACE,KAApB;AACAyB,IAAAA,MAAM,CAACxB,MAAP,GAAgBH,IAAI,CAACG,MAArB;AACA,UAAM+B,GAAG,GAAGP,MAAM,CAACQ,UAAP,CAAkB,IAAlB,CAAZ;AAEAD,IAAAA,GAAG,CAACE,SAAJ,CACElB,KADF,EAEElB,IAAI,CAACI,CAAL,GAAS0B,MAFX,EAGE9B,IAAI,CAACK,CAAL,GAAS2B,MAHX,EAIEhC,IAAI,CAACE,KAAL,GAAa4B,MAJf,EAKE9B,IAAI,CAACG,MAAL,GAAc6B,MALhB,EAME,CANF,EAOE,CAPF,EAQEhC,IAAI,CAACE,KARP,EASEF,IAAI,CAACG,MATP;AAYA,WAAO,IAAIkC,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACtCZ,MAAAA,MAAM,CAACa,MAAP,CAAcC,IAAI,IAAI;AACpB,YAAI,CAACA,IAAL,EAAW;AACT;AACAC,UAAAA,OAAO,CAACC,KAAR,CAAc,iBAAd;AACA;AACD;;AACDF,QAAAA,IAAI,CAACG,IAAL,GAAYlB,QAAZ;AACAmB,QAAAA,MAAM,CAACC,GAAP,CAAWC,eAAX,CAA2B,KAAKC,OAAhC;AACA,aAAKA,OAAL,GAAeH,MAAM,CAACC,GAAP,CAAWG,eAAX,CAA2BR,IAA3B,CAAf;AACAH,QAAAA,OAAO,CAAC,KAAKU,OAAN,CAAP;AACD,OAVD,EAUG,YAVH;AAWD,KAZM,CAAP;AAaD;;AAEDE,EAAAA,MAAM,GAAG;AACPR,IAAAA,OAAO,CAACS,GAAR,CAAY,UAAQ3B,eAApB;AADO,wBAEgC,KAAK1B,KAFrC;AAAA,UAECE,IAFD,eAECA,IAFD;AAAA,UAEOwB,eAFP,eAEOA,eAFP;AAAA,UAEwBzB,GAFxB,eAEwBA,GAFxB;AAIP,WACE;AAAK,MAAA,SAAS,EAAC,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACGyB,eAAe,IAAE,EAAjB,IAAuB;AAAO,MAAA,GAAG,EAAC,cAAX;AAA0B,MAAA,KAAK,EAAC,aAAhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACpB;AAAO,MAAA,IAAI,EAAC,MAAZ;AAAmB,MAAA,EAAE,EAAC,cAAtB;AAAqC,MAAA,MAAM,EAAC,SAA5C;AAAsD,MAAA,QAAQ,EAAE,KAAKlB,YAArE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADoB,EAEpB;AAAG,MAAA,KAAK,EAAC,cAAT;AAAwB,qBAAY,MAApC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFoB,EAGpB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,8BAAsB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAAtB,CAHoB,EAIpB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oDAJoB,EAKpB;AAAK,MAAA,GAAG,EAAC,EAAT;AAAY,MAAA,EAAE,EAAC,eAAf;AAA+B,MAAA,GAAG,EAAC,EAAnC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MALoB,CAD1B,CADF,EAUGP,GAAG,IACF,oBAAC,SAAD;AACE,MAAA,GAAG,EAAEA,GADP;AAEE,MAAA,IAAI,EAAEC,IAFR;AAGE,MAAA,SAAS,EAAE,GAHb;AAIE,MAAA,SAAS,EAAE,GAJb;AAKE,MAAA,QAAQ,EAAE,GALZ;AAME,MAAA,QAAQ,EAAE,GANZ;AAOE,MAAA,YAAY,MAPd;AAQE,MAAA,aAAa,EAAE,KAAKiB,aARtB;AASE,MAAA,UAAU,EAAE,KAAKG,cATnB;AAUE,MAAA,QAAQ,EAAE,KAAKE,YAVjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAXJ,EAwBGE,eAAe,IACd;AAAK,MAAA,GAAG,EAAC,MAAT;AAAgB,MAAA,KAAK,EAAE;AAAE4B,QAAAA,QAAQ,EAAE;AAAZ,OAAvB;AAA4C,MAAA,GAAG,EAAE5B,eAAjD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAzBJ,CADF;AA8BD;;AArH6B;;AAwHhC,eAAe3B,OAAf","sourcesContent":["import ReactDOM from \"react-dom\";\nimport React, { Component } from \"react\";\nimport ReactCrop from \"react-image-crop\";\nimport \"react-image-crop/dist/ReactCrop.css\";\n\nclass Cropper extends Component {\n  state = {\n    src: null,\n    crop: {\n      unit: 'px',\n      width: 400,\n      height: 600,\n      x: 25,\n      y: 25\n    }\n  };\n\n  onSelectFile = e => {\n    if (e.target.files && e.target.files.length > 0) {\n      const reader = new FileReader();\n      reader.addEventListener(\"load\", () =>\n        this.setState({ src: reader.result })\n      );\n      reader.readAsDataURL(e.target.files[0]);\n    }\n  };\n\n  // If you setState the crop in here you should return false.\n  onImageLoaded = image => {\n    this.imageRef = image;\n  };\n\n  onCropComplete = crop => {\n    this.makeClientCrop(crop);\n  };\n\n  onCropChange = (crop, percentCrop) => {\n    // You could also use percentCrop:\n    // this.setState({ crop: percentCrop });\n    this.setState({ crop });\n  };\n\n  async makeClientCrop(crop) {\n    if (this.imageRef && crop.width && crop.height) {\n      const croppedImageUrl = await this.getCroppedImg(\n        this.imageRef,\n        crop,\n        \"newFile.jpeg\"\n      );\n      this.setState({ croppedImageUrl });\n    }\n  }\n\n  getCroppedImg(image, crop, fileName) {\n    const canvas = document.createElement(\"canvas\");\n    const scaleX = image.naturalWidth / image.width;\n    const scaleY = image.naturalHeight / image.height;\n    canvas.width = crop.width;\n    canvas.height = crop.height;\n    const ctx = canvas.getContext(\"2d\");\n\n    ctx.drawImage(\n      image,\n      crop.x * scaleX,\n      crop.y * scaleY,\n      crop.width * scaleX,\n      crop.height * scaleY,\n      0,\n      0,\n      crop.width,\n      crop.height\n    );\n\n    return new Promise((resolve, reject) => {\n      canvas.toBlob(blob => {\n        if (!blob) {\n          //reject(new Error('Canvas is empty'));\n          console.error(\"Canvas is empty\");\n          return;\n        }\n        blob.name = fileName;\n        window.URL.revokeObjectURL(this.fileUrl);\n        this.fileUrl = window.URL.createObjectURL(blob);\n        resolve(this.fileUrl);\n      }, \"image/jpeg\");\n    });\n  }\n\n  render() {\n    console.log(\"hello\"+croppedImageUrl);\n    const { crop, croppedImageUrl, src } = this.state;\n\n    return (\n      <div className=\"App\">\n        <div>\n          {croppedImageUrl=='' && <label for=\"upload_vimg1\" class=\"crop_upload\">\n              <input type=\"file\" id=\"upload_vimg1\" accept=\"image/*\" onChange={this.onSelectFile} />\n              <i class=\"fa fa-upload\" aria-hidden=\"true\"></i>\n              <b>Upload key artwork <sup>*</sup></b>\n              <p>Click here to choose poster file to upload</p>\n              <img src=\"\" id=\"bid_thumbnail\" alt=\"\" />\n          </label>}\n        </div>\n        {src && (\n          <ReactCrop\n            src={src}\n            crop={crop}\n            maxHeight={600}\n            minHeight={600}\n            maxWidth={400}\n            minWidth={400}\n            ruleOfThirds\n            onImageLoaded={this.onImageLoaded}\n            onComplete={this.onCropComplete}\n            onChange={this.onCropChange}\n          />\n        )}\n        {croppedImageUrl && (\n          <img alt=\"Crop\" style={{ maxWidth: \"50%\" }} src={croppedImageUrl} />\n        )}\n      </div>\n    );\n  }\n}\n\nexport default Cropper;\n"]},"metadata":{},"sourceType":"module"}