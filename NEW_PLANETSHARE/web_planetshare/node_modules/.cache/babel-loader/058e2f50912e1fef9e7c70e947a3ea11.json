{"ast":null,"code":"/*!\n * wavesurfer.js 3.3.0 (2019-12-30)\n * https://github.com/katspaugh/wavesurfer.js\n * @license BSD-3-Clause\n */\n(function webpackUniversalModuleDefinition(root, factory) {\n  if (typeof exports === 'object' && typeof module === 'object') module.exports = factory();else if (typeof define === 'function' && define.amd) define(\"WaveSurfer\", [], factory);else if (typeof exports === 'object') exports[\"WaveSurfer\"] = factory();else root[\"WaveSurfer\"] = factory();\n})(window, function () {\n  return (\n    /******/\n    function (modules) {\n      // webpackBootstrap\n\n      /******/\n      // The module cache\n\n      /******/\n      var installedModules = {};\n      /******/\n\n      /******/\n      // The require function\n\n      /******/\n\n      function __webpack_require__(moduleId) {\n        /******/\n\n        /******/\n        // Check if module is in cache\n\n        /******/\n        if (installedModules[moduleId]) {\n          /******/\n          return installedModules[moduleId].exports;\n          /******/\n        }\n        /******/\n        // Create a new module (and put it into the cache)\n\n        /******/\n\n\n        var module = installedModules[moduleId] = {\n          /******/\n          i: moduleId,\n\n          /******/\n          l: false,\n\n          /******/\n          exports: {}\n          /******/\n\n        };\n        /******/\n\n        /******/\n        // Execute the module function\n\n        /******/\n\n        modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n        /******/\n\n        /******/\n        // Flag the module as loaded\n\n        /******/\n\n        module.l = true;\n        /******/\n\n        /******/\n        // Return the exports of the module\n\n        /******/\n\n        return module.exports;\n        /******/\n      }\n      /******/\n\n      /******/\n\n      /******/\n      // expose the modules object (__webpack_modules__)\n\n      /******/\n\n\n      __webpack_require__.m = modules;\n      /******/\n\n      /******/\n      // expose the module cache\n\n      /******/\n\n      __webpack_require__.c = installedModules;\n      /******/\n\n      /******/\n      // define getter function for harmony exports\n\n      /******/\n\n      __webpack_require__.d = function (exports, name, getter) {\n        /******/\n        if (!__webpack_require__.o(exports, name)) {\n          /******/\n          Object.defineProperty(exports, name, {\n            enumerable: true,\n            get: getter\n          });\n          /******/\n        }\n        /******/\n\n      };\n      /******/\n\n      /******/\n      // define __esModule on exports\n\n      /******/\n\n\n      __webpack_require__.r = function (exports) {\n        /******/\n        if (typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n          /******/\n          Object.defineProperty(exports, Symbol.toStringTag, {\n            value: 'Module'\n          });\n          /******/\n        }\n        /******/\n\n\n        Object.defineProperty(exports, '__esModule', {\n          value: true\n        });\n        /******/\n      };\n      /******/\n\n      /******/\n      // create a fake namespace object\n\n      /******/\n      // mode & 1: value is a module id, require it\n\n      /******/\n      // mode & 2: merge all properties of value into the ns\n\n      /******/\n      // mode & 4: return value when already ns object\n\n      /******/\n      // mode & 8|1: behave like require\n\n      /******/\n\n\n      __webpack_require__.t = function (value, mode) {\n        /******/\n        if (mode & 1) value = __webpack_require__(value);\n        /******/\n\n        if (mode & 8) return value;\n        /******/\n\n        if (mode & 4 && typeof value === 'object' && value && value.__esModule) return value;\n        /******/\n\n        var ns = Object.create(null);\n        /******/\n\n        __webpack_require__.r(ns);\n        /******/\n\n\n        Object.defineProperty(ns, 'default', {\n          enumerable: true,\n          value: value\n        });\n        /******/\n\n        if (mode & 2 && typeof value != 'string') for (var key in value) __webpack_require__.d(ns, key, function (key) {\n          return value[key];\n        }.bind(null, key));\n        /******/\n\n        return ns;\n        /******/\n      };\n      /******/\n\n      /******/\n      // getDefaultExport function for compatibility with non-harmony modules\n\n      /******/\n\n\n      __webpack_require__.n = function (module) {\n        /******/\n        var getter = module && module.__esModule ?\n        /******/\n        function getDefault() {\n          return module['default'];\n        } :\n        /******/\n        function getModuleExports() {\n          return module;\n        };\n        /******/\n\n        __webpack_require__.d(getter, 'a', getter);\n        /******/\n\n\n        return getter;\n        /******/\n      };\n      /******/\n\n      /******/\n      // Object.prototype.hasOwnProperty.call\n\n      /******/\n\n\n      __webpack_require__.o = function (object, property) {\n        return Object.prototype.hasOwnProperty.call(object, property);\n      };\n      /******/\n\n      /******/\n      // __webpack_public_path__\n\n      /******/\n\n\n      __webpack_require__.p = \"\";\n      /******/\n\n      /******/\n\n      /******/\n      // Load entry module and return exports\n\n      /******/\n\n      return __webpack_require__(__webpack_require__.s = \"./src/wavesurfer.js\");\n      /******/\n    }(\n    /************************************************************************/\n\n    /******/\n    {\n      /***/\n      \"./node_modules/debounce/index.js\":\n      /*!****************************************!*\\\n        !*** ./node_modules/debounce/index.js ***!\n        \\****************************************/\n\n      /*! no static exports found */\n\n      /***/\n      function (module, exports) {\n        /**\n         * Returns a function, that, as long as it continues to be invoked, will not\n         * be triggered. The function will be called after it stops being called for\n         * N milliseconds. If `immediate` is passed, trigger the function on the\n         * leading edge, instead of the trailing. The function also has a property 'clear' \n         * that is a function which will clear the timer to prevent previously scheduled executions. \n         *\n         * @source underscore.js\n         * @see http://unscriptable.com/2009/03/20/debouncing-javascript-methods/\n         * @param {Function} function to wrap\n         * @param {Number} timeout in ms (`100`)\n         * @param {Boolean} whether to execute at the beginning (`false`)\n         * @api public\n         */\n        function debounce(func, wait, immediate) {\n          var timeout, args, context, timestamp, result;\n          if (null == wait) wait = 100;\n\n          function later() {\n            var last = Date.now() - timestamp;\n\n            if (last < wait && last >= 0) {\n              timeout = setTimeout(later, wait - last);\n            } else {\n              timeout = null;\n\n              if (!immediate) {\n                result = func.apply(context, args);\n                context = args = null;\n              }\n            }\n          }\n\n          ;\n\n          var debounced = function () {\n            context = this;\n            args = arguments;\n            timestamp = Date.now();\n            var callNow = immediate && !timeout;\n            if (!timeout) timeout = setTimeout(later, wait);\n\n            if (callNow) {\n              result = func.apply(context, args);\n              context = args = null;\n            }\n\n            return result;\n          };\n\n          debounced.clear = function () {\n            if (timeout) {\n              clearTimeout(timeout);\n              timeout = null;\n            }\n          };\n\n          debounced.flush = function () {\n            if (timeout) {\n              result = func.apply(context, args);\n              context = args = null;\n              clearTimeout(timeout);\n              timeout = null;\n            }\n          };\n\n          return debounced;\n        }\n\n        ; // Adds compatibility for ES modules\n\n        debounce.debounce = debounce;\n        module.exports = debounce;\n        /***/\n      },\n\n      /***/\n      \"./src/drawer.canvasentry.js\":\n      /*!***********************************!*\\\n        !*** ./src/drawer.canvasentry.js ***!\n        \\***********************************/\n\n      /*! no static exports found */\n\n      /***/\n      function (module, exports, __webpack_require__) {\n        \"use strict\";\n\n        Object.defineProperty(exports, \"__esModule\", {\n          value: true\n        });\n        exports.default = void 0;\n\n        var _style = _interopRequireDefault(__webpack_require__(\n        /*! ./util/style */\n        \"./src/util/style.js\"));\n\n        var _getId = _interopRequireDefault(__webpack_require__(\n        /*! ./util/get-id */\n        \"./src/util/get-id.js\"));\n\n        function _interopRequireDefault(obj) {\n          return obj && obj.__esModule ? obj : {\n            default: obj\n          };\n        }\n\n        function _classCallCheck(instance, Constructor) {\n          if (!(instance instanceof Constructor)) {\n            throw new TypeError(\"Cannot call a class as a function\");\n          }\n        }\n\n        function _defineProperties(target, props) {\n          for (var i = 0; i < props.length; i++) {\n            var descriptor = props[i];\n            descriptor.enumerable = descriptor.enumerable || false;\n            descriptor.configurable = true;\n            if (\"value\" in descriptor) descriptor.writable = true;\n            Object.defineProperty(target, descriptor.key, descriptor);\n          }\n        }\n\n        function _createClass(Constructor, protoProps, staticProps) {\n          if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n          if (staticProps) _defineProperties(Constructor, staticProps);\n          return Constructor;\n        }\n        /**\n         * The `CanvasEntry` class represents an element consisting of a wave `canvas`\n         * and an (optional) progress wave `canvas`.\n         *\n         * The `MultiCanvas` renderer uses one or more `CanvasEntry` instances to\n         * render a waveform, depending on the zoom level.\n         */\n\n\n        var CanvasEntry =\n        /*#__PURE__*/\n        function () {\n          function CanvasEntry() {\n            _classCallCheck(this, CanvasEntry);\n            /**\n             * The wave node\n             *\n             * @type {HTMLCanvasElement}\n             */\n\n\n            this.wave = null;\n            /**\n             * The wave canvas rendering context\n             *\n             * @type {CanvasRenderingContext2D}\n             */\n\n            this.waveCtx = null;\n            /**\n             * The (optional) progress wave node\n             *\n             * @type {HTMLCanvasElement}\n             */\n\n            this.progress = null;\n            /**\n             * The (optional) progress wave canvas rendering context\n             *\n             * @type {CanvasRenderingContext2D}\n             */\n\n            this.progressCtx = null;\n            /**\n             * Start of the area the canvas should render, between 0 and 1\n             *\n             * @type {number}\n             * @private\n             */\n\n            this.start = 0;\n            /**\n             * End of the area the canvas should render, between 0 and 1\n             *\n             * @type {number}\n             * @private\n             */\n\n            this.end = 1;\n            /**\n             * Unique identifier for this entry\n             *\n             * @type {string}\n             */\n\n            this.id = (0, _getId.default)(this.constructor.name.toLowerCase() + '_');\n            /**\n             * Canvas 2d context attributes\n             *\n             * @type {object}\n             */\n\n            this.canvasContextAttributes = {};\n          }\n          /**\n           * Store the wave canvas element and create the 2D rendering context\n           *\n           * @param {HTMLCanvasElement} element The wave `canvas` element.\n           */\n\n\n          _createClass(CanvasEntry, [{\n            key: \"initWave\",\n            value: function initWave(element) {\n              this.wave = element;\n              this.waveCtx = this.wave.getContext('2d', this.canvasContextAttributes);\n            }\n            /**\n             * Store the progress wave canvas element and create the 2D rendering\n             * context\n             *\n             * @param {HTMLCanvasElement} element The progress wave `canvas` element.\n             */\n\n          }, {\n            key: \"initProgress\",\n            value: function initProgress(element) {\n              this.progress = element;\n              this.progressCtx = this.progress.getContext('2d', this.canvasContextAttributes);\n            }\n            /**\n             * Update the dimensions\n             *\n             * @param {number} elementWidth Width of the entry\n             * @param {number} totalWidth Total width of the multi canvas renderer\n             * @param {number} width The new width of the element\n             * @param {number} height The new height of the element\n             */\n\n          }, {\n            key: \"updateDimensions\",\n            value: function updateDimensions(elementWidth, totalWidth, width, height) {\n              // where the canvas starts and ends in the waveform, represented as a\n              // decimal between 0 and 1\n              this.start = this.wave.offsetLeft / totalWidth || 0;\n              this.end = this.start + elementWidth / totalWidth; // set wave canvas dimensions\n\n              this.wave.width = width;\n              this.wave.height = height;\n              var elementSize = {\n                width: elementWidth + 'px'\n              };\n              (0, _style.default)(this.wave, elementSize);\n\n              if (this.hasProgressCanvas) {\n                // set progress canvas dimensions\n                this.progress.width = width;\n                this.progress.height = height;\n                (0, _style.default)(this.progress, elementSize);\n              }\n            }\n            /**\n             * Clear the wave and progress rendering contexts\n             */\n\n          }, {\n            key: \"clearWave\",\n            value: function clearWave() {\n              // wave\n              this.waveCtx.clearRect(0, 0, this.waveCtx.canvas.width, this.waveCtx.canvas.height); // progress\n\n              if (this.hasProgressCanvas) {\n                this.progressCtx.clearRect(0, 0, this.progressCtx.canvas.width, this.progressCtx.canvas.height);\n              }\n            }\n            /**\n             * Set the fill styles for wave and progress\n             *\n             * @param {string} waveColor Fill color for the wave canvas\n             * @param {?string} progressColor Fill color for the progress canvas\n             */\n\n          }, {\n            key: \"setFillStyles\",\n            value: function setFillStyles(waveColor, progressColor) {\n              this.waveCtx.fillStyle = waveColor;\n\n              if (this.hasProgressCanvas) {\n                this.progressCtx.fillStyle = progressColor;\n              }\n            }\n            /**\n             * Draw a rectangle for wave and progress\n             *\n             * @param {number} x X start position\n             * @param {number} y Y start position\n             * @param {number} width Width of the rectangle\n             * @param {number} height Height of the rectangle\n             * @param {number} radius Radius of the rectangle\n             */\n\n          }, {\n            key: \"fillRects\",\n            value: function fillRects(x, y, width, height, radius) {\n              this.fillRectToContext(this.waveCtx, x, y, width, height, radius);\n\n              if (this.hasProgressCanvas) {\n                this.fillRectToContext(this.progressCtx, x, y, width, height, radius);\n              }\n            }\n            /**\n             * Draw the actual rectangle on a `canvas` element\n             *\n             * @private\n             * @param {CanvasRenderingContext2D} ctx Rendering context of target canvas\n             * @param {number} x X start position\n             * @param {number} y Y start position\n             * @param {number} width Width of the rectangle\n             * @param {number} height Height of the rectangle\n             * @param {number} radius Radius of the rectangle\n             */\n\n          }, {\n            key: \"fillRectToContext\",\n            value: function fillRectToContext(ctx, x, y, width, height, radius) {\n              if (!ctx) {\n                return;\n              }\n\n              if (radius) {\n                this.drawRoundedRect(ctx, x, y, width, height, radius);\n              } else {\n                ctx.fillRect(x, y, width, height);\n              }\n            }\n            /**\n             * Draw a rounded rectangle on Canvas\n             *\n             * @private\n             * @param {CanvasRenderingContext2D} ctx Canvas context\n             * @param {number} x X-position of the rectangle\n             * @param {number} y Y-position of the rectangle\n             * @param {number} width Width of the rectangle\n             * @param {number} height Height of the rectangle\n             * @param {number} radius Radius of the rectangle\n             *\n             * @return {void}\n             * @example drawRoundedRect(ctx, 50, 50, 5, 10, 3)\n             */\n\n          }, {\n            key: \"drawRoundedRect\",\n            value: function drawRoundedRect(ctx, x, y, width, height, radius) {\n              if (height === 0) {\n                return;\n              } // peaks are float values from -1 to 1. Use absolute height values in\n              // order to correctly calculate rounded rectangle coordinates\n\n\n              if (height < 0) {\n                height *= -1;\n                y -= height;\n              }\n\n              ctx.beginPath();\n              ctx.moveTo(x + radius, y);\n              ctx.lineTo(x + width - radius, y);\n              ctx.quadraticCurveTo(x + width, y, x + width, y + radius);\n              ctx.lineTo(x + width, y + height - radius);\n              ctx.quadraticCurveTo(x + width, y + height, x + width - radius, y + height);\n              ctx.lineTo(x + radius, y + height);\n              ctx.quadraticCurveTo(x, y + height, x, y + height - radius);\n              ctx.lineTo(x, y + radius);\n              ctx.quadraticCurveTo(x, y, x + radius, y);\n              ctx.closePath();\n              ctx.fill();\n            }\n            /**\n             * Render the actual wave and progress lines\n             *\n             * @param {number[]} peaks Array with peaks data\n             * @param {number} absmax Maximum peak value (absolute)\n             * @param {number} halfH Half the height of the waveform\n             * @param {number} offsetY Offset to the top\n             * @param {number} start The x-offset of the beginning of the area that\n             * should be rendered\n             * @param {number} end The x-offset of the end of the area that\n             * should be rendered\n             */\n\n          }, {\n            key: \"drawLines\",\n            value: function drawLines(peaks, absmax, halfH, offsetY, start, end) {\n              this.drawLineToContext(this.waveCtx, peaks, absmax, halfH, offsetY, start, end);\n\n              if (this.hasProgressCanvas) {\n                this.drawLineToContext(this.progressCtx, peaks, absmax, halfH, offsetY, start, end);\n              }\n            }\n            /**\n             * Render the actual waveform line on a `canvas` element\n             *\n             * @private\n             * @param {CanvasRenderingContext2D} ctx Rendering context of target canvas\n             * @param {number[]} peaks Array with peaks data\n             * @param {number} absmax Maximum peak value (absolute)\n             * @param {number} halfH Half the height of the waveform\n             * @param {number} offsetY Offset to the top\n             * @param {number} start The x-offset of the beginning of the area that\n             * should be rendered\n             * @param {number} end The x-offset of the end of the area that\n             * should be rendered\n             */\n\n          }, {\n            key: \"drawLineToContext\",\n            value: function drawLineToContext(ctx, peaks, absmax, halfH, offsetY, start, end) {\n              if (!ctx) {\n                return;\n              }\n\n              var length = peaks.length / 2;\n              var first = Math.round(length * this.start); // use one more peak value to make sure we join peaks at ends -- unless,\n              // of course, this is the last canvas\n\n              var last = Math.round(length * this.end) + 1;\n              var canvasStart = first;\n              var canvasEnd = last;\n              var scale = this.wave.width / (canvasEnd - canvasStart - 1); // optimization\n\n              var halfOffset = halfH + offsetY;\n              var absmaxHalf = absmax / halfH;\n              ctx.beginPath();\n              ctx.moveTo((canvasStart - first) * scale, halfOffset);\n              ctx.lineTo((canvasStart - first) * scale, halfOffset - Math.round((peaks[2 * canvasStart] || 0) / absmaxHalf));\n              var i, peak, h;\n\n              for (i = canvasStart; i < canvasEnd; i++) {\n                peak = peaks[2 * i] || 0;\n                h = Math.round(peak / absmaxHalf);\n                ctx.lineTo((i - first) * scale + this.halfPixel, halfOffset - h);\n              } // draw the bottom edge going backwards, to make a single\n              // closed hull to fill\n\n\n              var j = canvasEnd - 1;\n\n              for (j; j >= canvasStart; j--) {\n                peak = peaks[2 * j + 1] || 0;\n                h = Math.round(peak / absmaxHalf);\n                ctx.lineTo((j - first) * scale + this.halfPixel, halfOffset - h);\n              }\n\n              ctx.lineTo((canvasStart - first) * scale, halfOffset - Math.round((peaks[2 * canvasStart + 1] || 0) / absmaxHalf));\n              ctx.closePath();\n              ctx.fill();\n            }\n            /**\n             * Destroys this entry\n             */\n\n          }, {\n            key: \"destroy\",\n            value: function destroy() {\n              this.waveCtx = null;\n              this.wave = null;\n              this.progressCtx = null;\n              this.progress = null;\n            }\n            /**\n             * Return image data of the wave `canvas` element\n             *\n             * When using a `type` of `'blob'`, this will return a `Promise` that\n             * resolves with a `Blob` instance.\n             *\n             * @param {string} format='image/png' An optional value of a format type.\n             * @param {number} quality=0.92 An optional value between 0 and 1.\n             * @param {string} type='dataURL' Either 'dataURL' or 'blob'.\n             * @return {string|Promise} When using the default `'dataURL'` `type` this\n             * returns a data URL. When using the `'blob'` `type` this returns a\n             * `Promise` that resolves with a `Blob` instance.\n             */\n\n          }, {\n            key: \"getImage\",\n            value: function getImage(format, quality, type) {\n              var _this = this;\n\n              if (type === 'blob') {\n                return new Promise(function (resolve) {\n                  _this.wave.toBlob(resolve, format, quality);\n                });\n              } else if (type === 'dataURL') {\n                return this.wave.toDataURL(format, quality);\n              }\n            }\n          }]);\n\n          return CanvasEntry;\n        }();\n\n        exports.default = CanvasEntry;\n        module.exports = exports.default;\n        /***/\n      },\n\n      /***/\n      \"./src/drawer.js\":\n      /*!***********************!*\\\n        !*** ./src/drawer.js ***!\n        \\***********************/\n\n      /*! no static exports found */\n\n      /***/\n      function (module, exports, __webpack_require__) {\n        \"use strict\";\n\n        Object.defineProperty(exports, \"__esModule\", {\n          value: true\n        });\n        exports.default = void 0;\n\n        var util = _interopRequireWildcard(__webpack_require__(\n        /*! ./util */\n        \"./src/util/index.js\"));\n\n        function _getRequireWildcardCache() {\n          if (typeof WeakMap !== \"function\") return null;\n          var cache = new WeakMap();\n\n          _getRequireWildcardCache = function _getRequireWildcardCache() {\n            return cache;\n          };\n\n          return cache;\n        }\n\n        function _interopRequireWildcard(obj) {\n          if (obj && obj.__esModule) {\n            return obj;\n          }\n\n          if (obj === null || _typeof(obj) !== \"object\" && typeof obj !== \"function\") {\n            return {\n              default: obj\n            };\n          }\n\n          var cache = _getRequireWildcardCache();\n\n          if (cache && cache.has(obj)) {\n            return cache.get(obj);\n          }\n\n          var newObj = {};\n          var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;\n\n          for (var key in obj) {\n            if (Object.prototype.hasOwnProperty.call(obj, key)) {\n              var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;\n\n              if (desc && (desc.get || desc.set)) {\n                Object.defineProperty(newObj, key, desc);\n              } else {\n                newObj[key] = obj[key];\n              }\n            }\n          }\n\n          newObj.default = obj;\n\n          if (cache) {\n            cache.set(obj, newObj);\n          }\n\n          return newObj;\n        }\n\n        function _typeof(obj) {\n          if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n            _typeof = function _typeof(obj) {\n              return typeof obj;\n            };\n          } else {\n            _typeof = function _typeof(obj) {\n              return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n            };\n          }\n\n          return _typeof(obj);\n        }\n\n        function _classCallCheck(instance, Constructor) {\n          if (!(instance instanceof Constructor)) {\n            throw new TypeError(\"Cannot call a class as a function\");\n          }\n        }\n\n        function _defineProperties(target, props) {\n          for (var i = 0; i < props.length; i++) {\n            var descriptor = props[i];\n            descriptor.enumerable = descriptor.enumerable || false;\n            descriptor.configurable = true;\n            if (\"value\" in descriptor) descriptor.writable = true;\n            Object.defineProperty(target, descriptor.key, descriptor);\n          }\n        }\n\n        function _createClass(Constructor, protoProps, staticProps) {\n          if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n          if (staticProps) _defineProperties(Constructor, staticProps);\n          return Constructor;\n        }\n\n        function _possibleConstructorReturn(self, call) {\n          if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {\n            return call;\n          }\n\n          return _assertThisInitialized(self);\n        }\n\n        function _assertThisInitialized(self) {\n          if (self === void 0) {\n            throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n          }\n\n          return self;\n        }\n\n        function _getPrototypeOf(o) {\n          _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n            return o.__proto__ || Object.getPrototypeOf(o);\n          };\n          return _getPrototypeOf(o);\n        }\n\n        function _inherits(subClass, superClass) {\n          if (typeof superClass !== \"function\" && superClass !== null) {\n            throw new TypeError(\"Super expression must either be null or a function\");\n          }\n\n          subClass.prototype = Object.create(superClass && superClass.prototype, {\n            constructor: {\n              value: subClass,\n              writable: true,\n              configurable: true\n            }\n          });\n          if (superClass) _setPrototypeOf(subClass, superClass);\n        }\n\n        function _setPrototypeOf(o, p) {\n          _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n            o.__proto__ = p;\n            return o;\n          };\n\n          return _setPrototypeOf(o, p);\n        }\n        /**\n         * Parent class for renderers\n         *\n         * @extends {Observer}\n         */\n\n\n        var Drawer =\n        /*#__PURE__*/\n        function (_util$Observer) {\n          _inherits(Drawer, _util$Observer);\n          /**\n           * @param {HTMLElement} container The container node of the wavesurfer instance\n           * @param {WavesurferParams} params The wavesurfer initialisation options\n           */\n\n\n          function Drawer(container, params) {\n            var _this;\n\n            _classCallCheck(this, Drawer);\n\n            _this = _possibleConstructorReturn(this, _getPrototypeOf(Drawer).call(this));\n            /** @private */\n\n            _this.container = container;\n            /**\n             * @type {WavesurferParams}\n             * @private\n             */\n\n            _this.params = params;\n            /**\n             * The width of the renderer\n             * @type {number}\n             */\n\n            _this.width = 0;\n            /**\n             * The height of the renderer\n             * @type {number}\n             */\n\n            _this.height = params.height * _this.params.pixelRatio;\n            /** @private */\n\n            _this.lastPos = 0;\n            /**\n             * The `<wave>` element which is added to the container\n             * @type {HTMLElement}\n             */\n\n            _this.wrapper = null;\n            return _this;\n          }\n          /**\n           * Alias of `util.style`\n           *\n           * @param {HTMLElement} el The element that the styles will be applied to\n           * @param {Object} styles The map of propName: attribute, both are used as-is\n           * @return {HTMLElement} el\n           */\n\n\n          _createClass(Drawer, [{\n            key: \"style\",\n            value: function style(el, styles) {\n              return util.style(el, styles);\n            }\n            /**\n             * Create the wrapper `<wave>` element, style it and set up the events for\n             * interaction\n             */\n\n          }, {\n            key: \"createWrapper\",\n            value: function createWrapper() {\n              this.wrapper = this.container.appendChild(document.createElement('wave'));\n              this.style(this.wrapper, {\n                display: 'block',\n                position: 'relative',\n                userSelect: 'none',\n                webkitUserSelect: 'none',\n                height: this.params.height + 'px'\n              });\n\n              if (this.params.fillParent || this.params.scrollParent) {\n                this.style(this.wrapper, {\n                  width: '100%',\n                  overflowX: this.params.hideScrollbar ? 'hidden' : 'auto',\n                  overflowY: 'hidden'\n                });\n              }\n\n              this.setupWrapperEvents();\n            }\n            /**\n             * Handle click event\n             *\n             * @param {Event} e Click event\n             * @param {?boolean} noPrevent Set to true to not call `e.preventDefault()`\n             * @return {number} Playback position from 0 to 1\n             */\n\n          }, {\n            key: \"handleEvent\",\n            value: function handleEvent(e, noPrevent) {\n              !noPrevent && e.preventDefault();\n              var clientX = e.targetTouches ? e.targetTouches[0].clientX : e.clientX;\n              var bbox = this.wrapper.getBoundingClientRect();\n              var nominalWidth = this.width;\n              var parentWidth = this.getWidth();\n              var progress;\n\n              if (!this.params.fillParent && nominalWidth < parentWidth) {\n                progress = (this.params.rtl ? bbox.right - clientX : clientX - bbox.left) * (this.params.pixelRatio / nominalWidth) || 0;\n\n                if (progress > 1) {\n                  progress = 1;\n                }\n              } else {\n                progress = ((this.params.rtl ? bbox.right - clientX : clientX - bbox.left) + this.wrapper.scrollLeft) / this.wrapper.scrollWidth || 0;\n              }\n\n              return progress;\n            }\n            /**\n             * @private\n             */\n\n          }, {\n            key: \"setupWrapperEvents\",\n            value: function setupWrapperEvents() {\n              var _this2 = this;\n\n              this.wrapper.addEventListener('click', function (e) {\n                var scrollbarHeight = _this2.wrapper.offsetHeight - _this2.wrapper.clientHeight;\n\n                if (scrollbarHeight !== 0) {\n                  // scrollbar is visible.  Check if click was on it\n                  var bbox = _this2.wrapper.getBoundingClientRect();\n\n                  if (e.clientY >= bbox.bottom - scrollbarHeight) {\n                    // ignore mousedown as it was on the scrollbar\n                    return;\n                  }\n                }\n\n                if (_this2.params.interact) {\n                  _this2.fireEvent('click', e, _this2.handleEvent(e));\n                }\n              });\n              this.wrapper.addEventListener('dblclick', function (e) {\n                if (_this2.params.interact) {\n                  _this2.fireEvent('dblclick', e, _this2.handleEvent(e));\n                }\n              });\n              this.wrapper.addEventListener('scroll', function (e) {\n                return _this2.fireEvent('scroll', e);\n              });\n            }\n            /**\n             * Draw peaks on the canvas\n             *\n             * @param {number[]|Number.<Array[]>} peaks Can also be an array of arrays\n             * for split channel rendering\n             * @param {number} length The width of the area that should be drawn\n             * @param {number} start The x-offset of the beginning of the area that\n             * should be rendered\n             * @param {number} end The x-offset of the end of the area that should be\n             * rendered\n             */\n\n          }, {\n            key: \"drawPeaks\",\n            value: function drawPeaks(peaks, length, start, end) {\n              if (!this.setWidth(length)) {\n                this.clearWave();\n              }\n\n              this.params.barWidth ? this.drawBars(peaks, 0, start, end) : this.drawWave(peaks, 0, start, end);\n            }\n            /**\n             * Scroll to the beginning\n             */\n\n          }, {\n            key: \"resetScroll\",\n            value: function resetScroll() {\n              if (this.wrapper !== null) {\n                this.wrapper.scrollLeft = 0;\n              }\n            }\n            /**\n             * Recenter the view-port at a certain percent of the waveform\n             *\n             * @param {number} percent Value from 0 to 1 on the waveform\n             */\n\n          }, {\n            key: \"recenter\",\n            value: function recenter(percent) {\n              var position = this.wrapper.scrollWidth * percent;\n              this.recenterOnPosition(position, true);\n            }\n            /**\n             * Recenter the view-port on a position, either scroll there immediately or\n             * in steps of 5 pixels\n             *\n             * @param {number} position X-offset in pixels\n             * @param {boolean} immediate Set to true to immediately scroll somewhere\n             */\n\n          }, {\n            key: \"recenterOnPosition\",\n            value: function recenterOnPosition(position, immediate) {\n              var scrollLeft = this.wrapper.scrollLeft;\n              var half = ~~(this.wrapper.clientWidth / 2);\n              var maxScroll = this.wrapper.scrollWidth - this.wrapper.clientWidth;\n              var target = position - half;\n              var offset = target - scrollLeft;\n\n              if (maxScroll == 0) {\n                // no need to continue if scrollbar is not there\n                return;\n              } // if the cursor is currently visible...\n\n\n              if (!immediate && -half <= offset && offset < half) {\n                // set rate at which waveform is centered\n                var rate = this.params.autoCenterRate; // make rate depend on width of view and length of waveform\n\n                rate /= half;\n                rate *= maxScroll;\n                offset = Math.max(-rate, Math.min(rate, offset));\n                target = scrollLeft + offset;\n              } // limit target to valid range (0 to maxScroll)\n\n\n              target = Math.max(0, Math.min(maxScroll, target)); // no use attempting to scroll if we're not moving\n\n              if (target != scrollLeft) {\n                this.wrapper.scrollLeft = target;\n              }\n            }\n            /**\n             * Get the current scroll position in pixels\n             *\n             * @return {number} Horizontal scroll position in pixels\n             */\n\n          }, {\n            key: \"getScrollX\",\n            value: function getScrollX() {\n              var x = 0;\n\n              if (this.wrapper) {\n                var pixelRatio = this.params.pixelRatio;\n                x = Math.round(this.wrapper.scrollLeft * pixelRatio); // In cases of elastic scroll (safari with mouse wheel) you can\n                // scroll beyond the limits of the container\n                // Calculate and floor the scrollable extent to make sure an out\n                // of bounds value is not returned\n                // Ticket #1312\n\n                if (this.params.scrollParent) {\n                  var maxScroll = ~~(this.wrapper.scrollWidth * pixelRatio - this.getWidth());\n                  x = Math.min(maxScroll, Math.max(0, x));\n                }\n              }\n\n              return x;\n            }\n            /**\n             * Get the width of the container\n             *\n             * @return {number} The width of the container\n             */\n\n          }, {\n            key: \"getWidth\",\n            value: function getWidth() {\n              return Math.round(this.container.clientWidth * this.params.pixelRatio);\n            }\n            /**\n             * Set the width of the container\n             *\n             * @param {number} width The new width of the container\n             * @return {boolean} Whether the width of the container was updated or not\n             */\n\n          }, {\n            key: \"setWidth\",\n            value: function setWidth(width) {\n              if (this.width == width) {\n                return false;\n              }\n\n              this.width = width;\n\n              if (this.params.fillParent || this.params.scrollParent) {\n                this.style(this.wrapper, {\n                  width: ''\n                });\n              } else {\n                this.style(this.wrapper, {\n                  width: ~~(this.width / this.params.pixelRatio) + 'px'\n                });\n              }\n\n              this.updateSize();\n              return true;\n            }\n            /**\n             * Set the height of the container\n             *\n             * @param {number} height The new height of the container.\n             * @return {boolean} Whether the height of the container was updated or not\n             */\n\n          }, {\n            key: \"setHeight\",\n            value: function setHeight(height) {\n              if (height == this.height) {\n                return false;\n              }\n\n              this.height = height;\n              this.style(this.wrapper, {\n                height: ~~(this.height / this.params.pixelRatio) + 'px'\n              });\n              this.updateSize();\n              return true;\n            }\n            /**\n             * Called by wavesurfer when progress should be rendered\n             *\n             * @param {number} progress From 0 to 1\n             */\n\n          }, {\n            key: \"progress\",\n            value: function progress(_progress) {\n              var minPxDelta = 1 / this.params.pixelRatio;\n              var pos = Math.round(_progress * this.width) * minPxDelta;\n\n              if (pos < this.lastPos || pos - this.lastPos >= minPxDelta) {\n                this.lastPos = pos;\n\n                if (this.params.scrollParent && this.params.autoCenter) {\n                  var newPos = ~~(this.wrapper.scrollWidth * _progress);\n                  this.recenterOnPosition(newPos, this.params.autoCenterImmediately);\n                }\n\n                this.updateProgress(pos);\n              }\n            }\n            /**\n             * This is called when wavesurfer is destroyed\n             */\n\n          }, {\n            key: \"destroy\",\n            value: function destroy() {\n              this.unAll();\n\n              if (this.wrapper) {\n                if (this.wrapper.parentNode == this.container) {\n                  this.container.removeChild(this.wrapper);\n                }\n\n                this.wrapper = null;\n              }\n            }\n            /* Renderer-specific methods */\n\n            /**\n             * Called after cursor related params have changed.\n             *\n             * @abstract\n             */\n\n          }, {\n            key: \"updateCursor\",\n            value: function updateCursor() {}\n            /**\n             * Called when the size of the container changes so the renderer can adjust\n             *\n             * @abstract\n             */\n\n          }, {\n            key: \"updateSize\",\n            value: function updateSize() {}\n            /**\n             * Draw a waveform with bars\n             *\n             * @abstract\n             * @param {number[]|Number.<Array[]>} peaks Can also be an array of arrays for split channel\n             * rendering\n             * @param {number} channelIndex The index of the current channel. Normally\n             * should be 0\n             * @param {number} start The x-offset of the beginning of the area that\n             * should be rendered\n             * @param {number} end The x-offset of the end of the area that should be\n             * rendered\n             */\n\n          }, {\n            key: \"drawBars\",\n            value: function drawBars(peaks, channelIndex, start, end) {}\n            /**\n             * Draw a waveform\n             *\n             * @abstract\n             * @param {number[]|Number.<Array[]>} peaks Can also be an array of arrays for split channel\n             * rendering\n             * @param {number} channelIndex The index of the current channel. Normally\n             * should be 0\n             * @param {number} start The x-offset of the beginning of the area that\n             * should be rendered\n             * @param {number} end The x-offset of the end of the area that should be\n             * rendered\n             */\n\n          }, {\n            key: \"drawWave\",\n            value: function drawWave(peaks, channelIndex, start, end) {}\n            /**\n             * Clear the waveform\n             *\n             * @abstract\n             */\n\n          }, {\n            key: \"clearWave\",\n            value: function clearWave() {}\n            /**\n             * Render the new progress\n             *\n             * @abstract\n             * @param {number} position X-Offset of progress position in pixels\n             */\n\n          }, {\n            key: \"updateProgress\",\n            value: function updateProgress(position) {}\n          }]);\n\n          return Drawer;\n        }(util.Observer);\n\n        exports.default = Drawer;\n        module.exports = exports.default;\n        /***/\n      },\n\n      /***/\n      \"./src/drawer.multicanvas.js\":\n      /*!***********************************!*\\\n        !*** ./src/drawer.multicanvas.js ***!\n        \\***********************************/\n\n      /*! no static exports found */\n\n      /***/\n      function (module, exports, __webpack_require__) {\n        \"use strict\";\n\n        Object.defineProperty(exports, \"__esModule\", {\n          value: true\n        });\n        exports.default = void 0;\n\n        var _drawer = _interopRequireDefault(__webpack_require__(\n        /*! ./drawer */\n        \"./src/drawer.js\"));\n\n        var util = _interopRequireWildcard(__webpack_require__(\n        /*! ./util */\n        \"./src/util/index.js\"));\n\n        var _drawer2 = _interopRequireDefault(__webpack_require__(\n        /*! ./drawer.canvasentry */\n        \"./src/drawer.canvasentry.js\"));\n\n        function _getRequireWildcardCache() {\n          if (typeof WeakMap !== \"function\") return null;\n          var cache = new WeakMap();\n\n          _getRequireWildcardCache = function _getRequireWildcardCache() {\n            return cache;\n          };\n\n          return cache;\n        }\n\n        function _interopRequireWildcard(obj) {\n          if (obj && obj.__esModule) {\n            return obj;\n          }\n\n          if (obj === null || _typeof(obj) !== \"object\" && typeof obj !== \"function\") {\n            return {\n              default: obj\n            };\n          }\n\n          var cache = _getRequireWildcardCache();\n\n          if (cache && cache.has(obj)) {\n            return cache.get(obj);\n          }\n\n          var newObj = {};\n          var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;\n\n          for (var key in obj) {\n            if (Object.prototype.hasOwnProperty.call(obj, key)) {\n              var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;\n\n              if (desc && (desc.get || desc.set)) {\n                Object.defineProperty(newObj, key, desc);\n              } else {\n                newObj[key] = obj[key];\n              }\n            }\n          }\n\n          newObj.default = obj;\n\n          if (cache) {\n            cache.set(obj, newObj);\n          }\n\n          return newObj;\n        }\n\n        function _interopRequireDefault(obj) {\n          return obj && obj.__esModule ? obj : {\n            default: obj\n          };\n        }\n\n        function _typeof(obj) {\n          if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n            _typeof = function _typeof(obj) {\n              return typeof obj;\n            };\n          } else {\n            _typeof = function _typeof(obj) {\n              return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n            };\n          }\n\n          return _typeof(obj);\n        }\n\n        function _classCallCheck(instance, Constructor) {\n          if (!(instance instanceof Constructor)) {\n            throw new TypeError(\"Cannot call a class as a function\");\n          }\n        }\n\n        function _defineProperties(target, props) {\n          for (var i = 0; i < props.length; i++) {\n            var descriptor = props[i];\n            descriptor.enumerable = descriptor.enumerable || false;\n            descriptor.configurable = true;\n            if (\"value\" in descriptor) descriptor.writable = true;\n            Object.defineProperty(target, descriptor.key, descriptor);\n          }\n        }\n\n        function _createClass(Constructor, protoProps, staticProps) {\n          if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n          if (staticProps) _defineProperties(Constructor, staticProps);\n          return Constructor;\n        }\n\n        function _possibleConstructorReturn(self, call) {\n          if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {\n            return call;\n          }\n\n          return _assertThisInitialized(self);\n        }\n\n        function _assertThisInitialized(self) {\n          if (self === void 0) {\n            throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n          }\n\n          return self;\n        }\n\n        function _getPrototypeOf(o) {\n          _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n            return o.__proto__ || Object.getPrototypeOf(o);\n          };\n          return _getPrototypeOf(o);\n        }\n\n        function _inherits(subClass, superClass) {\n          if (typeof superClass !== \"function\" && superClass !== null) {\n            throw new TypeError(\"Super expression must either be null or a function\");\n          }\n\n          subClass.prototype = Object.create(superClass && superClass.prototype, {\n            constructor: {\n              value: subClass,\n              writable: true,\n              configurable: true\n            }\n          });\n          if (superClass) _setPrototypeOf(subClass, superClass);\n        }\n\n        function _setPrototypeOf(o, p) {\n          _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n            o.__proto__ = p;\n            return o;\n          };\n\n          return _setPrototypeOf(o, p);\n        }\n        /**\n         * MultiCanvas renderer for wavesurfer. Is currently the default and sole\n         * builtin renderer.\n         *\n         * A `MultiCanvas` consists of one or more `CanvasEntry` instances, depending\n         * on the zoom level.\n         */\n\n\n        var MultiCanvas =\n        /*#__PURE__*/\n        function (_Drawer) {\n          _inherits(MultiCanvas, _Drawer);\n          /**\n           * @param {HTMLElement} container The container node of the wavesurfer instance\n           * @param {WavesurferParams} params The wavesurfer initialisation options\n           */\n\n\n          function MultiCanvas(container, params) {\n            var _this;\n\n            _classCallCheck(this, MultiCanvas);\n\n            _this = _possibleConstructorReturn(this, _getPrototypeOf(MultiCanvas).call(this, container, params));\n            /**\n             * @type {number}\n             * @private\n             */\n\n            _this.maxCanvasWidth = params.maxCanvasWidth;\n            /**\n             * @private\n             * @type {number}\n             */\n\n            _this.maxCanvasElementWidth = Math.round(params.maxCanvasWidth / params.pixelRatio);\n            /**\n             * Whether or not the progress wave is rendered. If the `waveColor`\n             * and `progressColor` are the same color it is not.\n             *\n             * @type {boolean}\n             */\n\n            _this.hasProgressCanvas = params.waveColor != params.progressColor;\n            /**\n             * @private\n             * @type {number}\n             */\n\n            _this.halfPixel = 0.5 / params.pixelRatio;\n            /**\n             * List of `CanvasEntry` instances.\n             *\n             * @private\n             * @type {Array}\n             */\n\n            _this.canvases = [];\n            /**\n             * @private\n             * @type {HTMLElement}\n             */\n\n            _this.progressWave = null;\n            /**\n             * Class used to generate entries.\n             *\n             * @private\n             * @type {function}\n             */\n\n            _this.EntryClass = _drawer2.default;\n            /**\n             * Canvas 2d context attributes.\n             *\n             * @private\n             * @type {object}\n             */\n\n            _this.canvasContextAttributes = params.drawingContextAttributes;\n            /**\n             * Overlap added between entries to prevent vertical white stripes\n             * between `canvas` elements.\n             *\n             * @type {number}\n             */\n\n            _this.overlap = 2 * Math.ceil(params.pixelRatio / 2);\n            /**\n             * The radius of the wave bars. Makes bars rounded\n             *\n             * @private\n             * @type {number}\n             */\n\n            _this.barRadius = params.barRadius || 0;\n            return _this;\n          }\n          /**\n           * Initialize the drawer\n           */\n\n\n          _createClass(MultiCanvas, [{\n            key: \"init\",\n            value: function init() {\n              this.createWrapper();\n              this.createElements();\n            }\n            /**\n             * Create the canvas elements and style them\n             *\n             * @private\n             */\n\n          }, {\n            key: \"createElements\",\n            value: function createElements() {\n              this.progressWave = this.wrapper.appendChild(this.style(document.createElement('wave'), {\n                position: 'absolute',\n                zIndex: 3,\n                left: 0,\n                top: 0,\n                bottom: 0,\n                overflow: 'hidden',\n                width: '0',\n                display: 'none',\n                boxSizing: 'border-box',\n                borderRightStyle: 'solid',\n                pointerEvents: 'none'\n              }));\n              this.addCanvas();\n              this.updateCursor();\n            }\n            /**\n             * Update cursor style\n             */\n\n          }, {\n            key: \"updateCursor\",\n            value: function updateCursor() {\n              this.style(this.progressWave, {\n                borderRightWidth: this.params.cursorWidth + 'px',\n                borderRightColor: this.params.cursorColor\n              });\n            }\n            /**\n             * Adjust to the updated size by adding or removing canvases\n             */\n\n          }, {\n            key: \"updateSize\",\n            value: function updateSize() {\n              var _this2 = this;\n\n              var totalWidth = Math.round(this.width / this.params.pixelRatio);\n              var requiredCanvases = Math.ceil(totalWidth / (this.maxCanvasElementWidth + this.overlap)); // add required canvases\n\n              while (this.canvases.length < requiredCanvases) {\n                this.addCanvas();\n              } // remove older existing canvases, if any\n\n\n              while (this.canvases.length > requiredCanvases) {\n                this.removeCanvas();\n              }\n\n              var canvasWidth = this.maxCanvasWidth + this.overlap;\n              var lastCanvas = this.canvases.length - 1;\n              this.canvases.forEach(function (entry, i) {\n                if (i == lastCanvas) {\n                  canvasWidth = _this2.width - _this2.maxCanvasWidth * lastCanvas;\n                }\n\n                _this2.updateDimensions(entry, canvasWidth, _this2.height);\n\n                entry.clearWave();\n              });\n            }\n            /**\n             * Add a canvas to the canvas list\n             *\n             * @private\n             */\n\n          }, {\n            key: \"addCanvas\",\n            value: function addCanvas() {\n              var entry = new this.EntryClass();\n              entry.canvasContextAttributes = this.canvasContextAttributes;\n              entry.hasProgressCanvas = this.hasProgressCanvas;\n              entry.halfPixel = this.halfPixel;\n              var leftOffset = this.maxCanvasElementWidth * this.canvases.length; // wave\n\n              entry.initWave(this.wrapper.appendChild(this.style(document.createElement('canvas'), {\n                position: 'absolute',\n                zIndex: 2,\n                left: leftOffset + 'px',\n                top: 0,\n                bottom: 0,\n                height: '100%',\n                pointerEvents: 'none'\n              }))); // progress\n\n              if (this.hasProgressCanvas) {\n                entry.initProgress(this.progressWave.appendChild(this.style(document.createElement('canvas'), {\n                  position: 'absolute',\n                  left: leftOffset + 'px',\n                  top: 0,\n                  bottom: 0,\n                  height: '100%'\n                })));\n              }\n\n              this.canvases.push(entry);\n            }\n            /**\n             * Pop single canvas from the list\n             *\n             * @private\n             */\n\n          }, {\n            key: \"removeCanvas\",\n            value: function removeCanvas() {\n              var lastEntry = this.canvases[this.canvases.length - 1]; // wave\n\n              lastEntry.wave.parentElement.removeChild(lastEntry.wave); // progress\n\n              if (this.hasProgressCanvas) {\n                lastEntry.progress.parentElement.removeChild(lastEntry.progress);\n              } // cleanup\n\n\n              if (lastEntry) {\n                lastEntry.destroy();\n                lastEntry = null;\n              }\n\n              this.canvases.pop();\n            }\n            /**\n             * Update the dimensions of a canvas element\n             *\n             * @private\n             * @param {CanvasEntry} entry Target entry\n             * @param {number} width The new width of the element\n             * @param {number} height The new height of the element\n             */\n\n          }, {\n            key: \"updateDimensions\",\n            value: function updateDimensions(entry, width, height) {\n              var elementWidth = Math.round(width / this.params.pixelRatio);\n              var totalWidth = Math.round(this.width / this.params.pixelRatio); // update canvas dimensions\n\n              entry.updateDimensions(elementWidth, totalWidth, width, height); // style element\n\n              this.style(this.progressWave, {\n                display: 'block'\n              });\n            }\n            /**\n             * Clear the whole multi-canvas\n             */\n\n          }, {\n            key: \"clearWave\",\n            value: function clearWave() {\n              this.canvases.forEach(function (entry) {\n                return entry.clearWave();\n              });\n            }\n            /**\n             * Draw a waveform with bars\n             *\n             * @param {number[]|Number.<Array[]>} peaks Can also be an array of arrays\n             * for split channel rendering\n             * @param {number} channelIndex The index of the current channel. Normally\n             * should be 0. Must be an integer.\n             * @param {number} start The x-offset of the beginning of the area that\n             * should be rendered\n             * @param {number} end The x-offset of the end of the area that should be\n             * rendered\n             * @returns {void}\n             */\n\n          }, {\n            key: \"drawBars\",\n            value: function drawBars(peaks, channelIndex, start, end) {\n              var _this3 = this;\n\n              return this.prepareDraw(peaks, channelIndex, start, end, function (_ref) {\n                var absmax = _ref.absmax,\n                    hasMinVals = _ref.hasMinVals,\n                    height = _ref.height,\n                    offsetY = _ref.offsetY,\n                    halfH = _ref.halfH,\n                    peaks = _ref.peaks; // if drawBars was called within ws.empty we don't pass a start and\n                // don't want anything to happen\n\n                if (start === undefined) {\n                  return;\n                } // Skip every other value if there are negatives.\n\n\n                var peakIndexScale = hasMinVals ? 2 : 1;\n                var length = peaks.length / peakIndexScale;\n                var bar = _this3.params.barWidth * _this3.params.pixelRatio;\n                var gap = _this3.params.barGap === null ? Math.max(_this3.params.pixelRatio, ~~(bar / 2)) : Math.max(_this3.params.pixelRatio, _this3.params.barGap * _this3.params.pixelRatio);\n                var step = bar + gap;\n                var scale = length / _this3.width;\n                var first = start;\n                var last = end;\n                var i = first;\n\n                for (i; i < last; i += step) {\n                  var peak = peaks[Math.floor(i * scale * peakIndexScale)] || 0;\n                  var h = Math.round(peak / absmax * halfH);\n                  /* in case of silences, allow the user to specify that we\n                   * always draw *something* (normally a 1px high bar) */\n\n                  if (h == 0 && _this3.params.barMinHeight) h = _this3.params.barMinHeight;\n\n                  _this3.fillRect(i + _this3.halfPixel, halfH - h + offsetY, bar + _this3.halfPixel, h * 2, _this3.barRadius);\n                }\n              });\n            }\n            /**\n             * Draw a waveform\n             *\n             * @param {number[]|Number.<Array[]>} peaks Can also be an array of arrays\n             * for split channel rendering\n             * @param {number} channelIndex The index of the current channel. Normally\n             * should be 0\n             * @param {number?} start The x-offset of the beginning of the area that\n             * should be rendered (If this isn't set only a flat line is rendered)\n             * @param {number?} end The x-offset of the end of the area that should be\n             * rendered\n             * @returns {void}\n             */\n\n          }, {\n            key: \"drawWave\",\n            value: function drawWave(peaks, channelIndex, start, end) {\n              var _this4 = this;\n\n              return this.prepareDraw(peaks, channelIndex, start, end, function (_ref2) {\n                var absmax = _ref2.absmax,\n                    hasMinVals = _ref2.hasMinVals,\n                    height = _ref2.height,\n                    offsetY = _ref2.offsetY,\n                    halfH = _ref2.halfH,\n                    peaks = _ref2.peaks;\n\n                if (!hasMinVals) {\n                  var reflectedPeaks = [];\n                  var len = peaks.length;\n                  var i = 0;\n\n                  for (i; i < len; i++) {\n                    reflectedPeaks[2 * i] = peaks[i];\n                    reflectedPeaks[2 * i + 1] = -peaks[i];\n                  }\n\n                  peaks = reflectedPeaks;\n                } // if drawWave was called within ws.empty we don't pass a start and\n                // end and simply want a flat line\n\n\n                if (start !== undefined) {\n                  _this4.drawLine(peaks, absmax, halfH, offsetY, start, end);\n                } // always draw a median line\n\n\n                _this4.fillRect(0, halfH + offsetY - _this4.halfPixel, _this4.width, _this4.halfPixel, _this4.barRadius);\n              });\n            }\n            /**\n             * Tell the canvas entries to render their portion of the waveform\n             *\n             * @private\n             * @param {number[]} peaks Peaks data\n             * @param {number} absmax Maximum peak value (absolute)\n             * @param {number} halfH Half the height of the waveform\n             * @param {number} offsetY Offset to the top\n             * @param {number} start The x-offset of the beginning of the area that\n             * should be rendered\n             * @param {number} end The x-offset of the end of the area that\n             * should be rendered\n             */\n\n          }, {\n            key: \"drawLine\",\n            value: function drawLine(peaks, absmax, halfH, offsetY, start, end) {\n              var _this5 = this;\n\n              this.canvases.forEach(function (entry) {\n                _this5.setFillStyles(entry);\n\n                entry.drawLines(peaks, absmax, halfH, offsetY, start, end);\n              });\n            }\n            /**\n             * Draw a rectangle on the multi-canvas\n             *\n             * @param {number} x X-position of the rectangle\n             * @param {number} y Y-position of the rectangle\n             * @param {number} width Width of the rectangle\n             * @param {number} height Height of the rectangle\n             * @param {number} radius Radius of the rectangle\n             */\n\n          }, {\n            key: \"fillRect\",\n            value: function fillRect(x, y, width, height, radius) {\n              var startCanvas = Math.floor(x / this.maxCanvasWidth);\n              var endCanvas = Math.min(Math.ceil((x + width) / this.maxCanvasWidth) + 1, this.canvases.length);\n              var i = startCanvas;\n\n              for (i; i < endCanvas; i++) {\n                var entry = this.canvases[i];\n                var leftOffset = i * this.maxCanvasWidth;\n                var intersection = {\n                  x1: Math.max(x, i * this.maxCanvasWidth),\n                  y1: y,\n                  x2: Math.min(x + width, i * this.maxCanvasWidth + entry.wave.width),\n                  y2: y + height\n                };\n\n                if (intersection.x1 < intersection.x2) {\n                  this.setFillStyles(entry);\n                  entry.fillRects(intersection.x1 - leftOffset, intersection.y1, intersection.x2 - intersection.x1, intersection.y2 - intersection.y1, radius);\n                }\n              }\n            }\n            /**\n             * Performs preparation tasks and calculations which are shared by `drawBars`\n             * and `drawWave`\n             *\n             * @private\n             * @param {number[]|Number.<Array[]>} peaks Can also be an array of arrays for\n             * split channel rendering\n             * @param {number} channelIndex The index of the current channel. Normally\n             * should be 0\n             * @param {number?} start The x-offset of the beginning of the area that\n             * should be rendered. If this isn't set only a flat line is rendered\n             * @param {number?} end The x-offset of the end of the area that should be\n             * rendered\n             * @param {function} fn The render function to call, e.g. `drawWave`\n             * @returns {void}\n             */\n\n          }, {\n            key: \"prepareDraw\",\n            value: function prepareDraw(peaks, channelIndex, start, end, fn) {\n              var _this6 = this;\n\n              return util.frame(function () {\n                // Split channels and call this function with the channelIndex set\n                if (peaks[0] instanceof Array) {\n                  var channels = peaks;\n\n                  if (_this6.params.splitChannels) {\n                    _this6.setHeight(channels.length * _this6.params.height * _this6.params.pixelRatio);\n\n                    return channels.forEach(function (channelPeaks, i) {\n                      return _this6.prepareDraw(channelPeaks, i, start, end, fn);\n                    });\n                  }\n\n                  peaks = channels[0];\n                } // calculate maximum modulation value, either from the barHeight\n                // parameter or if normalize=true from the largest value in the peak\n                // set\n\n\n                var absmax = 1 / _this6.params.barHeight;\n\n                if (_this6.params.normalize) {\n                  var max = util.max(peaks);\n                  var min = util.min(peaks);\n                  absmax = -min > max ? -min : max;\n                } // Bar wave draws the bottom only as a reflection of the top,\n                // so we don't need negative values\n\n\n                var hasMinVals = [].some.call(peaks, function (val) {\n                  return val < 0;\n                });\n                var height = _this6.params.height * _this6.params.pixelRatio;\n                var offsetY = height * channelIndex || 0;\n                var halfH = height / 2;\n                return fn({\n                  absmax: absmax,\n                  hasMinVals: hasMinVals,\n                  height: height,\n                  offsetY: offsetY,\n                  halfH: halfH,\n                  peaks: peaks\n                });\n              })();\n            }\n            /**\n             * Set the fill styles for a certain entry (wave and progress)\n             *\n             * @private\n             * @param {CanvasEntry} entry Target entry\n             */\n\n          }, {\n            key: \"setFillStyles\",\n            value: function setFillStyles(entry) {\n              entry.setFillStyles(this.params.waveColor, this.params.progressColor);\n            }\n            /**\n             * Return image data of the multi-canvas\n             *\n             * When using a `type` of `'blob'`, this will return a `Promise`.\n             *\n             * @param {string} format='image/png' An optional value of a format type.\n             * @param {number} quality=0.92 An optional value between 0 and 1.\n             * @param {string} type='dataURL' Either 'dataURL' or 'blob'.\n             * @return {string|string[]|Promise} When using the default `'dataURL'`\n             * `type` this returns a single data URL or an array of data URLs,\n             * one for each canvas. When using the `'blob'` `type` this returns a\n             * `Promise` that resolves with an array of `Blob` instances, one for each\n             * canvas.\n             */\n\n          }, {\n            key: \"getImage\",\n            value: function getImage(format, quality, type) {\n              if (type === 'blob') {\n                return Promise.all(this.canvases.map(function (entry) {\n                  return entry.getImage(format, quality, type);\n                }));\n              } else if (type === 'dataURL') {\n                var images = this.canvases.map(function (entry) {\n                  return entry.getImage(format, quality, type);\n                });\n                return images.length > 1 ? images : images[0];\n              }\n            }\n            /**\n             * Render the new progress\n             *\n             * @param {number} position X-offset of progress position in pixels\n             */\n\n          }, {\n            key: \"updateProgress\",\n            value: function updateProgress(position) {\n              this.style(this.progressWave, {\n                width: position + 'px'\n              });\n            }\n          }]);\n\n          return MultiCanvas;\n        }(_drawer.default);\n\n        exports.default = MultiCanvas;\n        module.exports = exports.default;\n        /***/\n      },\n\n      /***/\n      \"./src/mediaelement-webaudio.js\":\n      /*!**************************************!*\\\n        !*** ./src/mediaelement-webaudio.js ***!\n        \\**************************************/\n\n      /*! no static exports found */\n\n      /***/\n      function (module, exports, __webpack_require__) {\n        \"use strict\";\n\n        Object.defineProperty(exports, \"__esModule\", {\n          value: true\n        });\n        exports.default = void 0;\n\n        var _mediaelement = _interopRequireDefault(__webpack_require__(\n        /*! ./mediaelement */\n        \"./src/mediaelement.js\"));\n\n        function _interopRequireDefault(obj) {\n          return obj && obj.__esModule ? obj : {\n            default: obj\n          };\n        }\n\n        function _typeof(obj) {\n          if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n            _typeof = function _typeof(obj) {\n              return typeof obj;\n            };\n          } else {\n            _typeof = function _typeof(obj) {\n              return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n            };\n          }\n\n          return _typeof(obj);\n        }\n\n        function _classCallCheck(instance, Constructor) {\n          if (!(instance instanceof Constructor)) {\n            throw new TypeError(\"Cannot call a class as a function\");\n          }\n        }\n\n        function _defineProperties(target, props) {\n          for (var i = 0; i < props.length; i++) {\n            var descriptor = props[i];\n            descriptor.enumerable = descriptor.enumerable || false;\n            descriptor.configurable = true;\n            if (\"value\" in descriptor) descriptor.writable = true;\n            Object.defineProperty(target, descriptor.key, descriptor);\n          }\n        }\n\n        function _createClass(Constructor, protoProps, staticProps) {\n          if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n          if (staticProps) _defineProperties(Constructor, staticProps);\n          return Constructor;\n        }\n\n        function _possibleConstructorReturn(self, call) {\n          if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {\n            return call;\n          }\n\n          return _assertThisInitialized(self);\n        }\n\n        function _assertThisInitialized(self) {\n          if (self === void 0) {\n            throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n          }\n\n          return self;\n        }\n\n        function _get(target, property, receiver) {\n          if (typeof Reflect !== \"undefined\" && Reflect.get) {\n            _get = Reflect.get;\n          } else {\n            _get = function _get(target, property, receiver) {\n              var base = _superPropBase(target, property);\n\n              if (!base) return;\n              var desc = Object.getOwnPropertyDescriptor(base, property);\n\n              if (desc.get) {\n                return desc.get.call(receiver);\n              }\n\n              return desc.value;\n            };\n          }\n\n          return _get(target, property, receiver || target);\n        }\n\n        function _superPropBase(object, property) {\n          while (!Object.prototype.hasOwnProperty.call(object, property)) {\n            object = _getPrototypeOf(object);\n            if (object === null) break;\n          }\n\n          return object;\n        }\n\n        function _getPrototypeOf(o) {\n          _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n            return o.__proto__ || Object.getPrototypeOf(o);\n          };\n          return _getPrototypeOf(o);\n        }\n\n        function _inherits(subClass, superClass) {\n          if (typeof superClass !== \"function\" && superClass !== null) {\n            throw new TypeError(\"Super expression must either be null or a function\");\n          }\n\n          subClass.prototype = Object.create(superClass && superClass.prototype, {\n            constructor: {\n              value: subClass,\n              writable: true,\n              configurable: true\n            }\n          });\n          if (superClass) _setPrototypeOf(subClass, superClass);\n        }\n\n        function _setPrototypeOf(o, p) {\n          _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n            o.__proto__ = p;\n            return o;\n          };\n\n          return _setPrototypeOf(o, p);\n        }\n        /**\n         * MediaElementWebAudio backend: allows to load audio as HTML5 audio tag and use it with WebAudio API.\n         * Setting the MediaElementWebAudio backend, there is the possibility to load audio of big dimensions, using the WebAudio API features.\n         * The audio to load is an HTML5 audio tag, so you have to use the same methods of MediaElement backend for loading and playback.\n         * In this way, the audio resource is not loaded entirely from server, but in ranges, since you load an HTML5 audio tag.\n         * In this way, filters and other functionalities can be performed like with WebAudio backend, but without decoding\n         * internally audio data, that caused crashing of the browser. You have to give also peaks, so the audio data are not decoded.\n         *\n         * @since 3.2.0\n         */\n\n\n        var MediaElementWebAudio =\n        /*#__PURE__*/\n        function (_MediaElement) {\n          _inherits(MediaElementWebAudio, _MediaElement);\n          /**\n           * Construct the backend\n           *\n           * @param {WavesurferParams} params Wavesurfer parameters\n           */\n\n\n          function MediaElementWebAudio(params) {\n            var _this;\n\n            _classCallCheck(this, MediaElementWebAudio);\n\n            _this = _possibleConstructorReturn(this, _getPrototypeOf(MediaElementWebAudio).call(this, params));\n            /** @private */\n\n            _this.params = params;\n            /** @private */\n\n            _this.sourceMediaElement = null;\n            return _this;\n          }\n          /**\n           * Initialise the backend, called in `wavesurfer.createBackend()`\n           */\n\n\n          _createClass(MediaElementWebAudio, [{\n            key: \"init\",\n            value: function init() {\n              this.setPlaybackRate(this.params.audioRate);\n              this.createTimer();\n              this.createVolumeNode();\n              this.createScriptNode();\n              this.createAnalyserNode();\n            }\n            /**\n             * Private method called by both `load` (from url)\n             * and `loadElt` (existing media element) methods.\n             *\n             * @param {HTMLMediaElement} media HTML5 Audio or Video element\n             * @param {number[]|Number.<Array[]>} peaks Array of peak data\n             * @private\n             */\n\n          }, {\n            key: \"_load\",\n            value: function _load(media, peaks) {\n              _get(_getPrototypeOf(MediaElementWebAudio.prototype), \"_load\", this).call(this, media, peaks);\n\n              this.createMediaElementSource(media);\n            }\n            /**\n             * Create MediaElementSource node\n             *\n             * @since 3.2.0\n             * @param {HTMLMediaElement} mediaElement HTML5 Audio to load\n             */\n\n          }, {\n            key: \"createMediaElementSource\",\n            value: function createMediaElementSource(mediaElement) {\n              this.sourceMediaElement = this.ac.createMediaElementSource(mediaElement);\n              this.sourceMediaElement.connect(this.analyser);\n            }\n          }]);\n\n          return MediaElementWebAudio;\n        }(_mediaelement.default);\n\n        exports.default = MediaElementWebAudio;\n        module.exports = exports.default;\n        /***/\n      },\n\n      /***/\n      \"./src/mediaelement.js\":\n      /*!*****************************!*\\\n        !*** ./src/mediaelement.js ***!\n        \\*****************************/\n\n      /*! no static exports found */\n\n      /***/\n      function (module, exports, __webpack_require__) {\n        \"use strict\";\n\n        Object.defineProperty(exports, \"__esModule\", {\n          value: true\n        });\n        exports.default = void 0;\n\n        var _webaudio = _interopRequireDefault(__webpack_require__(\n        /*! ./webaudio */\n        \"./src/webaudio.js\"));\n\n        var util = _interopRequireWildcard(__webpack_require__(\n        /*! ./util */\n        \"./src/util/index.js\"));\n\n        function _getRequireWildcardCache() {\n          if (typeof WeakMap !== \"function\") return null;\n          var cache = new WeakMap();\n\n          _getRequireWildcardCache = function _getRequireWildcardCache() {\n            return cache;\n          };\n\n          return cache;\n        }\n\n        function _interopRequireWildcard(obj) {\n          if (obj && obj.__esModule) {\n            return obj;\n          }\n\n          if (obj === null || _typeof(obj) !== \"object\" && typeof obj !== \"function\") {\n            return {\n              default: obj\n            };\n          }\n\n          var cache = _getRequireWildcardCache();\n\n          if (cache && cache.has(obj)) {\n            return cache.get(obj);\n          }\n\n          var newObj = {};\n          var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;\n\n          for (var key in obj) {\n            if (Object.prototype.hasOwnProperty.call(obj, key)) {\n              var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;\n\n              if (desc && (desc.get || desc.set)) {\n                Object.defineProperty(newObj, key, desc);\n              } else {\n                newObj[key] = obj[key];\n              }\n            }\n          }\n\n          newObj.default = obj;\n\n          if (cache) {\n            cache.set(obj, newObj);\n          }\n\n          return newObj;\n        }\n\n        function _interopRequireDefault(obj) {\n          return obj && obj.__esModule ? obj : {\n            default: obj\n          };\n        }\n\n        function _typeof(obj) {\n          if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n            _typeof = function _typeof(obj) {\n              return typeof obj;\n            };\n          } else {\n            _typeof = function _typeof(obj) {\n              return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n            };\n          }\n\n          return _typeof(obj);\n        }\n\n        function _classCallCheck(instance, Constructor) {\n          if (!(instance instanceof Constructor)) {\n            throw new TypeError(\"Cannot call a class as a function\");\n          }\n        }\n\n        function _defineProperties(target, props) {\n          for (var i = 0; i < props.length; i++) {\n            var descriptor = props[i];\n            descriptor.enumerable = descriptor.enumerable || false;\n            descriptor.configurable = true;\n            if (\"value\" in descriptor) descriptor.writable = true;\n            Object.defineProperty(target, descriptor.key, descriptor);\n          }\n        }\n\n        function _createClass(Constructor, protoProps, staticProps) {\n          if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n          if (staticProps) _defineProperties(Constructor, staticProps);\n          return Constructor;\n        }\n\n        function _possibleConstructorReturn(self, call) {\n          if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {\n            return call;\n          }\n\n          return _assertThisInitialized(self);\n        }\n\n        function _assertThisInitialized(self) {\n          if (self === void 0) {\n            throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n          }\n\n          return self;\n        }\n\n        function _get(target, property, receiver) {\n          if (typeof Reflect !== \"undefined\" && Reflect.get) {\n            _get = Reflect.get;\n          } else {\n            _get = function _get(target, property, receiver) {\n              var base = _superPropBase(target, property);\n\n              if (!base) return;\n              var desc = Object.getOwnPropertyDescriptor(base, property);\n\n              if (desc.get) {\n                return desc.get.call(receiver);\n              }\n\n              return desc.value;\n            };\n          }\n\n          return _get(target, property, receiver || target);\n        }\n\n        function _superPropBase(object, property) {\n          while (!Object.prototype.hasOwnProperty.call(object, property)) {\n            object = _getPrototypeOf(object);\n            if (object === null) break;\n          }\n\n          return object;\n        }\n\n        function _getPrototypeOf(o) {\n          _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n            return o.__proto__ || Object.getPrototypeOf(o);\n          };\n          return _getPrototypeOf(o);\n        }\n\n        function _inherits(subClass, superClass) {\n          if (typeof superClass !== \"function\" && superClass !== null) {\n            throw new TypeError(\"Super expression must either be null or a function\");\n          }\n\n          subClass.prototype = Object.create(superClass && superClass.prototype, {\n            constructor: {\n              value: subClass,\n              writable: true,\n              configurable: true\n            }\n          });\n          if (superClass) _setPrototypeOf(subClass, superClass);\n        }\n\n        function _setPrototypeOf(o, p) {\n          _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n            o.__proto__ = p;\n            return o;\n          };\n\n          return _setPrototypeOf(o, p);\n        }\n        /**\n         * MediaElement backend\n         */\n\n\n        var MediaElement =\n        /*#__PURE__*/\n        function (_WebAudio) {\n          _inherits(MediaElement, _WebAudio);\n          /**\n           * Construct the backend\n           *\n           * @param {WavesurferParams} params Wavesurfer parameters\n           */\n\n\n          function MediaElement(params) {\n            var _this;\n\n            _classCallCheck(this, MediaElement);\n\n            _this = _possibleConstructorReturn(this, _getPrototypeOf(MediaElement).call(this, params));\n            /** @private */\n\n            _this.params = params;\n            /**\n             * Initially a dummy media element to catch errors. Once `_load` is\n             * called, this will contain the actual `HTMLMediaElement`.\n             * @private\n             */\n\n            _this.media = {\n              currentTime: 0,\n              duration: 0,\n              paused: true,\n              playbackRate: 1,\n              play: function play() {},\n              pause: function pause() {},\n              volume: 0\n            };\n            /** @private */\n\n            _this.mediaType = params.mediaType.toLowerCase();\n            /** @private */\n\n            _this.elementPosition = params.elementPosition;\n            /** @private */\n\n            _this.peaks = null;\n            /** @private */\n\n            _this.playbackRate = 1;\n            /** @private */\n\n            _this.volume = 1;\n            /** @private */\n\n            _this.isMuted = false;\n            /** @private */\n\n            _this.buffer = null;\n            /** @private */\n\n            _this.onPlayEnd = null;\n            /** @private */\n\n            _this.mediaListeners = {};\n            return _this;\n          }\n          /**\n           * Initialise the backend, called in `wavesurfer.createBackend()`\n           */\n\n\n          _createClass(MediaElement, [{\n            key: \"init\",\n            value: function init() {\n              this.setPlaybackRate(this.params.audioRate);\n              this.createTimer();\n            }\n            /**\n             * Attach event listeners to media element.\n             */\n\n          }, {\n            key: \"_setupMediaListeners\",\n            value: function _setupMediaListeners() {\n              var _this2 = this;\n\n              this.mediaListeners.error = function () {\n                _this2.fireEvent('error', 'Error loading media element');\n              };\n\n              this.mediaListeners.canplay = function () {\n                _this2.fireEvent('canplay');\n              };\n\n              this.mediaListeners.ended = function () {\n                _this2.fireEvent('finish');\n              }; // listen to and relay play, pause and seeked events to enable\n              // playback control from the external media element\n\n\n              this.mediaListeners.play = function () {\n                _this2.fireEvent('play');\n              };\n\n              this.mediaListeners.pause = function () {\n                _this2.fireEvent('pause');\n              };\n\n              this.mediaListeners.seeked = function (event) {\n                _this2.fireEvent('seek');\n              };\n\n              this.mediaListeners.volumechange = function (event) {\n                _this2.isMuted = _this2.media.muted;\n\n                if (_this2.isMuted) {\n                  _this2.volume = 0;\n                } else {\n                  _this2.volume = _this2.media.volume;\n                }\n\n                _this2.fireEvent('volume');\n              }; // reset event listeners\n\n\n              Object.keys(this.mediaListeners).forEach(function (id) {\n                _this2.media.removeEventListener(id, _this2.mediaListeners[id]);\n\n                _this2.media.addEventListener(id, _this2.mediaListeners[id]);\n              });\n            }\n            /**\n             * Create a timer to provide a more precise `audioprocess` event.\n             */\n\n          }, {\n            key: \"createTimer\",\n            value: function createTimer() {\n              var _this3 = this;\n\n              var onAudioProcess = function onAudioProcess() {\n                if (_this3.isPaused()) {\n                  return;\n                }\n\n                _this3.fireEvent('audioprocess', _this3.getCurrentTime()); // Call again in the next frame\n\n\n                util.frame(onAudioProcess)();\n              };\n\n              this.on('play', onAudioProcess); // Update the progress one more time to prevent it from being stuck in\n              // case of lower framerates\n\n              this.on('pause', function () {\n                _this3.fireEvent('audioprocess', _this3.getCurrentTime());\n              });\n            }\n            /**\n             * Create media element with url as its source,\n             * and append to container element.\n             *\n             * @param {string} url Path to media file\n             * @param {HTMLElement} container HTML element\n             * @param {number[]|Number.<Array[]>} peaks Array of peak data\n             * @param {string} preload HTML 5 preload attribute value\n             * @throws Will throw an error if the `url` argument is not a valid media\n             * element.\n             */\n\n          }, {\n            key: \"load\",\n            value: function load(url, container, peaks, preload) {\n              var media = document.createElement(this.mediaType);\n              media.controls = this.params.mediaControls;\n              media.autoplay = this.params.autoplay || false;\n              media.preload = preload == null ? 'auto' : preload;\n              media.src = url;\n              media.style.width = '100%';\n              var prevMedia = container.querySelector(this.mediaType);\n\n              if (prevMedia) {\n                container.removeChild(prevMedia);\n              }\n\n              container.appendChild(media);\n\n              this._load(media, peaks);\n            }\n            /**\n             * Load existing media element.\n             *\n             * @param {HTMLMediaElement} elt HTML5 Audio or Video element\n             * @param {number[]|Number.<Array[]>} peaks Array of peak data\n             */\n\n          }, {\n            key: \"loadElt\",\n            value: function loadElt(elt, peaks) {\n              elt.controls = this.params.mediaControls;\n              elt.autoplay = this.params.autoplay || false;\n\n              this._load(elt, peaks);\n            }\n            /**\n             * Method called by both `load` (from url)\n             * and `loadElt` (existing media element) methods.\n             *\n             * @param {HTMLMediaElement} media HTML5 Audio or Video element\n             * @param {number[]|Number.<Array[]>} peaks Array of peak data\n             * @throws Will throw an error if the `media` argument is not a valid media\n             * element.\n             * @private\n             */\n\n          }, {\n            key: \"_load\",\n            value: function _load(media, peaks) {\n              // verify media element is valid\n              if (!(media instanceof HTMLMediaElement) || typeof media.addEventListener === 'undefined') {\n                throw new Error('media parameter is not a valid media element');\n              } // load must be called manually on iOS, otherwise peaks won't draw\n              // until a user interaction triggers load --> 'ready' event\n\n\n              if (typeof media.load == 'function') {\n                // Resets the media element and restarts the media resource. Any\n                // pending events are discarded. How much media data is fetched is\n                // still affected by the preload attribute.\n                media.load();\n              }\n\n              this.media = media;\n\n              this._setupMediaListeners();\n\n              this.peaks = peaks;\n              this.onPlayEnd = null;\n              this.buffer = null;\n              this.isMuted = media.muted;\n              this.setPlaybackRate(this.playbackRate);\n              this.setVolume(this.volume);\n            }\n            /**\n             * Used by `wavesurfer.isPlaying()` and `wavesurfer.playPause()`\n             *\n             * @return {boolean} Media paused or not\n             */\n\n          }, {\n            key: \"isPaused\",\n            value: function isPaused() {\n              return !this.media || this.media.paused;\n            }\n            /**\n             * Used by `wavesurfer.getDuration()`\n             *\n             * @return {number} Duration\n             */\n\n          }, {\n            key: \"getDuration\",\n            value: function getDuration() {\n              if (this.explicitDuration) {\n                return this.explicitDuration;\n              }\n\n              var duration = (this.buffer || this.media).duration;\n\n              if (duration >= Infinity) {\n                // streaming audio\n                duration = this.media.seekable.end(0);\n              }\n\n              return duration;\n            }\n            /**\n             * Returns the current time in seconds relative to the audio-clip's\n             * duration.\n             *\n             * @return {number} Current time\n             */\n\n          }, {\n            key: \"getCurrentTime\",\n            value: function getCurrentTime() {\n              return this.media && this.media.currentTime;\n            }\n            /**\n             * Get the position from 0 to 1\n             *\n             * @return {number} Current position\n             */\n\n          }, {\n            key: \"getPlayedPercents\",\n            value: function getPlayedPercents() {\n              return this.getCurrentTime() / this.getDuration() || 0;\n            }\n            /**\n             * Get the audio source playback rate.\n             *\n             * @return {number} Playback rate\n             */\n\n          }, {\n            key: \"getPlaybackRate\",\n            value: function getPlaybackRate() {\n              return this.playbackRate || this.media.playbackRate;\n            }\n            /**\n             * Set the audio source playback rate.\n             *\n             * @param {number} value Playback rate\n             */\n\n          }, {\n            key: \"setPlaybackRate\",\n            value: function setPlaybackRate(value) {\n              this.playbackRate = value || 1;\n              this.media.playbackRate = this.playbackRate;\n            }\n            /**\n             * Used by `wavesurfer.seekTo()`\n             *\n             * @param {number} start Position to start at in seconds\n             */\n\n          }, {\n            key: \"seekTo\",\n            value: function seekTo(start) {\n              if (start != null) {\n                this.media.currentTime = start;\n              }\n\n              this.clearPlayEnd();\n            }\n            /**\n             * Plays the loaded audio region.\n             *\n             * @param {number} start Start offset in seconds, relative to the beginning\n             * of a clip.\n             * @param {number} end When to stop, relative to the beginning of a clip.\n             * @emits MediaElement#play\n             * @return {Promise} Result\n             */\n\n          }, {\n            key: \"play\",\n            value: function play(start, end) {\n              this.seekTo(start);\n              var promise = this.media.play();\n              end && this.setPlayEnd(end);\n              return promise;\n            }\n            /**\n             * Pauses the loaded audio.\n             *\n             * @emits MediaElement#pause\n             * @return {Promise} Result\n             */\n\n          }, {\n            key: \"pause\",\n            value: function pause() {\n              var promise;\n\n              if (this.media) {\n                promise = this.media.pause();\n              }\n\n              this.clearPlayEnd();\n              return promise;\n            }\n            /**\n             * Set the play end\n             *\n             * @param {number} end Where to end\n             */\n\n          }, {\n            key: \"setPlayEnd\",\n            value: function setPlayEnd(end) {\n              var _this4 = this;\n\n              this.clearPlayEnd();\n\n              this._onPlayEnd = function (time) {\n                if (time >= end) {\n                  _this4.pause();\n\n                  _this4.seekTo(end);\n                }\n              };\n\n              this.on('audioprocess', this._onPlayEnd);\n            }\n            /** @private */\n\n          }, {\n            key: \"clearPlayEnd\",\n            value: function clearPlayEnd() {\n              if (this._onPlayEnd) {\n                this.un('audioprocess', this._onPlayEnd);\n                this._onPlayEnd = null;\n              }\n            }\n            /**\n             * Compute the max and min value of the waveform when broken into\n             * <length> subranges.\n             *\n             * @param {number} length How many subranges to break the waveform into.\n             * @param {number} first First sample in the required range.\n             * @param {number} last Last sample in the required range.\n             * @return {number[]|Number.<Array[]>} Array of 2*<length> peaks or array of\n             * arrays of peaks consisting of (max, min) values for each subrange.\n             */\n\n          }, {\n            key: \"getPeaks\",\n            value: function getPeaks(length, first, last) {\n              if (this.buffer) {\n                return _get(_getPrototypeOf(MediaElement.prototype), \"getPeaks\", this).call(this, length, first, last);\n              }\n\n              return this.peaks || [];\n            }\n            /**\n             * Set the sink id for the media player\n             *\n             * @param {string} deviceId String value representing audio device id.\n             * @returns {Promise} A Promise that resolves to `undefined` when there\n             * are no errors.\n             */\n\n          }, {\n            key: \"setSinkId\",\n            value: function setSinkId(deviceId) {\n              if (deviceId) {\n                if (!this.media.setSinkId) {\n                  return Promise.reject(new Error('setSinkId is not supported in your browser'));\n                }\n\n                return this.media.setSinkId(deviceId);\n              }\n\n              return Promise.reject(new Error('Invalid deviceId: ' + deviceId));\n            }\n            /**\n             * Get the current volume\n             *\n             * @return {number} value A floating point value between 0 and 1.\n             */\n\n          }, {\n            key: \"getVolume\",\n            value: function getVolume() {\n              return this.volume;\n            }\n            /**\n             * Set the audio volume\n             *\n             * @param {number} value A floating point value between 0 and 1.\n             */\n\n          }, {\n            key: \"setVolume\",\n            value: function setVolume(value) {\n              this.volume = value; // no need to change when it's already at that volume\n\n              if (this.media.volume !== this.volume) {\n                this.media.volume = this.volume;\n              }\n            }\n            /**\n             * This is called when wavesurfer is destroyed\n             *\n             */\n\n          }, {\n            key: \"destroy\",\n            value: function destroy() {\n              var _this5 = this;\n\n              this.pause();\n              this.unAll();\n              this.destroyed = true; // cleanup media event listeners\n\n              Object.keys(this.mediaListeners).forEach(function (id) {\n                if (_this5.media) {\n                  _this5.media.removeEventListener(id, _this5.mediaListeners[id]);\n                }\n              });\n\n              if (this.params.removeMediaElementOnDestroy && this.media && this.media.parentNode) {\n                this.media.parentNode.removeChild(this.media);\n              }\n\n              this.media = null;\n            }\n          }]);\n\n          return MediaElement;\n        }(_webaudio.default);\n\n        exports.default = MediaElement;\n        module.exports = exports.default;\n        /***/\n      },\n\n      /***/\n      \"./src/peakcache.js\":\n      /*!**************************!*\\\n        !*** ./src/peakcache.js ***!\n        \\**************************/\n\n      /*! no static exports found */\n\n      /***/\n      function (module, exports, __webpack_require__) {\n        \"use strict\";\n\n        Object.defineProperty(exports, \"__esModule\", {\n          value: true\n        });\n        exports.default = void 0;\n\n        function _classCallCheck(instance, Constructor) {\n          if (!(instance instanceof Constructor)) {\n            throw new TypeError(\"Cannot call a class as a function\");\n          }\n        }\n\n        function _defineProperties(target, props) {\n          for (var i = 0; i < props.length; i++) {\n            var descriptor = props[i];\n            descriptor.enumerable = descriptor.enumerable || false;\n            descriptor.configurable = true;\n            if (\"value\" in descriptor) descriptor.writable = true;\n            Object.defineProperty(target, descriptor.key, descriptor);\n          }\n        }\n\n        function _createClass(Constructor, protoProps, staticProps) {\n          if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n          if (staticProps) _defineProperties(Constructor, staticProps);\n          return Constructor;\n        }\n        /**\n         * Caches the decoded peaks data to improve rendering speed for large audio\n         *\n         * Is used if the option parameter `partialRender` is set to `true`\n         */\n\n\n        var PeakCache =\n        /*#__PURE__*/\n        function () {\n          /**\n           * Instantiate cache\n           */\n          function PeakCache() {\n            _classCallCheck(this, PeakCache);\n\n            this.clearPeakCache();\n          }\n          /**\n           * Empty the cache\n           */\n\n\n          _createClass(PeakCache, [{\n            key: \"clearPeakCache\",\n            value: function clearPeakCache() {\n              /**\n               * Flat array with entries that are always in pairs to mark the\n               * beginning and end of each subrange.  This is a convenience so we can\n               * iterate over the pairs for easy set difference operations.\n               * @private\n               */\n              this.peakCacheRanges = [];\n              /**\n               * Length of the entire cachable region, used for resetting the cache\n               * when this changes (zoom events, for instance).\n               * @private\n               */\n\n              this.peakCacheLength = -1;\n            }\n            /**\n             * Add a range of peaks to the cache\n             *\n             * @param {number} length The length of the range\n             * @param {number} start The x offset of the start of the range\n             * @param {number} end The x offset of the end of the range\n             * @return {Number.<Array[]>} Array with arrays of numbers\n             */\n\n          }, {\n            key: \"addRangeToPeakCache\",\n            value: function addRangeToPeakCache(length, start, end) {\n              if (length != this.peakCacheLength) {\n                this.clearPeakCache();\n                this.peakCacheLength = length;\n              } // Return ranges that weren't in the cache before the call.\n\n\n              var uncachedRanges = [];\n              var i = 0; // Skip ranges before the current start.\n\n              while (i < this.peakCacheRanges.length && this.peakCacheRanges[i] < start) {\n                i++;\n              } // If |i| is even, |start| falls after an existing range.  Otherwise,\n              // |start| falls between an existing range, and the uncached region\n              // starts when we encounter the next node in |peakCacheRanges| or\n              // |end|, whichever comes first.\n\n\n              if (i % 2 == 0) {\n                uncachedRanges.push(start);\n              }\n\n              while (i < this.peakCacheRanges.length && this.peakCacheRanges[i] <= end) {\n                uncachedRanges.push(this.peakCacheRanges[i]);\n                i++;\n              } // If |i| is even, |end| is after all existing ranges.\n\n\n              if (i % 2 == 0) {\n                uncachedRanges.push(end);\n              } // Filter out the 0-length ranges.\n\n\n              uncachedRanges = uncachedRanges.filter(function (item, pos, arr) {\n                if (pos == 0) {\n                  return item != arr[pos + 1];\n                } else if (pos == arr.length - 1) {\n                  return item != arr[pos - 1];\n                }\n\n                return item != arr[pos - 1] && item != arr[pos + 1];\n              }); // Merge the two ranges together, uncachedRanges will either contain\n              // wholly new points, or duplicates of points in peakCacheRanges.  If\n              // duplicates are detected, remove both and extend the range.\n\n              this.peakCacheRanges = this.peakCacheRanges.concat(uncachedRanges);\n              this.peakCacheRanges = this.peakCacheRanges.sort(function (a, b) {\n                return a - b;\n              }).filter(function (item, pos, arr) {\n                if (pos == 0) {\n                  return item != arr[pos + 1];\n                } else if (pos == arr.length - 1) {\n                  return item != arr[pos - 1];\n                }\n\n                return item != arr[pos - 1] && item != arr[pos + 1];\n              }); // Push the uncached ranges into an array of arrays for ease of\n              // iteration in the functions that call this.\n\n              var uncachedRangePairs = [];\n\n              for (i = 0; i < uncachedRanges.length; i += 2) {\n                uncachedRangePairs.push([uncachedRanges[i], uncachedRanges[i + 1]]);\n              }\n\n              return uncachedRangePairs;\n            }\n            /**\n             * For testing\n             *\n             * @return {Number.<Array[]>} Array with arrays of numbers\n             */\n\n          }, {\n            key: \"getCacheRanges\",\n            value: function getCacheRanges() {\n              var peakCacheRangePairs = [];\n              var i;\n\n              for (i = 0; i < this.peakCacheRanges.length; i += 2) {\n                peakCacheRangePairs.push([this.peakCacheRanges[i], this.peakCacheRanges[i + 1]]);\n              }\n\n              return peakCacheRangePairs;\n            }\n          }]);\n\n          return PeakCache;\n        }();\n\n        exports.default = PeakCache;\n        module.exports = exports.default;\n        /***/\n      },\n\n      /***/\n      \"./src/util/ajax.js\":\n      /*!**************************!*\\\n        !*** ./src/util/ajax.js ***!\n        \\**************************/\n\n      /*! no static exports found */\n\n      /***/\n      function (module, exports, __webpack_require__) {\n        \"use strict\";\n\n        Object.defineProperty(exports, \"__esModule\", {\n          value: true\n        });\n        exports.default = ajax;\n\n        var _observer = _interopRequireDefault(__webpack_require__(\n        /*! ./observer */\n        \"./src/util/observer.js\"));\n\n        function _interopRequireDefault(obj) {\n          return obj && obj.__esModule ? obj : {\n            default: obj\n          };\n        }\n        /**\n         * Perform an ajax request using `XMLHttpRequest`.\n         *\n         * @deprecated Use `util.fetchFile` instead.\n         *\n         * @param {Object} options AJAX options to use. See example below for options.\n         * @returns {Observer} Observer instance\n         * @example\n         * // default options\n         * let options = {\n         *     method: 'GET',\n         *     url: undefined,\n         *     responseType: 'json',\n         *     xhr: {}\n         * };\n         *\n         * // override default options\n         * options.url = '../media/demo.wav';\n         * options.responseType = 'arraybuffer';\n         * options.xhr = {\n         *     requestHeaders: [\n         *         {\n         *             key: 'Authorization',\n         *             value: 'my-token'\n         *         }\n         *     ],\n         *     withCredentials: true\n         * };\n         *\n         * // make ajax call\n         * let ajaxCall = util.ajax(options);\n         * ajaxCall.on('progress', e => {\n         *     console.log('progress', e);\n         * });\n         * ajaxCall.on('success', (data, e) => {\n         *     console.log('success!', data);\n         * });\n         * ajaxCall.on('error', e => {\n         *     console.warn('ajax error: ' + e.target.statusText);\n         * });\n         */\n\n\n        function ajax(options) {\n          var instance = new _observer.default();\n          var xhr = new XMLHttpRequest();\n          var fired100 = false;\n          xhr.open(options.method || 'GET', options.url, true);\n          xhr.responseType = options.responseType || 'json';\n\n          if (options.xhr) {\n            if (options.xhr.requestHeaders) {\n              // add custom request headers\n              options.xhr.requestHeaders.forEach(function (header) {\n                xhr.setRequestHeader(header.key, header.value);\n              });\n            }\n\n            if (options.xhr.withCredentials) {\n              // use credentials\n              xhr.withCredentials = true;\n            }\n          }\n\n          xhr.addEventListener('progress', function (e) {\n            instance.fireEvent('progress', e);\n\n            if (e.lengthComputable && e.loaded == e.total) {\n              fired100 = true;\n            }\n          });\n          xhr.addEventListener('load', function (e) {\n            if (!fired100) {\n              instance.fireEvent('progress', e);\n            }\n\n            instance.fireEvent('load', e);\n\n            if (200 == xhr.status || 206 == xhr.status) {\n              instance.fireEvent('success', xhr.response, e);\n            } else {\n              instance.fireEvent('error', e);\n            }\n          });\n          xhr.addEventListener('error', function (e) {\n            return instance.fireEvent('error', e);\n          });\n          xhr.send();\n          instance.xhr = xhr;\n          return instance;\n        }\n\n        module.exports = exports.default;\n        /***/\n      },\n\n      /***/\n      \"./src/util/extend.js\":\n      /*!****************************!*\\\n        !*** ./src/util/extend.js ***!\n        \\****************************/\n\n      /*! no static exports found */\n\n      /***/\n      function (module, exports, __webpack_require__) {\n        \"use strict\";\n\n        Object.defineProperty(exports, \"__esModule\", {\n          value: true\n        });\n        exports.default = extend;\n        /**\n         * Extend an object shallowly with others\n         *\n         * @param {Object} dest The target object\n         * @param {Object[]} sources The objects to use for extending\n         *\n         * @return {Object} Merged object\n         * @deprecated since version 3.3.0\n         */\n\n        function extend(dest) {\n          console.warn('util.extend is deprecated; use Object.assign instead');\n\n          for (var _len = arguments.length, sources = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n            sources[_key - 1] = arguments[_key];\n          }\n\n          sources.forEach(function (source) {\n            Object.keys(source).forEach(function (key) {\n              dest[key] = source[key];\n            });\n          });\n          return dest;\n        }\n\n        module.exports = exports.default;\n        /***/\n      },\n\n      /***/\n      \"./src/util/fetch.js\":\n      /*!***************************!*\\\n        !*** ./src/util/fetch.js ***!\n        \\***************************/\n\n      /*! no static exports found */\n\n      /***/\n      function (module, exports, __webpack_require__) {\n        \"use strict\";\n\n        Object.defineProperty(exports, \"__esModule\", {\n          value: true\n        });\n        exports.default = fetchFile;\n\n        var _observer = _interopRequireDefault(__webpack_require__(\n        /*! ./observer */\n        \"./src/util/observer.js\"));\n\n        function _interopRequireDefault(obj) {\n          return obj && obj.__esModule ? obj : {\n            default: obj\n          };\n        }\n\n        function _classCallCheck(instance, Constructor) {\n          if (!(instance instanceof Constructor)) {\n            throw new TypeError(\"Cannot call a class as a function\");\n          }\n        }\n\n        function _defineProperties(target, props) {\n          for (var i = 0; i < props.length; i++) {\n            var descriptor = props[i];\n            descriptor.enumerable = descriptor.enumerable || false;\n            descriptor.configurable = true;\n            if (\"value\" in descriptor) descriptor.writable = true;\n            Object.defineProperty(target, descriptor.key, descriptor);\n          }\n        }\n\n        function _createClass(Constructor, protoProps, staticProps) {\n          if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n          if (staticProps) _defineProperties(Constructor, staticProps);\n          return Constructor;\n        }\n\n        var ProgressHandler =\n        /*#__PURE__*/\n        function () {\n          /**\n           * Instantiate ProgressHandler\n           *\n           * @param {Observer} instance The `fetchFile` observer instance.\n           * @param {Number} contentLength Content length.\n           * @param {Response} response Response object.\n           */\n          function ProgressHandler(instance, contentLength, response) {\n            _classCallCheck(this, ProgressHandler);\n\n            this.instance = instance;\n            this.instance._reader = response.body.getReader();\n            this.total = parseInt(contentLength, 10);\n            this.loaded = 0;\n          }\n          /**\n           * A method that is called once, immediately after the `ReadableStream``\n           * is constructed.\n           *\n           * @param {ReadableStreamDefaultController} controller Controller instance\n           *     used to control the stream.\n           */\n\n\n          _createClass(ProgressHandler, [{\n            key: \"start\",\n            value: function start(controller) {\n              var _this = this;\n\n              var read = function read() {\n                // instance._reader.read() returns a promise that resolves\n                // when a value has been received\n                _this.instance._reader.read().then(function (_ref) {\n                  var done = _ref.done,\n                      value = _ref.value; // result objects contain two properties:\n                  // done  - true if the stream has already given you all its data.\n                  // value - some data. Always undefined when done is true.\n\n                  if (done) {\n                    // ensure onProgress called when content-length=0\n                    if (_this.total === 0) {\n                      _this.instance.onProgress.call(_this.instance, {\n                        loaded: _this.loaded,\n                        total: _this.total,\n                        lengthComputable: false\n                      });\n                    } // no more data needs to be consumed, close the stream\n\n\n                    controller.close();\n                    return;\n                  }\n\n                  _this.loaded += value.byteLength;\n\n                  _this.instance.onProgress.call(_this.instance, {\n                    loaded: _this.loaded,\n                    total: _this.total,\n                    lengthComputable: !(_this.total === 0)\n                  }); // enqueue the next data chunk into our target stream\n\n\n                  controller.enqueue(value);\n                  read();\n                }).catch(function (error) {\n                  controller.error(error);\n                });\n              };\n\n              read();\n            }\n          }]);\n\n          return ProgressHandler;\n        }();\n        /**\n         * Load a file using `fetch`.\n         *\n         * @param {object} options Request options to use. See example below.\n         * @returns {Observer} Observer instance\n         * @example\n         * // default options\n         * let options = {\n         *     url: undefined,\n         *     method: 'GET',\n         *     mode: 'cors',\n         *     credentials: 'same-origin',\n         *     cache: 'default',\n         *     responseType: 'json',\n         *     requestHeaders: [],\n         *     redirect: 'follow',\n         *     referrer: 'client'\n         * };\n         *\n         * // override some options\n         * options.url = '../media/demo.wav';\n        \n         * // available types: 'arraybuffer', 'blob', 'json' or 'text'\n         * options.responseType = 'arraybuffer';\n         *\n         * // make fetch call\n         * let request = util.fetchFile(options);\n         *\n         * // listen for events\n         * request.on('progress', e => {\n         *     console.log('progress', e);\n         * });\n         *\n         * request.on('success', data => {\n         *     console.log('success!', data);\n         * });\n         *\n         * request.on('error', e => {\n         *     console.warn('fetchFile error: ', e);\n         * });\n         */\n\n\n        function fetchFile(options) {\n          if (!options) {\n            throw new Error('fetch options missing');\n          } else if (!options.url) {\n            throw new Error('fetch url missing');\n          }\n\n          var instance = new _observer.default();\n          var fetchHeaders = new Headers();\n          var fetchRequest = new Request(options.url); // add ability to abort\n\n          instance.controller = new AbortController(); // check if headers have to be added\n\n          if (options && options.requestHeaders) {\n            // add custom request headers\n            options.requestHeaders.forEach(function (header) {\n              fetchHeaders.append(header.key, header.value);\n            });\n          } // parse fetch options\n\n\n          var responseType = options.responseType || 'json';\n          var fetchOptions = {\n            method: options.method || 'GET',\n            headers: fetchHeaders,\n            mode: options.mode || 'cors',\n            credentials: options.credentials || 'same-origin',\n            cache: options.cache || 'default',\n            redirect: options.redirect || 'follow',\n            referrer: options.referrer || 'client',\n            signal: instance.controller.signal\n          };\n          fetch(fetchRequest, fetchOptions).then(function (response) {\n            // store response reference\n            instance.response = response;\n            var progressAvailable = true;\n\n            if (!response.body) {\n              // ReadableStream is not yet supported in this browser\n              // see https://developer.mozilla.org/en-US/docs/Web/API/ReadableStream\n              progressAvailable = false;\n            } // Server must send CORS header \"Access-Control-Expose-Headers: content-length\"\n\n\n            var contentLength = response.headers.get('content-length');\n\n            if (contentLength === null) {\n              // Content-Length server response header missing.\n              // Don't evaluate download progress if we can't compare against a total size\n              // see https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS#Access-Control-Expose-Headers\n              progressAvailable = false;\n            }\n\n            if (!progressAvailable) {\n              // not able to check download progress so skip it\n              return response;\n            } // fire progress event when during load\n\n\n            instance.onProgress = function (e) {\n              instance.fireEvent('progress', e);\n            };\n\n            return new Response(new ReadableStream(new ProgressHandler(instance, contentLength, response)), fetchOptions);\n          }).then(function (response) {\n            var errMsg;\n\n            if (response.ok) {\n              switch (responseType) {\n                case 'arraybuffer':\n                  return response.arrayBuffer();\n\n                case 'json':\n                  return response.json();\n\n                case 'blob':\n                  return response.blob();\n\n                case 'text':\n                  return response.text();\n\n                default:\n                  errMsg = 'Unknown responseType: ' + responseType;\n                  break;\n              }\n            }\n\n            if (!errMsg) {\n              errMsg = 'HTTP error status: ' + response.status;\n            }\n\n            throw new Error(errMsg);\n          }).then(function (response) {\n            instance.fireEvent('success', response);\n          }).catch(function (error) {\n            instance.fireEvent('error', error);\n          }); // return the fetch request\n\n          instance.fetchRequest = fetchRequest;\n          return instance;\n        }\n\n        module.exports = exports.default;\n        /***/\n      },\n\n      /***/\n      \"./src/util/frame.js\":\n      /*!***************************!*\\\n        !*** ./src/util/frame.js ***!\n        \\***************************/\n\n      /*! no static exports found */\n\n      /***/\n      function (module, exports, __webpack_require__) {\n        \"use strict\";\n\n        Object.defineProperty(exports, \"__esModule\", {\n          value: true\n        });\n        exports.default = frame;\n\n        var _requestAnimationFrame = _interopRequireDefault(__webpack_require__(\n        /*! ./request-animation-frame */\n        \"./src/util/request-animation-frame.js\"));\n\n        function _interopRequireDefault(obj) {\n          return obj && obj.__esModule ? obj : {\n            default: obj\n          };\n        }\n        /**\n         * Create a function which will be called at the next requestAnimationFrame\n         * cycle\n         *\n         * @param {function} func The function to call\n         *\n         * @return {func} The function wrapped within a requestAnimationFrame\n         */\n\n\n        function frame(func) {\n          return function () {\n            for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n              args[_key] = arguments[_key];\n            }\n\n            return (0, _requestAnimationFrame.default)(function () {\n              return func.apply(void 0, args);\n            });\n          };\n        }\n\n        module.exports = exports.default;\n        /***/\n      },\n\n      /***/\n      \"./src/util/get-id.js\":\n      /*!****************************!*\\\n        !*** ./src/util/get-id.js ***!\n        \\****************************/\n\n      /*! no static exports found */\n\n      /***/\n      function (module, exports, __webpack_require__) {\n        \"use strict\";\n\n        Object.defineProperty(exports, \"__esModule\", {\n          value: true\n        });\n        exports.default = getId;\n        /**\n         * Get a random prefixed ID\n         *\n         * @param {String} prefix Prefix to use. Default is `'wavesurfer_'`.\n         * @returns {String} Random prefixed ID\n         * @example\n         * console.log(getId()); // logs 'wavesurfer_b5pors4ru6g'\n         *\n         * let prefix = 'foo-';\n         * console.log(getId(prefix)); // logs 'foo-b5pors4ru6g'\n         */\n\n        function getId(prefix) {\n          if (prefix === undefined) {\n            prefix = 'wavesurfer_';\n          }\n\n          return prefix + Math.random().toString(32).substring(2);\n        }\n\n        module.exports = exports.default;\n        /***/\n      },\n\n      /***/\n      \"./src/util/index.js\":\n      /*!***************************!*\\\n        !*** ./src/util/index.js ***!\n        \\***************************/\n\n      /*! no static exports found */\n\n      /***/\n      function (module, exports, __webpack_require__) {\n        \"use strict\";\n\n        Object.defineProperty(exports, \"__esModule\", {\n          value: true\n        });\n        Object.defineProperty(exports, \"ajax\", {\n          enumerable: true,\n          get: function get() {\n            return _ajax.default;\n          }\n        });\n        Object.defineProperty(exports, \"getId\", {\n          enumerable: true,\n          get: function get() {\n            return _getId.default;\n          }\n        });\n        Object.defineProperty(exports, \"max\", {\n          enumerable: true,\n          get: function get() {\n            return _max.default;\n          }\n        });\n        Object.defineProperty(exports, \"min\", {\n          enumerable: true,\n          get: function get() {\n            return _min.default;\n          }\n        });\n        Object.defineProperty(exports, \"Observer\", {\n          enumerable: true,\n          get: function get() {\n            return _observer.default;\n          }\n        });\n        Object.defineProperty(exports, \"extend\", {\n          enumerable: true,\n          get: function get() {\n            return _extend.default;\n          }\n        });\n        Object.defineProperty(exports, \"style\", {\n          enumerable: true,\n          get: function get() {\n            return _style.default;\n          }\n        });\n        Object.defineProperty(exports, \"requestAnimationFrame\", {\n          enumerable: true,\n          get: function get() {\n            return _requestAnimationFrame.default;\n          }\n        });\n        Object.defineProperty(exports, \"frame\", {\n          enumerable: true,\n          get: function get() {\n            return _frame.default;\n          }\n        });\n        Object.defineProperty(exports, \"debounce\", {\n          enumerable: true,\n          get: function get() {\n            return _debounce.default;\n          }\n        });\n        Object.defineProperty(exports, \"preventClick\", {\n          enumerable: true,\n          get: function get() {\n            return _preventClick.default;\n          }\n        });\n        Object.defineProperty(exports, \"fetchFile\", {\n          enumerable: true,\n          get: function get() {\n            return _fetch.default;\n          }\n        });\n\n        var _ajax = _interopRequireDefault(__webpack_require__(\n        /*! ./ajax */\n        \"./src/util/ajax.js\"));\n\n        var _getId = _interopRequireDefault(__webpack_require__(\n        /*! ./get-id */\n        \"./src/util/get-id.js\"));\n\n        var _max = _interopRequireDefault(__webpack_require__(\n        /*! ./max */\n        \"./src/util/max.js\"));\n\n        var _min = _interopRequireDefault(__webpack_require__(\n        /*! ./min */\n        \"./src/util/min.js\"));\n\n        var _observer = _interopRequireDefault(__webpack_require__(\n        /*! ./observer */\n        \"./src/util/observer.js\"));\n\n        var _extend = _interopRequireDefault(__webpack_require__(\n        /*! ./extend */\n        \"./src/util/extend.js\"));\n\n        var _style = _interopRequireDefault(__webpack_require__(\n        /*! ./style */\n        \"./src/util/style.js\"));\n\n        var _requestAnimationFrame = _interopRequireDefault(__webpack_require__(\n        /*! ./request-animation-frame */\n        \"./src/util/request-animation-frame.js\"));\n\n        var _frame = _interopRequireDefault(__webpack_require__(\n        /*! ./frame */\n        \"./src/util/frame.js\"));\n\n        var _debounce = _interopRequireDefault(__webpack_require__(\n        /*! debounce */\n        \"./node_modules/debounce/index.js\"));\n\n        var _preventClick = _interopRequireDefault(__webpack_require__(\n        /*! ./prevent-click */\n        \"./src/util/prevent-click.js\"));\n\n        var _fetch = _interopRequireDefault(__webpack_require__(\n        /*! ./fetch */\n        \"./src/util/fetch.js\"));\n\n        function _interopRequireDefault(obj) {\n          return obj && obj.__esModule ? obj : {\n            default: obj\n          };\n        }\n        /***/\n\n      },\n\n      /***/\n      \"./src/util/max.js\":\n      /*!*************************!*\\\n        !*** ./src/util/max.js ***!\n        \\*************************/\n\n      /*! no static exports found */\n\n      /***/\n      function (module, exports, __webpack_require__) {\n        \"use strict\";\n\n        Object.defineProperty(exports, \"__esModule\", {\n          value: true\n        });\n        exports.default = max;\n        /**\n         * Get the largest value\n         *\n         * @param   {Array} values Array of numbers\n         * @returns {Number} Largest number found\n         * @example console.log(max([1, 2, 3])); // logs 3\n         */\n\n        function max(values) {\n          var largest = -Infinity;\n          Object.keys(values).forEach(function (i) {\n            if (values[i] > largest) {\n              largest = values[i];\n            }\n          });\n          return largest;\n        }\n\n        module.exports = exports.default;\n        /***/\n      },\n\n      /***/\n      \"./src/util/min.js\":\n      /*!*************************!*\\\n        !*** ./src/util/min.js ***!\n        \\*************************/\n\n      /*! no static exports found */\n\n      /***/\n      function (module, exports, __webpack_require__) {\n        \"use strict\";\n\n        Object.defineProperty(exports, \"__esModule\", {\n          value: true\n        });\n        exports.default = min;\n        /**\n         * Get the smallest value\n         *\n         * @param   {Array} values Array of numbers\n         * @returns {Number} Smallest number found\n         * @example console.log(min([1, 2, 3])); // logs 1\n         */\n\n        function min(values) {\n          var smallest = Number(Infinity);\n          Object.keys(values).forEach(function (i) {\n            if (values[i] < smallest) {\n              smallest = values[i];\n            }\n          });\n          return smallest;\n        }\n\n        module.exports = exports.default;\n        /***/\n      },\n\n      /***/\n      \"./src/util/observer.js\":\n      /*!******************************!*\\\n        !*** ./src/util/observer.js ***!\n        \\******************************/\n\n      /*! no static exports found */\n\n      /***/\n      function (module, exports, __webpack_require__) {\n        \"use strict\";\n\n        Object.defineProperty(exports, \"__esModule\", {\n          value: true\n        });\n        exports.default = void 0;\n\n        function _classCallCheck(instance, Constructor) {\n          if (!(instance instanceof Constructor)) {\n            throw new TypeError(\"Cannot call a class as a function\");\n          }\n        }\n\n        function _defineProperties(target, props) {\n          for (var i = 0; i < props.length; i++) {\n            var descriptor = props[i];\n            descriptor.enumerable = descriptor.enumerable || false;\n            descriptor.configurable = true;\n            if (\"value\" in descriptor) descriptor.writable = true;\n            Object.defineProperty(target, descriptor.key, descriptor);\n          }\n        }\n\n        function _createClass(Constructor, protoProps, staticProps) {\n          if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n          if (staticProps) _defineProperties(Constructor, staticProps);\n          return Constructor;\n        }\n        /**\n         * @typedef {Object} ListenerDescriptor\n         * @property {string} name The name of the event\n         * @property {function} callback The callback\n         * @property {function} un The function to call to remove the listener\n         */\n\n        /**\n         * Observer class\n         */\n\n\n        var Observer =\n        /*#__PURE__*/\n        function () {\n          /**\n           * Instantiate Observer\n           */\n          function Observer() {\n            _classCallCheck(this, Observer);\n            /**\n             * @private\n             * @todo Initialise the handlers here already and remove the conditional\n             * assignment in `on()`\n             */\n\n\n            this.handlers = null;\n          }\n          /**\n           * Attach a handler function for an event.\n           *\n           * @param {string} event Name of the event to listen to\n           * @param {function} fn The callback to trigger when the event is fired\n           * @return {ListenerDescriptor} The event descriptor\n           */\n\n\n          _createClass(Observer, [{\n            key: \"on\",\n            value: function on(event, fn) {\n              var _this = this;\n\n              if (!this.handlers) {\n                this.handlers = {};\n              }\n\n              var handlers = this.handlers[event];\n\n              if (!handlers) {\n                handlers = this.handlers[event] = [];\n              }\n\n              handlers.push(fn); // Return an event descriptor\n\n              return {\n                name: event,\n                callback: fn,\n                un: function un(e, fn) {\n                  return _this.un(e, fn);\n                }\n              };\n            }\n            /**\n             * Remove an event handler.\n             *\n             * @param {string} event Name of the event the listener that should be\n             * removed listens to\n             * @param {function} fn The callback that should be removed\n             */\n\n          }, {\n            key: \"un\",\n            value: function un(event, fn) {\n              if (!this.handlers) {\n                return;\n              }\n\n              var handlers = this.handlers[event];\n              var i;\n\n              if (handlers) {\n                if (fn) {\n                  for (i = handlers.length - 1; i >= 0; i--) {\n                    if (handlers[i] == fn) {\n                      handlers.splice(i, 1);\n                    }\n                  }\n                } else {\n                  handlers.length = 0;\n                }\n              }\n            }\n            /**\n             * Remove all event handlers.\n             */\n\n          }, {\n            key: \"unAll\",\n            value: function unAll() {\n              this.handlers = null;\n            }\n            /**\n             * Attach a handler to an event. The handler is executed at most once per\n             * event type.\n             *\n             * @param {string} event The event to listen to\n             * @param {function} handler The callback that is only to be called once\n             * @return {ListenerDescriptor} The event descriptor\n             */\n\n          }, {\n            key: \"once\",\n            value: function once(event, handler) {\n              var _this2 = this;\n\n              var fn = function fn() {\n                for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n                  args[_key] = arguments[_key];\n                }\n                /*  eslint-disable no-invalid-this */\n\n\n                handler.apply(_this2, args);\n                /*  eslint-enable no-invalid-this */\n\n                setTimeout(function () {\n                  _this2.un(event, fn);\n                }, 0);\n              };\n\n              return this.on(event, fn);\n            }\n            /**\n             * Manually fire an event\n             *\n             * @param {string} event The event to fire manually\n             * @param {...any} args The arguments with which to call the listeners\n             */\n\n          }, {\n            key: \"fireEvent\",\n            value: function fireEvent(event) {\n              for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {\n                args[_key2 - 1] = arguments[_key2];\n              }\n\n              if (!this.handlers) {\n                return;\n              }\n\n              var handlers = this.handlers[event];\n              handlers && handlers.forEach(function (fn) {\n                fn.apply(void 0, args);\n              });\n            }\n          }]);\n\n          return Observer;\n        }();\n\n        exports.default = Observer;\n        module.exports = exports.default;\n        /***/\n      },\n\n      /***/\n      \"./src/util/prevent-click.js\":\n      /*!***********************************!*\\\n        !*** ./src/util/prevent-click.js ***!\n        \\***********************************/\n\n      /*! no static exports found */\n\n      /***/\n      function (module, exports, __webpack_require__) {\n        \"use strict\";\n\n        Object.defineProperty(exports, \"__esModule\", {\n          value: true\n        });\n        exports.default = preventClick;\n        /**\n         * Stops propagation of click event and removes event listener\n         *\n         * @private\n         * @param {object} event The click event\n         */\n\n        function preventClickHandler(event) {\n          event.stopPropagation();\n          document.body.removeEventListener('click', preventClickHandler, true);\n        }\n        /**\n         * Starts listening for click event and prevent propagation\n         *\n         * @param {object} values Values\n         */\n\n\n        function preventClick(values) {\n          document.body.addEventListener('click', preventClickHandler, true);\n        }\n\n        module.exports = exports.default;\n        /***/\n      },\n\n      /***/\n      \"./src/util/request-animation-frame.js\":\n      /*!*********************************************!*\\\n        !*** ./src/util/request-animation-frame.js ***!\n        \\*********************************************/\n\n      /*! no static exports found */\n\n      /***/\n      function (module, exports, __webpack_require__) {\n        \"use strict\";\n\n        Object.defineProperty(exports, \"__esModule\", {\n          value: true\n        });\n        exports.default = void 0;\n        /* eslint-disable valid-jsdoc */\n\n        /**\n         * Returns the `requestAnimationFrame` function for the browser, or a shim with\n         * `setTimeout` if the function is not found\n         *\n         * @return {function} Available `requestAnimationFrame` function for the browser\n         */\n\n        var _default = (window.requestAnimationFrame || window.webkitRequestAnimationFrame || window.mozRequestAnimationFrame || window.oRequestAnimationFrame || window.msRequestAnimationFrame || function (callback, element) {\n          return setTimeout(callback, 1000 / 60);\n        }).bind(window);\n\n        exports.default = _default;\n        module.exports = exports.default;\n        /***/\n      },\n\n      /***/\n      \"./src/util/style.js\":\n      /*!***************************!*\\\n        !*** ./src/util/style.js ***!\n        \\***************************/\n\n      /*! no static exports found */\n\n      /***/\n      function (module, exports, __webpack_require__) {\n        \"use strict\";\n\n        Object.defineProperty(exports, \"__esModule\", {\n          value: true\n        });\n        exports.default = style;\n        /**\n         * Apply a map of styles to an element\n         *\n         * @param {HTMLElement} el The element that the styles will be applied to\n         * @param {Object} styles The map of propName: attribute, both are used as-is\n         *\n         * @return {HTMLElement} el\n         */\n\n        function style(el, styles) {\n          Object.keys(styles).forEach(function (prop) {\n            if (el.style[prop] !== styles[prop]) {\n              el.style[prop] = styles[prop];\n            }\n          });\n          return el;\n        }\n\n        module.exports = exports.default;\n        /***/\n      },\n\n      /***/\n      \"./src/wavesurfer.js\":\n      /*!***************************!*\\\n        !*** ./src/wavesurfer.js ***!\n        \\***************************/\n\n      /*! no static exports found */\n\n      /***/\n      function (module, exports, __webpack_require__) {\n        \"use strict\";\n\n        Object.defineProperty(exports, \"__esModule\", {\n          value: true\n        });\n        exports.default = void 0;\n\n        var util = _interopRequireWildcard(__webpack_require__(\n        /*! ./util */\n        \"./src/util/index.js\"));\n\n        var _drawer = _interopRequireDefault(__webpack_require__(\n        /*! ./drawer.multicanvas */\n        \"./src/drawer.multicanvas.js\"));\n\n        var _webaudio = _interopRequireDefault(__webpack_require__(\n        /*! ./webaudio */\n        \"./src/webaudio.js\"));\n\n        var _mediaelement = _interopRequireDefault(__webpack_require__(\n        /*! ./mediaelement */\n        \"./src/mediaelement.js\"));\n\n        var _peakcache = _interopRequireDefault(__webpack_require__(\n        /*! ./peakcache */\n        \"./src/peakcache.js\"));\n\n        var _mediaelementWebaudio = _interopRequireDefault(__webpack_require__(\n        /*! ./mediaelement-webaudio */\n        \"./src/mediaelement-webaudio.js\"));\n\n        function _interopRequireDefault(obj) {\n          return obj && obj.__esModule ? obj : {\n            default: obj\n          };\n        }\n\n        function _getRequireWildcardCache() {\n          if (typeof WeakMap !== \"function\") return null;\n          var cache = new WeakMap();\n\n          _getRequireWildcardCache = function _getRequireWildcardCache() {\n            return cache;\n          };\n\n          return cache;\n        }\n\n        function _interopRequireWildcard(obj) {\n          if (obj && obj.__esModule) {\n            return obj;\n          }\n\n          if (obj === null || _typeof(obj) !== \"object\" && typeof obj !== \"function\") {\n            return {\n              default: obj\n            };\n          }\n\n          var cache = _getRequireWildcardCache();\n\n          if (cache && cache.has(obj)) {\n            return cache.get(obj);\n          }\n\n          var newObj = {};\n          var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;\n\n          for (var key in obj) {\n            if (Object.prototype.hasOwnProperty.call(obj, key)) {\n              var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;\n\n              if (desc && (desc.get || desc.set)) {\n                Object.defineProperty(newObj, key, desc);\n              } else {\n                newObj[key] = obj[key];\n              }\n            }\n          }\n\n          newObj.default = obj;\n\n          if (cache) {\n            cache.set(obj, newObj);\n          }\n\n          return newObj;\n        }\n\n        function _typeof(obj) {\n          if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n            _typeof = function _typeof(obj) {\n              return typeof obj;\n            };\n          } else {\n            _typeof = function _typeof(obj) {\n              return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n            };\n          }\n\n          return _typeof(obj);\n        }\n\n        function _possibleConstructorReturn(self, call) {\n          if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {\n            return call;\n          }\n\n          return _assertThisInitialized(self);\n        }\n\n        function _getPrototypeOf(o) {\n          _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n            return o.__proto__ || Object.getPrototypeOf(o);\n          };\n          return _getPrototypeOf(o);\n        }\n\n        function _assertThisInitialized(self) {\n          if (self === void 0) {\n            throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n          }\n\n          return self;\n        }\n\n        function _inherits(subClass, superClass) {\n          if (typeof superClass !== \"function\" && superClass !== null) {\n            throw new TypeError(\"Super expression must either be null or a function\");\n          }\n\n          subClass.prototype = Object.create(superClass && superClass.prototype, {\n            constructor: {\n              value: subClass,\n              writable: true,\n              configurable: true\n            }\n          });\n          if (superClass) _setPrototypeOf(subClass, superClass);\n        }\n\n        function _setPrototypeOf(o, p) {\n          _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n            o.__proto__ = p;\n            return o;\n          };\n\n          return _setPrototypeOf(o, p);\n        }\n\n        function _classCallCheck(instance, Constructor) {\n          if (!(instance instanceof Constructor)) {\n            throw new TypeError(\"Cannot call a class as a function\");\n          }\n        }\n\n        function _defineProperties(target, props) {\n          for (var i = 0; i < props.length; i++) {\n            var descriptor = props[i];\n            descriptor.enumerable = descriptor.enumerable || false;\n            descriptor.configurable = true;\n            if (\"value\" in descriptor) descriptor.writable = true;\n            Object.defineProperty(target, descriptor.key, descriptor);\n          }\n        }\n\n        function _createClass(Constructor, protoProps, staticProps) {\n          if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n          if (staticProps) _defineProperties(Constructor, staticProps);\n          return Constructor;\n        }\n        /*\n         * This work is licensed under a BSD-3-Clause License.\n         */\n\n        /** @external {HTMLElement} https://developer.mozilla.org/en/docs/Web/API/HTMLElement */\n\n        /** @external {OfflineAudioContext} https://developer.mozilla.org/en-US/docs/Web/API/OfflineAudioContext */\n\n        /** @external {File} https://developer.mozilla.org/en-US/docs/Web/API/File */\n\n        /** @external {Blob} https://developer.mozilla.org/en-US/docs/Web/API/Blob */\n\n        /** @external {CanvasRenderingContext2D} https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D */\n\n        /** @external {MediaStreamConstraints} https://developer.mozilla.org/en-US/docs/Web/API/MediaStreamConstraints */\n\n        /** @external {AudioNode} https://developer.mozilla.org/de/docs/Web/API/AudioNode */\n\n        /**\n         * @typedef {Object} WavesurferParams\n         * @property {AudioContext} audioContext=null Use your own previously\n         * initialized AudioContext or leave blank.\n         * @property {number} audioRate=1 Speed at which to play audio. Lower number is\n         * slower.\n         * @property {ScriptProcessorNode} audioScriptProcessor=null Use your own previously\n         * initialized ScriptProcessorNode or leave blank.\n         * @property {boolean} autoCenter=true If a scrollbar is present, center the\n         * waveform on current progress\n         * @property {number} autoCenterRate=5 If autoCenter is active, rate at which the\n         * waveform is centered\n         * @property {boolean} autoCenterImmediately=false If autoCenter is active, immediately\n         * center waveform on current progress\n         * @property {string} backend='WebAudio' `'WebAudio'|'MediaElement'|'MediaElementWebAudio'` In most cases\n         * you don't have to set this manually. MediaElement is a fallback for unsupported browsers.\n         * MediaElementWebAudio allows to use WebAudio API also with big audio files, loading audio like with\n         * MediaElement backend (HTML5 audio tag). You have to use the same methods of MediaElement backend for loading and\n         * playback, giving also peaks, so the audio data are not decoded. In this way you can use WebAudio features, like filters,\n         * also with audio with big duration. For example:\n         * ` wavesurfer.load(url | HTMLMediaElement, peaks, preload, duration);\n         *   wavesurfer.play();\n         *   wavesurfer.setFilter(customFilter);\n         * `\n         * @property {string} backgroundColor=null Change background color of the\n         * waveform container.\n         * @property {number} barHeight=1 The height of the wave bars.\n         * @property {number} barRadius=0 The radius of the wave bars. Makes bars rounded\n         * @property {number} barGap=null The optional spacing between bars of the wave,\n         * if not provided will be calculated in legacy format.\n         * @property {number} barWidth=null Draw the waveform using bars.\n         * @property {number} barMinHeight=null If specified, draw at least a bar of this height,\n         * eliminating waveform gaps\n         * @property {boolean} closeAudioContext=false Close and nullify all audio\n         * contexts when the destroy method is called.\n         * @property {!string|HTMLElement} container CSS selector or HTML element where\n         * the waveform should be drawn. This is the only required parameter.\n         * @property {string} cursorColor='#333' The fill color of the cursor indicating\n         * the playhead position.\n         * @property {number} cursorWidth=1 Measured in pixels.\n         * @property {object} drawingContextAttributes={desynchronized: true} Drawing context\n         * attributes.\n         * @property {number} duration=null Optional audio length so pre-rendered peaks\n         * can be display immediately for example.\n         * @property {boolean} fillParent=true Whether to fill the entire container or\n         * draw only according to `minPxPerSec`.\n         * @property {boolean} forceDecode=false Force decoding of audio using web audio\n         * when zooming to get a more detailed waveform.\n         * @property {number} height=128 The height of the waveform. Measured in\n         * pixels.\n         * @property {boolean} hideScrollbar=false Whether to hide the horizontal\n         * scrollbar when one would normally be shown.\n         * @property {boolean} interact=true Whether the mouse interaction will be\n         * enabled at initialization. You can switch this parameter at any time later\n         * on.\n         * @property {boolean} loopSelection=true (Use with regions plugin) Enable\n         * looping of selected regions\n         * @property {number} maxCanvasWidth=4000 Maximum width of a single canvas in\n         * pixels, excluding a small overlap (2 * `pixelRatio`, rounded up to the next\n         * even integer). If the waveform is longer than this value, additional canvases\n         * will be used to render the waveform, which is useful for very large waveforms\n         * that may be too wide for browsers to draw on a single canvas.\n         * @property {boolean} mediaControls=false (Use with backend `MediaElement` or `MediaElementWebAudio`)\n         * this enables the native controls for the media element\n         * @property {string} mediaType='audio' (Use with backend `MediaElement` or `MediaElementWebAudio`)\n         * `'audio'|'video'` ('video' only for `MediaElement`)\n         * @property {number} minPxPerSec=20 Minimum number of pixels per second of\n         * audio.\n         * @property {boolean} normalize=false If true, normalize by the maximum peak\n         * instead of 1.0.\n         * @property {boolean} partialRender=false Use the PeakCache to improve\n         * rendering speed of large waveforms\n         * @property {number} pixelRatio=window.devicePixelRatio The pixel ratio used to\n         * calculate display\n         * @property {PluginDefinition[]} plugins=[] An array of plugin definitions to\n         * register during instantiation, they will be directly initialised unless they\n         * are added with the `deferInit` property set to true.\n         * @property {string} progressColor='#555' The fill color of the part of the\n         * waveform behind the cursor. When `progressColor` and `waveColor` are the same\n         * the progress wave is not rendered at all.\n         * @property {boolean} removeMediaElementOnDestroy=true Set to false to keep the\n         * media element in the DOM when the player is destroyed. This is useful when\n         * reusing an existing media element via the `loadMediaElement` method.\n         * @property {Object} renderer=MultiCanvas Can be used to inject a custom\n         * renderer.\n         * @property {boolean|number} responsive=false If set to `true` resize the\n         * waveform, when the window is resized. This is debounced with a `100ms`\n         * timeout by default. If this parameter is a number it represents that timeout.\n         * @property {boolean} rtl=false If set to `true`, renders waveform from\n         * right-to-left.\n         * @property {boolean} scrollParent=false Whether to scroll the container with a\n         * lengthy waveform. Otherwise the waveform is shrunk to the container width\n         * (see fillParent).\n         * @property {number} skipLength=2 Number of seconds to skip with the\n         * skipForward() and skipBackward() methods.\n         * @property {boolean} splitChannels=false Render with separate waveforms for\n         * the channels of the audio\n         * @property {string} waveColor='#999' The fill color of the waveform after the\n         * cursor.\n         * @property {object} xhr={} XHR options. For example:\n         * `let xhr = {\n         *     cache: 'default',\n         *     mode: 'cors',\n         *     method: 'GET',\n         *     credentials: 'same-origin',\n         *     redirect: 'follow',\n         *     referrer: 'client',\n         *     headers: [\n         *         {\n         *             key: 'Authorization',\n         *             value: 'my-token'\n         *         }\n         *     ]\n         * };`\n         */\n\n        /**\n         * @typedef {Object} PluginDefinition\n         * @desc The Object used to describe a plugin\n         * @example wavesurfer.addPlugin(pluginDefinition);\n         * @property {string} name The name of the plugin, the plugin instance will be\n         * added as a property to the wavesurfer instance under this name\n         * @property {?Object} staticProps The properties that should be added to the\n         * wavesurfer instance as static properties\n         * @property {?boolean} deferInit Don't initialise plugin\n         * automatically\n         * @property {Object} params={} The plugin parameters, they are the first parameter\n         * passed to the plugin class constructor function\n         * @property {PluginClass} instance The plugin instance factory, is called with\n         * the dependency specified in extends. Returns the plugin class.\n         */\n\n        /**\n         * @interface PluginClass\n         *\n         * @desc This is the interface which is implemented by all plugin classes. Note\n         * that this only turns into an observer after being passed through\n         * `wavesurfer.addPlugin`.\n         *\n         * @extends {Observer}\n         */\n\n\n        var PluginClass =\n        /*#__PURE__*/\n        function () {\n          _createClass(PluginClass, [{\n            key: \"create\",\n\n            /**\n             * Plugin definition factory\n             *\n             * This function must be used to create a plugin definition which can be\n             * used by wavesurfer to correctly instantiate the plugin.\n             *\n             * It returns a `PluginDefinition` object representing the plugin.\n             *\n             * @param {Object} params={} The plugin params (specific to the plugin)\n             */\n            value: function create(params) {}\n            /**\n             * Construct the plugin\n             *\n             * @param {Object} params={} The plugin params (specific to the plugin)\n             * @param {Object} ws The wavesurfer instance\n             */\n\n          }]);\n\n          function PluginClass(params, ws) {\n            _classCallCheck(this, PluginClass);\n          }\n          /**\n           * Initialise the plugin\n           *\n           * Start doing something. This is called by\n           * `wavesurfer.initPlugin(pluginName)`\n           */\n\n\n          _createClass(PluginClass, [{\n            key: \"init\",\n            value: function init() {}\n            /**\n             * Destroy the plugin instance\n             *\n             * Stop doing something. This is called by\n             * `wavesurfer.destroyPlugin(pluginName)`\n             */\n\n          }, {\n            key: \"destroy\",\n            value: function destroy() {}\n          }]);\n\n          return PluginClass;\n        }();\n        /**\n         * WaveSurfer core library class\n         *\n         * @extends {Observer}\n         * @example\n         * const params = {\n         *   container: '#waveform',\n         *   waveColor: 'violet',\n         *   progressColor: 'purple'\n         * };\n         *\n         * // initialise like this\n         * const wavesurfer = WaveSurfer.create(params);\n         *\n         * // or like this ...\n         * const wavesurfer = new WaveSurfer(params);\n         * wavesurfer.init();\n         *\n         * // load audio file\n         * wavesurfer.load('example/media/demo.wav');\n         */\n\n\n        var WaveSurfer =\n        /*#__PURE__*/\n        function (_util$Observer) {\n          _inherits(WaveSurfer, _util$Observer);\n\n          _createClass(WaveSurfer, null, [{\n            key: \"create\",\n\n            /** @private */\n\n            /** @private */\n\n            /**\n             * Instantiate this class, call its `init` function and returns it\n             *\n             * @param {WavesurferParams} params The wavesurfer parameters\n             * @return {Object} WaveSurfer instance\n             * @example const wavesurfer = WaveSurfer.create(params);\n             */\n            value: function create(params) {\n              var wavesurfer = new WaveSurfer(params);\n              return wavesurfer.init();\n            }\n            /**\n             * The library version number is available as a static property of the\n             * WaveSurfer class\n             *\n             * @type {String}\n             * @example\n             * console.log('Using wavesurfer.js ' + WaveSurfer.VERSION);\n             */\n\n          }]);\n          /**\n           * Initialise wavesurfer instance\n           *\n           * @param {WavesurferParams} params Instantiation options for wavesurfer\n           * @example\n           * const wavesurfer = new WaveSurfer(params);\n           * @returns {this} Wavesurfer instance\n           */\n\n\n          function WaveSurfer(params) {\n            var _this;\n\n            _classCallCheck(this, WaveSurfer);\n\n            _this = _possibleConstructorReturn(this, _getPrototypeOf(WaveSurfer).call(this));\n            /**\n             * Extract relevant parameters (or defaults)\n             * @private\n             */\n\n            _this.defaultParams = {\n              audioContext: null,\n              audioScriptProcessor: null,\n              audioRate: 1,\n              autoCenter: true,\n              autoCenterRate: 5,\n              autoCenterImmediately: false,\n              backend: 'WebAudio',\n              backgroundColor: null,\n              barHeight: 1,\n              barRadius: 0,\n              barGap: null,\n              barMinHeight: null,\n              container: null,\n              cursorColor: '#333',\n              cursorWidth: 1,\n              dragSelection: true,\n              drawingContextAttributes: {\n                // Boolean that hints the user agent to reduce the latency\n                // by desynchronizing the canvas paint cycle from the event\n                // loop\n                desynchronized: true\n              },\n              duration: null,\n              fillParent: true,\n              forceDecode: false,\n              height: 128,\n              hideScrollbar: false,\n              interact: true,\n              loopSelection: true,\n              maxCanvasWidth: 4000,\n              mediaContainer: null,\n              mediaControls: false,\n              mediaType: 'audio',\n              minPxPerSec: 20,\n              normalize: false,\n              partialRender: false,\n              pixelRatio: window.devicePixelRatio || screen.deviceXDPI / screen.logicalXDPI,\n              plugins: [],\n              progressColor: '#555',\n              removeMediaElementOnDestroy: true,\n              renderer: _drawer.default,\n              responsive: false,\n              rtl: false,\n              scrollParent: false,\n              skipLength: 2,\n              splitChannels: false,\n              waveColor: '#999',\n              xhr: {}\n            };\n            _this.backends = {\n              MediaElement: _mediaelement.default,\n              WebAudio: _webaudio.default,\n              MediaElementWebAudio: _mediaelementWebaudio.default\n            };\n            _this.util = util;\n            _this.params = Object.assign({}, _this.defaultParams, params);\n            /** @private */\n\n            _this.container = 'string' == typeof params.container ? document.querySelector(_this.params.container) : _this.params.container;\n\n            if (!_this.container) {\n              throw new Error('Container element not found');\n            }\n\n            if (_this.params.mediaContainer == null) {\n              /** @private */\n              _this.mediaContainer = _this.container;\n            } else if (typeof _this.params.mediaContainer == 'string') {\n              /** @private */\n              _this.mediaContainer = document.querySelector(_this.params.mediaContainer);\n            } else {\n              /** @private */\n              _this.mediaContainer = _this.params.mediaContainer;\n            }\n\n            if (!_this.mediaContainer) {\n              throw new Error('Media Container element not found');\n            }\n\n            if (_this.params.maxCanvasWidth <= 1) {\n              throw new Error('maxCanvasWidth must be greater than 1');\n            } else if (_this.params.maxCanvasWidth % 2 == 1) {\n              throw new Error('maxCanvasWidth must be an even number');\n            }\n\n            if (_this.params.rtl === true) {\n              util.style(_this.container, {\n                transform: 'rotateY(180deg)'\n              });\n            }\n\n            if (_this.params.backgroundColor) {\n              _this.setBackgroundColor(_this.params.backgroundColor);\n            }\n            /**\n             * @private Used to save the current volume when muting so we can\n             * restore once unmuted\n             * @type {number}\n             */\n\n\n            _this.savedVolume = 0;\n            /**\n             * @private The current muted state\n             * @type {boolean}\n             */\n\n            _this.isMuted = false;\n            /**\n             * @private Will hold a list of event descriptors that need to be\n             * canceled on subsequent loads of audio\n             * @type {Object[]}\n             */\n\n            _this.tmpEvents = [];\n            /**\n             * @private Holds any running audio downloads\n             * @type {Observer}\n             */\n\n            _this.currentRequest = null;\n            /** @private */\n\n            _this.arraybuffer = null;\n            /** @private */\n\n            _this.drawer = null;\n            /** @private */\n\n            _this.backend = null;\n            /** @private */\n\n            _this.peakCache = null; // cache constructor objects\n\n            if (typeof _this.params.renderer !== 'function') {\n              throw new Error('Renderer parameter is invalid');\n            }\n            /**\n             * @private The uninitialised Drawer class\n             */\n\n\n            _this.Drawer = _this.params.renderer;\n            /**\n             * @private The uninitialised Backend class\n             */\n            // Back compat\n\n            if (_this.params.backend == 'AudioElement') {\n              _this.params.backend = 'MediaElement';\n            }\n\n            if ((_this.params.backend == 'WebAudio' || _this.params.backend === 'MediaElementWebAudio') && !_webaudio.default.prototype.supportsWebAudio.call(null)) {\n              _this.params.backend = 'MediaElement';\n            }\n\n            _this.Backend = _this.backends[_this.params.backend];\n            /**\n             * @private map of plugin names that are currently initialised\n             */\n\n            _this.initialisedPluginList = {};\n            /** @private */\n\n            _this.isDestroyed = false;\n            /**\n             * Get the current ready status.\n             *\n             * @example const isReady = wavesurfer.isReady;\n             * @return {boolean}\n             */\n\n            _this.isReady = false; // responsive debounced event listener. If this.params.responsive is not\n            // set, this is never called. Use 100ms or this.params.responsive as\n            // timeout for the debounce function.\n\n            var prevWidth = 0;\n            _this._onResize = util.debounce(function () {\n              if (prevWidth != _this.drawer.wrapper.clientWidth && !_this.params.scrollParent) {\n                prevWidth = _this.drawer.wrapper.clientWidth;\n\n                _this.drawer.fireEvent('redraw');\n              }\n            }, typeof _this.params.responsive === 'number' ? _this.params.responsive : 100);\n            return _possibleConstructorReturn(_this, _assertThisInitialized(_this));\n          }\n          /**\n           * Initialise the wave\n           *\n           * @example\n           * var wavesurfer = new WaveSurfer(params);\n           * wavesurfer.init();\n           * @return {this} The wavesurfer instance\n           */\n\n\n          _createClass(WaveSurfer, [{\n            key: \"init\",\n            value: function init() {\n              this.registerPlugins(this.params.plugins);\n              this.createDrawer();\n              this.createBackend();\n              this.createPeakCache();\n              return this;\n            }\n            /**\n             * Add and initialise array of plugins (if `plugin.deferInit` is falsey),\n             * this function is called in the init function of wavesurfer\n             *\n             * @param {PluginDefinition[]} plugins An array of plugin definitions\n             * @emits {WaveSurfer#plugins-registered} Called with the array of plugin definitions\n             * @return {this} The wavesurfer instance\n             */\n\n          }, {\n            key: \"registerPlugins\",\n            value: function registerPlugins(plugins) {\n              var _this2 = this; // first instantiate all the plugins\n\n\n              plugins.forEach(function (plugin) {\n                return _this2.addPlugin(plugin);\n              }); // now run the init functions\n\n              plugins.forEach(function (plugin) {\n                // call init function of the plugin if deferInit is falsey\n                // in that case you would manually use initPlugins()\n                if (!plugin.deferInit) {\n                  _this2.initPlugin(plugin.name);\n                }\n              });\n              this.fireEvent('plugins-registered', plugins);\n              return this;\n            }\n            /**\n             * Get a map of plugin names that are currently initialised\n             *\n             * @example wavesurfer.getPlugins();\n             * @return {Object} Object with plugin names\n             */\n\n          }, {\n            key: \"getActivePlugins\",\n            value: function getActivePlugins() {\n              return this.initialisedPluginList;\n            }\n            /**\n             * Add a plugin object to wavesurfer\n             *\n             * @param {PluginDefinition} plugin A plugin definition\n             * @emits {WaveSurfer#plugin-added} Called with the name of the plugin that was added\n             * @example wavesurfer.addPlugin(WaveSurfer.minimap());\n             * @return {this} The wavesurfer instance\n             */\n\n          }, {\n            key: \"addPlugin\",\n            value: function addPlugin(plugin) {\n              var _this3 = this;\n\n              if (!plugin.name) {\n                throw new Error('Plugin does not have a name!');\n              }\n\n              if (!plugin.instance) {\n                throw new Error(\"Plugin \".concat(plugin.name, \" does not have an instance property!\"));\n              } // staticProps properties are applied to wavesurfer instance\n\n\n              if (plugin.staticProps) {\n                Object.keys(plugin.staticProps).forEach(function (pluginStaticProp) {\n                  /**\n                   * Properties defined in a plugin definition's `staticProps` property are added as\n                   * staticProps properties of the WaveSurfer instance\n                   */\n                  _this3[pluginStaticProp] = plugin.staticProps[pluginStaticProp];\n                });\n              }\n\n              var Instance = plugin.instance; // turn the plugin instance into an observer\n\n              var observerPrototypeKeys = Object.getOwnPropertyNames(util.Observer.prototype);\n              observerPrototypeKeys.forEach(function (key) {\n                Instance.prototype[key] = util.Observer.prototype[key];\n              });\n              /**\n               * Instantiated plugin classes are added as a property of the wavesurfer\n               * instance\n               * @type {Object}\n               */\n\n              this[plugin.name] = new Instance(plugin.params || {}, this);\n              this.fireEvent('plugin-added', plugin.name);\n              return this;\n            }\n            /**\n             * Initialise a plugin\n             *\n             * @param {string} name A plugin name\n             * @emits WaveSurfer#plugin-initialised\n             * @example wavesurfer.initPlugin('minimap');\n             * @return {this} The wavesurfer instance\n             */\n\n          }, {\n            key: \"initPlugin\",\n            value: function initPlugin(name) {\n              if (!this[name]) {\n                throw new Error(\"Plugin \".concat(name, \" has not been added yet!\"));\n              }\n\n              if (this.initialisedPluginList[name]) {\n                // destroy any already initialised plugins\n                this.destroyPlugin(name);\n              }\n\n              this[name].init();\n              this.initialisedPluginList[name] = true;\n              this.fireEvent('plugin-initialised', name);\n              return this;\n            }\n            /**\n             * Destroy a plugin\n             *\n             * @param {string} name A plugin name\n             * @emits WaveSurfer#plugin-destroyed\n             * @example wavesurfer.destroyPlugin('minimap');\n             * @returns {this} The wavesurfer instance\n             */\n\n          }, {\n            key: \"destroyPlugin\",\n            value: function destroyPlugin(name) {\n              if (!this[name]) {\n                throw new Error(\"Plugin \".concat(name, \" has not been added yet and cannot be destroyed!\"));\n              }\n\n              if (!this.initialisedPluginList[name]) {\n                throw new Error(\"Plugin \".concat(name, \" is not active and cannot be destroyed!\"));\n              }\n\n              if (typeof this[name].destroy !== 'function') {\n                throw new Error(\"Plugin \".concat(name, \" does not have a destroy function!\"));\n              }\n\n              this[name].destroy();\n              delete this.initialisedPluginList[name];\n              this.fireEvent('plugin-destroyed', name);\n              return this;\n            }\n            /**\n             * Destroy all initialised plugins. Convenience function to use when\n             * wavesurfer is removed\n             *\n             * @private\n             */\n\n          }, {\n            key: \"destroyAllPlugins\",\n            value: function destroyAllPlugins() {\n              var _this4 = this;\n\n              Object.keys(this.initialisedPluginList).forEach(function (name) {\n                return _this4.destroyPlugin(name);\n              });\n            }\n            /**\n             * Create the drawer and draw the waveform\n             *\n             * @private\n             * @emits WaveSurfer#drawer-created\n             */\n\n          }, {\n            key: \"createDrawer\",\n            value: function createDrawer() {\n              var _this5 = this;\n\n              this.drawer = new this.Drawer(this.container, this.params);\n              this.drawer.init();\n              this.fireEvent('drawer-created', this.drawer);\n\n              if (this.params.responsive !== false) {\n                window.addEventListener('resize', this._onResize, true);\n                window.addEventListener('orientationchange', this._onResize, true);\n              }\n\n              this.drawer.on('redraw', function () {\n                _this5.drawBuffer();\n\n                _this5.drawer.progress(_this5.backend.getPlayedPercents());\n              }); // Click-to-seek\n\n              this.drawer.on('click', function (e, progress) {\n                setTimeout(function () {\n                  return _this5.seekTo(progress);\n                }, 0);\n              }); // Relay the scroll event from the drawer\n\n              this.drawer.on('scroll', function (e) {\n                if (_this5.params.partialRender) {\n                  _this5.drawBuffer();\n                }\n\n                _this5.fireEvent('scroll', e);\n              });\n            }\n            /**\n             * Create the backend\n             *\n             * @private\n             * @emits WaveSurfer#backend-created\n             */\n\n          }, {\n            key: \"createBackend\",\n            value: function createBackend() {\n              var _this6 = this;\n\n              if (this.backend) {\n                this.backend.destroy();\n              }\n\n              this.backend = new this.Backend(this.params);\n              this.backend.init();\n              this.fireEvent('backend-created', this.backend);\n              this.backend.on('finish', function () {\n                _this6.drawer.progress(_this6.backend.getPlayedPercents());\n\n                _this6.fireEvent('finish');\n              });\n              this.backend.on('play', function () {\n                return _this6.fireEvent('play');\n              });\n              this.backend.on('pause', function () {\n                return _this6.fireEvent('pause');\n              });\n              this.backend.on('audioprocess', function (time) {\n                _this6.drawer.progress(_this6.backend.getPlayedPercents());\n\n                _this6.fireEvent('audioprocess', time);\n              }); // only needed for MediaElement and MediaElementWebAudio backend\n\n              if (this.params.backend === 'MediaElement' || this.params.backend === 'MediaElementWebAudio') {\n                this.backend.on('seek', function () {\n                  _this6.drawer.progress(_this6.backend.getPlayedPercents());\n                });\n                this.backend.on('volume', function () {\n                  var newVolume = _this6.getVolume();\n\n                  _this6.fireEvent('volume', newVolume);\n\n                  if (_this6.backend.isMuted !== _this6.isMuted) {\n                    _this6.isMuted = _this6.backend.isMuted;\n\n                    _this6.fireEvent('mute', _this6.isMuted);\n                  }\n                });\n              }\n            }\n            /**\n             * Create the peak cache\n             *\n             * @private\n             */\n\n          }, {\n            key: \"createPeakCache\",\n            value: function createPeakCache() {\n              if (this.params.partialRender) {\n                this.peakCache = new _peakcache.default();\n              }\n            }\n            /**\n             * Get the duration of the audio clip\n             *\n             * @example const duration = wavesurfer.getDuration();\n             * @return {number} Duration in seconds\n             */\n\n          }, {\n            key: \"getDuration\",\n            value: function getDuration() {\n              return this.backend.getDuration();\n            }\n            /**\n             * Get the current playback position\n             *\n             * @example const currentTime = wavesurfer.getCurrentTime();\n             * @return {number} Playback position in seconds\n             */\n\n          }, {\n            key: \"getCurrentTime\",\n            value: function getCurrentTime() {\n              return this.backend.getCurrentTime();\n            }\n            /**\n             * Set the current play time in seconds.\n             *\n             * @param {number} seconds A positive number in seconds. E.g. 10 means 10\n             * seconds, 60 means 1 minute\n             */\n\n          }, {\n            key: \"setCurrentTime\",\n            value: function setCurrentTime(seconds) {\n              if (seconds >= this.getDuration()) {\n                this.seekTo(1);\n              } else {\n                this.seekTo(seconds / this.getDuration());\n              }\n            }\n            /**\n             * Starts playback from the current position. Optional start and end\n             * measured in seconds can be used to set the range of audio to play.\n             *\n             * @param {?number} start Position to start at\n             * @param {?number} end Position to end at\n             * @emits WaveSurfer#interaction\n             * @return {Promise} Result of the backend play method\n             * @example\n             * // play from second 1 to 5\n             * wavesurfer.play(1, 5);\n             */\n\n          }, {\n            key: \"play\",\n            value: function play(start, end) {\n              var _this7 = this;\n\n              this.fireEvent('interaction', function () {\n                return _this7.play(start, end);\n              });\n              return this.backend.play(start, end);\n            }\n            /**\n             * Set a point in seconds for playback to stop at.\n             *\n             * @param {number} position Position (in seconds) to stop at\n             * @version 3.3.0\n             */\n\n          }, {\n            key: \"setPlayEnd\",\n            value: function setPlayEnd(position) {\n              this.backend.setPlayEnd(position);\n            }\n            /**\n             * Stops and pauses playback\n             *\n             * @example wavesurfer.pause();\n             * @return {Promise} Result of the backend pause method\n             */\n\n          }, {\n            key: \"pause\",\n            value: function pause() {\n              if (!this.backend.isPaused()) {\n                return this.backend.pause();\n              }\n            }\n            /**\n             * Toggle playback\n             *\n             * @example wavesurfer.playPause();\n             * @return {Promise} Result of the backend play or pause method\n             */\n\n          }, {\n            key: \"playPause\",\n            value: function playPause() {\n              return this.backend.isPaused() ? this.play() : this.pause();\n            }\n            /**\n             * Get the current playback state\n             *\n             * @example const isPlaying = wavesurfer.isPlaying();\n             * @return {boolean} False if paused, true if playing\n             */\n\n          }, {\n            key: \"isPlaying\",\n            value: function isPlaying() {\n              return !this.backend.isPaused();\n            }\n            /**\n             * Skip backward\n             *\n             * @param {?number} seconds Amount to skip back, if not specified `skipLength`\n             * is used\n             * @example wavesurfer.skipBackward();\n             */\n\n          }, {\n            key: \"skipBackward\",\n            value: function skipBackward(seconds) {\n              this.skip(-seconds || -this.params.skipLength);\n            }\n            /**\n             * Skip forward\n             *\n             * @param {?number} seconds Amount to skip back, if not specified `skipLength`\n             * is used\n             * @example wavesurfer.skipForward();\n             */\n\n          }, {\n            key: \"skipForward\",\n            value: function skipForward(seconds) {\n              this.skip(seconds || this.params.skipLength);\n            }\n            /**\n             * Skip a number of seconds from the current position (use a negative value\n             * to go backwards).\n             *\n             * @param {number} offset Amount to skip back or forwards\n             * @example\n             * // go back 2 seconds\n             * wavesurfer.skip(-2);\n             */\n\n          }, {\n            key: \"skip\",\n            value: function skip(offset) {\n              var duration = this.getDuration() || 1;\n              var position = this.getCurrentTime() || 0;\n              position = Math.max(0, Math.min(duration, position + (offset || 0)));\n              this.seekAndCenter(position / duration);\n            }\n            /**\n             * Seeks to a position and centers the view\n             *\n             * @param {number} progress Between 0 (=beginning) and 1 (=end)\n             * @example\n             * // seek and go to the middle of the audio\n             * wavesurfer.seekTo(0.5);\n             */\n\n          }, {\n            key: \"seekAndCenter\",\n            value: function seekAndCenter(progress) {\n              this.seekTo(progress);\n              this.drawer.recenter(progress);\n            }\n            /**\n             * Seeks to a position\n             *\n             * @param {number} progress Between 0 (=beginning) and 1 (=end)\n             * @emits WaveSurfer#interaction\n             * @emits WaveSurfer#seek\n             * @example\n             * // seek to the middle of the audio\n             * wavesurfer.seekTo(0.5);\n             */\n\n          }, {\n            key: \"seekTo\",\n            value: function seekTo(progress) {\n              var _this8 = this; // return an error if progress is not a number between 0 and 1\n\n\n              if (typeof progress !== 'number' || !isFinite(progress) || progress < 0 || progress > 1) {\n                throw new Error('Error calling wavesurfer.seekTo, parameter must be a number between 0 and 1!');\n              }\n\n              this.fireEvent('interaction', function () {\n                return _this8.seekTo(progress);\n              });\n              var paused = this.backend.isPaused(); // avoid draw wrong position while playing backward seeking\n\n              if (!paused) {\n                this.backend.pause();\n              } // avoid small scrolls while paused seeking\n\n\n              var oldScrollParent = this.params.scrollParent;\n              this.params.scrollParent = false;\n              this.backend.seekTo(progress * this.getDuration());\n              this.drawer.progress(progress);\n\n              if (!paused) {\n                this.backend.play();\n              }\n\n              this.params.scrollParent = oldScrollParent;\n              this.fireEvent('seek', progress);\n            }\n            /**\n             * Stops and goes to the beginning.\n             *\n             * @example wavesurfer.stop();\n             */\n\n          }, {\n            key: \"stop\",\n            value: function stop() {\n              this.pause();\n              this.seekTo(0);\n              this.drawer.progress(0);\n            }\n            /**\n             * Sets the ID of the audio device to use for output and returns a Promise.\n             *\n             * @param {string} deviceId String value representing underlying output\n             * device\n             * @returns {Promise} `Promise` that resolves to `undefined` when there are\n             * no errors detected.\n             */\n\n          }, {\n            key: \"setSinkId\",\n            value: function setSinkId(deviceId) {\n              return this.backend.setSinkId(deviceId);\n            }\n            /**\n             * Set the playback volume.\n             *\n             * @param {number} newVolume A value between 0 and 1, 0 being no\n             * volume and 1 being full volume.\n             * @emits WaveSurfer#volume\n             */\n\n          }, {\n            key: \"setVolume\",\n            value: function setVolume(newVolume) {\n              this.backend.setVolume(newVolume);\n              this.fireEvent('volume', newVolume);\n            }\n            /**\n             * Get the playback volume.\n             *\n             * @return {number} A value between 0 and 1, 0 being no\n             * volume and 1 being full volume.\n             */\n\n          }, {\n            key: \"getVolume\",\n            value: function getVolume() {\n              return this.backend.getVolume();\n            }\n            /**\n             * Set the playback rate.\n             *\n             * @param {number} rate A positive number. E.g. 0.5 means half the normal\n             * speed, 2 means double speed and so on.\n             * @example wavesurfer.setPlaybackRate(2);\n             */\n\n          }, {\n            key: \"setPlaybackRate\",\n            value: function setPlaybackRate(rate) {\n              this.backend.setPlaybackRate(rate);\n            }\n            /**\n             * Get the playback rate.\n             *\n             * @return {number} The current playback rate.\n             */\n\n          }, {\n            key: \"getPlaybackRate\",\n            value: function getPlaybackRate() {\n              return this.backend.getPlaybackRate();\n            }\n            /**\n             * Toggle the volume on and off. If not currently muted it will save the\n             * current volume value and turn the volume off. If currently muted then it\n             * will restore the volume to the saved value, and then rest the saved\n             * value.\n             *\n             * @example wavesurfer.toggleMute();\n             */\n\n          }, {\n            key: \"toggleMute\",\n            value: function toggleMute() {\n              this.setMute(!this.isMuted);\n            }\n            /**\n             * Enable or disable muted audio\n             *\n             * @param {boolean} mute Specify `true` to mute audio.\n             * @emits WaveSurfer#volume\n             * @emits WaveSurfer#mute\n             * @example\n             * // unmute\n             * wavesurfer.setMute(false);\n             * console.log(wavesurfer.getMute()) // logs false\n             */\n\n          }, {\n            key: \"setMute\",\n            value: function setMute(mute) {\n              // ignore all muting requests if the audio is already in that state\n              if (mute === this.isMuted) {\n                this.fireEvent('mute', this.isMuted);\n                return;\n              }\n\n              if (mute) {\n                // If currently not muted then save current volume,\n                // turn off the volume and update the mute properties\n                this.savedVolume = this.backend.getVolume();\n                this.backend.setVolume(0);\n                this.isMuted = true;\n                this.fireEvent('volume', 0);\n              } else {\n                // If currently muted then restore to the saved volume\n                // and update the mute properties\n                this.backend.setVolume(this.savedVolume);\n                this.isMuted = false;\n                this.fireEvent('volume', this.savedVolume);\n              }\n\n              this.fireEvent('mute', this.isMuted);\n            }\n            /**\n             * Get the current mute status.\n             *\n             * @example const isMuted = wavesurfer.getMute();\n             * @return {boolean} Current mute status\n             */\n\n          }, {\n            key: \"getMute\",\n            value: function getMute() {\n              return this.isMuted;\n            }\n            /**\n             * Get the list of current set filters as an array.\n             *\n             * Filters must be set with setFilters method first\n             *\n             * @return {array} List of enabled filters\n             */\n\n          }, {\n            key: \"getFilters\",\n            value: function getFilters() {\n              return this.backend.filters || [];\n            }\n            /**\n             * Toggles `scrollParent` and redraws\n             *\n             * @example wavesurfer.toggleScroll();\n             */\n\n          }, {\n            key: \"toggleScroll\",\n            value: function toggleScroll() {\n              this.params.scrollParent = !this.params.scrollParent;\n              this.drawBuffer();\n            }\n            /**\n             * Toggle mouse interaction\n             *\n             * @example wavesurfer.toggleInteraction();\n             */\n\n          }, {\n            key: \"toggleInteraction\",\n            value: function toggleInteraction() {\n              this.params.interact = !this.params.interact;\n            }\n            /**\n             * Get the fill color of the waveform after the cursor.\n             *\n             * @return {string} A CSS color string.\n             */\n\n          }, {\n            key: \"getWaveColor\",\n            value: function getWaveColor() {\n              return this.params.waveColor;\n            }\n            /**\n             * Set the fill color of the waveform after the cursor.\n             *\n             * @param {string} color A CSS color string.\n             * @example wavesurfer.setWaveColor('#ddd');\n             */\n\n          }, {\n            key: \"setWaveColor\",\n            value: function setWaveColor(color) {\n              this.params.waveColor = color;\n              this.drawBuffer();\n            }\n            /**\n             * Get the fill color of the waveform behind the cursor.\n             *\n             * @return {string} A CSS color string.\n             */\n\n          }, {\n            key: \"getProgressColor\",\n            value: function getProgressColor() {\n              return this.params.progressColor;\n            }\n            /**\n             * Set the fill color of the waveform behind the cursor.\n             *\n             * @param {string} color A CSS color string.\n             * @example wavesurfer.setProgressColor('#400');\n             */\n\n          }, {\n            key: \"setProgressColor\",\n            value: function setProgressColor(color) {\n              this.params.progressColor = color;\n              this.drawBuffer();\n            }\n            /**\n             * Get the background color of the waveform container.\n             *\n             * @return {string} A CSS color string.\n             */\n\n          }, {\n            key: \"getBackgroundColor\",\n            value: function getBackgroundColor() {\n              return this.params.backgroundColor;\n            }\n            /**\n             * Set the background color of the waveform container.\n             *\n             * @param {string} color A CSS color string.\n             * @example wavesurfer.setBackgroundColor('#FF00FF');\n             */\n\n          }, {\n            key: \"setBackgroundColor\",\n            value: function setBackgroundColor(color) {\n              this.params.backgroundColor = color;\n              util.style(this.container, {\n                background: this.params.backgroundColor\n              });\n            }\n            /**\n             * Get the fill color of the cursor indicating the playhead\n             * position.\n             *\n             * @return {string} A CSS color string.\n             */\n\n          }, {\n            key: \"getCursorColor\",\n            value: function getCursorColor() {\n              return this.params.cursorColor;\n            }\n            /**\n             * Set the fill color of the cursor indicating the playhead\n             * position.\n             *\n             * @param {string} color A CSS color string.\n             * @example wavesurfer.setCursorColor('#222');\n             */\n\n          }, {\n            key: \"setCursorColor\",\n            value: function setCursorColor(color) {\n              this.params.cursorColor = color;\n              this.drawer.updateCursor();\n            }\n            /**\n             * Get the height of the waveform.\n             *\n             * @return {number} Height measured in pixels.\n             */\n\n          }, {\n            key: \"getHeight\",\n            value: function getHeight() {\n              return this.params.height;\n            }\n            /**\n             * Set the height of the waveform.\n             *\n             * @param {number} height Height measured in pixels.\n             * @example wavesurfer.setHeight(200);\n             */\n\n          }, {\n            key: \"setHeight\",\n            value: function setHeight(height) {\n              this.params.height = height;\n              this.drawer.setHeight(height * this.params.pixelRatio);\n              this.drawBuffer();\n            }\n            /**\n             * Get the correct peaks for current wave view-port and render wave\n             *\n             * @private\n             * @emits WaveSurfer#redraw\n             */\n\n          }, {\n            key: \"drawBuffer\",\n            value: function drawBuffer() {\n              var nominalWidth = Math.round(this.getDuration() * this.params.minPxPerSec * this.params.pixelRatio);\n              var parentWidth = this.drawer.getWidth();\n              var width = nominalWidth; // always start at 0 after zooming for scrolling : issue redraw left part\n\n              var start = 0;\n              var end = Math.max(start + parentWidth, width); // Fill container\n\n              if (this.params.fillParent && (!this.params.scrollParent || nominalWidth < parentWidth)) {\n                width = parentWidth;\n                start = 0;\n                end = width;\n              }\n\n              var peaks;\n\n              if (this.params.partialRender) {\n                var newRanges = this.peakCache.addRangeToPeakCache(width, start, end);\n                var i;\n\n                for (i = 0; i < newRanges.length; i++) {\n                  peaks = this.backend.getPeaks(width, newRanges[i][0], newRanges[i][1]);\n                  this.drawer.drawPeaks(peaks, width, newRanges[i][0], newRanges[i][1]);\n                }\n              } else {\n                peaks = this.backend.getPeaks(width, start, end);\n                this.drawer.drawPeaks(peaks, width, start, end);\n              }\n\n              this.fireEvent('redraw', peaks, width);\n            }\n            /**\n             * Horizontally zooms the waveform in and out. It also changes the parameter\n             * `minPxPerSec` and enables the `scrollParent` option. Calling the function\n             * with a falsey parameter will reset the zoom state.\n             *\n             * @param {?number} pxPerSec Number of horizontal pixels per second of\n             * audio, if none is set the waveform returns to unzoomed state\n             * @emits WaveSurfer#zoom\n             * @example wavesurfer.zoom(20);\n             */\n\n          }, {\n            key: \"zoom\",\n            value: function zoom(pxPerSec) {\n              if (!pxPerSec) {\n                this.params.minPxPerSec = this.defaultParams.minPxPerSec;\n                this.params.scrollParent = false;\n              } else {\n                this.params.minPxPerSec = pxPerSec;\n                this.params.scrollParent = true;\n              }\n\n              this.drawBuffer();\n              this.drawer.progress(this.backend.getPlayedPercents());\n              this.drawer.recenter(this.getCurrentTime() / this.getDuration());\n              this.fireEvent('zoom', pxPerSec);\n            }\n            /**\n             * Decode buffer and load\n             *\n             * @private\n             * @param {ArrayBuffer} arraybuffer Buffer to process\n             */\n\n          }, {\n            key: \"loadArrayBuffer\",\n            value: function loadArrayBuffer(arraybuffer) {\n              var _this9 = this;\n\n              this.decodeArrayBuffer(arraybuffer, function (data) {\n                if (!_this9.isDestroyed) {\n                  _this9.loadDecodedBuffer(data);\n                }\n              });\n            }\n            /**\n             * Directly load an externally decoded AudioBuffer\n             *\n             * @private\n             * @param {AudioBuffer} buffer Buffer to process\n             * @emits WaveSurfer#ready\n             */\n\n          }, {\n            key: \"loadDecodedBuffer\",\n            value: function loadDecodedBuffer(buffer) {\n              this.backend.load(buffer);\n              this.drawBuffer();\n              this.isReady = true;\n              this.fireEvent('ready');\n            }\n            /**\n             * Loads audio data from a Blob or File object\n             *\n             * @param {Blob|File} blob Audio data\n             * @example\n             */\n\n          }, {\n            key: \"loadBlob\",\n            value: function loadBlob(blob) {\n              var _this10 = this; // Create file reader\n\n\n              var reader = new FileReader();\n              reader.addEventListener('progress', function (e) {\n                return _this10.onProgress(e);\n              });\n              reader.addEventListener('load', function (e) {\n                return _this10.loadArrayBuffer(e.target.result);\n              });\n              reader.addEventListener('error', function () {\n                return _this10.fireEvent('error', 'Error reading file');\n              });\n              reader.readAsArrayBuffer(blob);\n              this.empty();\n            }\n            /**\n             * Loads audio and re-renders the waveform.\n             *\n             * @param {string|HTMLMediaElement} url The url of the audio file or the\n             * audio element with the audio\n             * @param {number[]|Number.<Array[]>} peaks Wavesurfer does not have to decode\n             * the audio to render the waveform if this is specified\n             * @param {?string} preload (Use with backend `MediaElement` and `MediaElementWebAudio`)\n             * `'none'|'metadata'|'auto'` Preload attribute for the media element\n             * @param {?number} duration The duration of the audio. This is used to\n             * render the peaks data in the correct size for the audio duration (as\n             * befits the current `minPxPerSec` and zoom value) without having to decode\n             * the audio.\n             * @returns {void}\n             * @throws Will throw an error if the `url` argument is empty.\n             * @example\n             * // uses fetch or media element to load file (depending on backend)\n             * wavesurfer.load('http://example.com/demo.wav');\n             *\n             * // setting preload attribute with media element backend and supplying\n             * // peaks\n             * wavesurfer.load(\n             *   'http://example.com/demo.wav',\n             *   [0.0218, 0.0183, 0.0165, 0.0198, 0.2137, 0.2888],\n             *   true\n             * );\n             */\n\n          }, {\n            key: \"load\",\n            value: function load(url, peaks, preload, duration) {\n              if (!url) {\n                throw new Error('url parameter cannot be empty');\n              }\n\n              this.empty();\n\n              if (preload) {\n                // check whether the preload attribute will be usable and if not log\n                // a warning listing the reasons why not and nullify the variable\n                var preloadIgnoreReasons = {\n                  \"Preload is not 'auto', 'none' or 'metadata'\": ['auto', 'metadata', 'none'].indexOf(preload) === -1,\n                  'Peaks are not provided': !peaks,\n                  \"Backend is not of type 'MediaElement' or 'MediaElementWebAudio'\": ['MediaElement', 'MediaElementWebAudio'].indexOf(this.params.backend) === -1,\n                  'Url is not of type string': typeof url !== 'string'\n                };\n                var activeReasons = Object.keys(preloadIgnoreReasons).filter(function (reason) {\n                  return preloadIgnoreReasons[reason];\n                });\n\n                if (activeReasons.length) {\n                  // eslint-disable-next-line no-console\n                  console.warn('Preload parameter of wavesurfer.load will be ignored because:\\n\\t- ' + activeReasons.join('\\n\\t- ')); // stop invalid values from being used\n\n                  preload = null;\n                }\n              }\n\n              switch (this.params.backend) {\n                case 'WebAudio':\n                  return this.loadBuffer(url, peaks, duration);\n\n                case 'MediaElement':\n                case 'MediaElementWebAudio':\n                  return this.loadMediaElement(url, peaks, preload, duration);\n              }\n            }\n            /**\n             * Loads audio using Web Audio buffer backend.\n             *\n             * @private\n             * @param {string} url URL of audio file\n             * @param {number[]|Number.<Array[]>} peaks Peaks data\n             * @param {?number} duration Optional duration of audio file\n             * @returns {void}\n             */\n\n          }, {\n            key: \"loadBuffer\",\n            value: function loadBuffer(url, peaks, duration) {\n              var _this11 = this;\n\n              var load = function load(action) {\n                if (action) {\n                  _this11.tmpEvents.push(_this11.once('ready', action));\n                }\n\n                return _this11.getArrayBuffer(url, function (data) {\n                  return _this11.loadArrayBuffer(data);\n                });\n              };\n\n              if (peaks) {\n                this.backend.setPeaks(peaks, duration);\n                this.drawBuffer();\n                this.tmpEvents.push(this.once('interaction', load));\n              } else {\n                return load();\n              }\n            }\n            /**\n             * Either create a media element, or load an existing media element.\n             *\n             * @private\n             * @param {string|HTMLMediaElement} urlOrElt Either a path to a media file, or an\n             * existing HTML5 Audio/Video Element\n             * @param {number[]|Number.<Array[]>} peaks Array of peaks. Required to bypass web audio\n             * dependency\n             * @param {?boolean} preload Set to true if the preload attribute of the\n             * audio element should be enabled\n             * @param {?number} duration Optional duration of audio file\n             */\n\n          }, {\n            key: \"loadMediaElement\",\n            value: function loadMediaElement(urlOrElt, peaks, preload, duration) {\n              var _this12 = this;\n\n              var url = urlOrElt;\n\n              if (typeof urlOrElt === 'string') {\n                this.backend.load(url, this.mediaContainer, peaks, preload);\n              } else {\n                var elt = urlOrElt;\n                this.backend.loadElt(elt, peaks); // If peaks are not provided,\n                // url = element.src so we can get peaks with web audio\n\n                url = elt.src;\n              }\n\n              this.tmpEvents.push(this.backend.once('canplay', function () {\n                // ignore when backend was already destroyed\n                if (!_this12.backend.destroyed) {\n                  _this12.drawBuffer();\n\n                  _this12.isReady = true;\n\n                  _this12.fireEvent('ready');\n                }\n              }), this.backend.once('error', function (err) {\n                return _this12.fireEvent('error', err);\n              })); // If no pre-decoded peaks provided or pre-decoded peaks are\n              // provided with forceDecode flag, attempt to download the\n              // audio file and decode it with Web Audio.\n\n              if (peaks) {\n                this.backend.setPeaks(peaks, duration);\n              }\n\n              if ((!peaks || this.params.forceDecode) && this.backend.supportsWebAudio()) {\n                this.getArrayBuffer(url, function (arraybuffer) {\n                  _this12.decodeArrayBuffer(arraybuffer, function (buffer) {\n                    _this12.backend.buffer = buffer;\n\n                    _this12.backend.setPeaks(null);\n\n                    _this12.drawBuffer();\n\n                    _this12.fireEvent('waveform-ready');\n                  });\n                });\n              }\n            }\n            /**\n             * Decode an array buffer and pass data to a callback\n             *\n             * @private\n             * @param {Object} arraybuffer The array buffer to decode\n             * @param {function} callback The function to call on complete\n             */\n\n          }, {\n            key: \"decodeArrayBuffer\",\n            value: function decodeArrayBuffer(arraybuffer, callback) {\n              var _this13 = this;\n\n              this.arraybuffer = arraybuffer;\n              this.backend.decodeArrayBuffer(arraybuffer, function (data) {\n                // Only use the decoded data if we haven't been destroyed or\n                // another decode started in the meantime\n                if (!_this13.isDestroyed && _this13.arraybuffer == arraybuffer) {\n                  callback(data);\n                  _this13.arraybuffer = null;\n                }\n              }, function () {\n                return _this13.fireEvent('error', 'Error decoding audiobuffer');\n              });\n            }\n            /**\n             * Load an array buffer using fetch and pass the result to a callback\n             *\n             * @param {string} url The URL of the file object\n             * @param {function} callback The function to call on complete\n             * @returns {util.fetchFile} fetch call\n             * @private\n             */\n\n          }, {\n            key: \"getArrayBuffer\",\n            value: function getArrayBuffer(url, callback) {\n              var _this14 = this;\n\n              var options = Object.assign({\n                url: url,\n                responseType: 'arraybuffer'\n              }, this.params.xhr);\n              var request = util.fetchFile(options);\n              this.currentRequest = request;\n              this.tmpEvents.push(request.on('progress', function (e) {\n                _this14.onProgress(e);\n              }), request.on('success', function (data) {\n                callback(data);\n                _this14.currentRequest = null;\n              }), request.on('error', function (e) {\n                _this14.fireEvent('error', e);\n\n                _this14.currentRequest = null;\n              }));\n              return request;\n            }\n            /**\n             * Called while the audio file is loading\n             *\n             * @private\n             * @param {Event} e Progress event\n             * @emits WaveSurfer#loading\n             */\n\n          }, {\n            key: \"onProgress\",\n            value: function onProgress(e) {\n              var percentComplete;\n\n              if (e.lengthComputable) {\n                percentComplete = e.loaded / e.total;\n              } else {\n                // Approximate progress with an asymptotic\n                // function, and assume downloads in the 1-3 MB range.\n                percentComplete = e.loaded / (e.loaded + 1000000);\n              }\n\n              this.fireEvent('loading', Math.round(percentComplete * 100), e.target);\n            }\n            /**\n             * Exports PCM data into a JSON array and opens in a new window.\n             *\n             * @param {number} length=1024 The scale in which to export the peaks\n             * @param {number} accuracy=10000\n             * @param {?boolean} noWindow Set to true to disable opening a new\n             * window with the JSON\n             * @param {number} start Start index\n             * @param {number} end End index\n             * @return {Promise} Promise that resolves with array of peaks\n             */\n\n          }, {\n            key: \"exportPCM\",\n            value: function exportPCM(length, accuracy, noWindow, start, end) {\n              length = length || 1024;\n              start = start || 0;\n              accuracy = accuracy || 10000;\n              noWindow = noWindow || false;\n              var peaks = this.backend.getPeaks(length, start, end);\n              var arr = [].map.call(peaks, function (val) {\n                return Math.round(val * accuracy) / accuracy;\n              });\n              return new Promise(function (resolve, reject) {\n                var json = JSON.stringify(arr);\n\n                if (!noWindow) {\n                  window.open('data:application/json;charset=utf-8,' + encodeURIComponent(json));\n                }\n\n                resolve(json);\n              });\n            }\n            /**\n             * Save waveform image as data URI.\n             *\n             * The default format is `'image/png'`. Other supported types are\n             * `'image/jpeg'` and `'image/webp'`.\n             *\n             * @param {string} format='image/png' A string indicating the image format.\n             * The default format type is `'image/png'`.\n             * @param {number} quality=1 A number between 0 and 1 indicating the image\n             * quality to use for image formats that use lossy compression such as\n             * `'image/jpeg'`` and `'image/webp'`.\n             * @param {string} type Image data type to return. Either 'dataURL' (default)\n             * or 'blob'.\n             * @return {string|string[]|Promise} When using `'dataURL'` type this returns\n             * a single data URL or an array of data URLs, one for each canvas. When using\n             * `'blob'` type this returns a `Promise` resolving with an array of `Blob`\n             * instances, one for each canvas.\n             */\n\n          }, {\n            key: \"exportImage\",\n            value: function exportImage(format, quality, type) {\n              if (!format) {\n                format = 'image/png';\n              }\n\n              if (!quality) {\n                quality = 1;\n              }\n\n              if (!type) {\n                type = 'dataURL';\n              }\n\n              return this.drawer.getImage(format, quality, type);\n            }\n            /**\n             * Cancel any fetch request currently in progress\n             */\n\n          }, {\n            key: \"cancelAjax\",\n            value: function cancelAjax() {\n              if (this.currentRequest && this.currentRequest.controller) {\n                this.currentRequest.controller.abort();\n                this.currentRequest = null;\n              }\n            }\n            /**\n             * @private\n             */\n\n          }, {\n            key: \"clearTmpEvents\",\n            value: function clearTmpEvents() {\n              this.tmpEvents.forEach(function (e) {\n                return e.un();\n              });\n            }\n            /**\n             * Display empty waveform.\n             */\n\n          }, {\n            key: \"empty\",\n            value: function empty() {\n              if (!this.backend.isPaused()) {\n                this.stop();\n                this.backend.disconnectSource();\n              }\n\n              this.isReady = false;\n              this.cancelAjax();\n              this.clearTmpEvents(); // empty drawer\n\n              this.drawer.progress(0);\n              this.drawer.setWidth(0);\n              this.drawer.drawPeaks({\n                length: this.drawer.getWidth()\n              }, 0);\n            }\n            /**\n             * Remove events, elements and disconnect WebAudio nodes.\n             *\n             * @emits WaveSurfer#destroy\n             */\n\n          }, {\n            key: \"destroy\",\n            value: function destroy() {\n              this.destroyAllPlugins();\n              this.fireEvent('destroy');\n              this.cancelAjax();\n              this.clearTmpEvents();\n              this.unAll();\n\n              if (this.params.responsive !== false) {\n                window.removeEventListener('resize', this._onResize, true);\n                window.removeEventListener('orientationchange', this._onResize, true);\n              }\n\n              if (this.backend) {\n                this.backend.destroy();\n              }\n\n              if (this.drawer) {\n                this.drawer.destroy();\n              }\n\n              this.isDestroyed = true;\n              this.isReady = false;\n              this.arraybuffer = null;\n            }\n          }]);\n\n          return WaveSurfer;\n        }(util.Observer);\n\n        exports.default = WaveSurfer;\n        WaveSurfer.VERSION = \"3.3.0\";\n        WaveSurfer.util = util;\n        module.exports = exports.default;\n        /***/\n      },\n\n      /***/\n      \"./src/webaudio.js\":\n      /*!*************************!*\\\n        !*** ./src/webaudio.js ***!\n        \\*************************/\n\n      /*! no static exports found */\n\n      /***/\n      function (module, exports, __webpack_require__) {\n        \"use strict\";\n\n        Object.defineProperty(exports, \"__esModule\", {\n          value: true\n        });\n        exports.default = void 0;\n\n        var util = _interopRequireWildcard(__webpack_require__(\n        /*! ./util */\n        \"./src/util/index.js\"));\n\n        function _getRequireWildcardCache() {\n          if (typeof WeakMap !== \"function\") return null;\n          var cache = new WeakMap();\n\n          _getRequireWildcardCache = function _getRequireWildcardCache() {\n            return cache;\n          };\n\n          return cache;\n        }\n\n        function _interopRequireWildcard(obj) {\n          if (obj && obj.__esModule) {\n            return obj;\n          }\n\n          if (obj === null || _typeof(obj) !== \"object\" && typeof obj !== \"function\") {\n            return {\n              default: obj\n            };\n          }\n\n          var cache = _getRequireWildcardCache();\n\n          if (cache && cache.has(obj)) {\n            return cache.get(obj);\n          }\n\n          var newObj = {};\n          var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;\n\n          for (var key in obj) {\n            if (Object.prototype.hasOwnProperty.call(obj, key)) {\n              var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;\n\n              if (desc && (desc.get || desc.set)) {\n                Object.defineProperty(newObj, key, desc);\n              } else {\n                newObj[key] = obj[key];\n              }\n            }\n          }\n\n          newObj.default = obj;\n\n          if (cache) {\n            cache.set(obj, newObj);\n          }\n\n          return newObj;\n        }\n\n        function _typeof(obj) {\n          if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n            _typeof = function _typeof(obj) {\n              return typeof obj;\n            };\n          } else {\n            _typeof = function _typeof(obj) {\n              return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n            };\n          }\n\n          return _typeof(obj);\n        }\n\n        function _defineProperty(obj, key, value) {\n          if (key in obj) {\n            Object.defineProperty(obj, key, {\n              value: value,\n              enumerable: true,\n              configurable: true,\n              writable: true\n            });\n          } else {\n            obj[key] = value;\n          }\n\n          return obj;\n        }\n\n        function _classCallCheck(instance, Constructor) {\n          if (!(instance instanceof Constructor)) {\n            throw new TypeError(\"Cannot call a class as a function\");\n          }\n        }\n\n        function _possibleConstructorReturn(self, call) {\n          if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {\n            return call;\n          }\n\n          return _assertThisInitialized(self);\n        }\n\n        function _assertThisInitialized(self) {\n          if (self === void 0) {\n            throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n          }\n\n          return self;\n        }\n\n        function _getPrototypeOf(o) {\n          _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n            return o.__proto__ || Object.getPrototypeOf(o);\n          };\n          return _getPrototypeOf(o);\n        }\n\n        function _defineProperties(target, props) {\n          for (var i = 0; i < props.length; i++) {\n            var descriptor = props[i];\n            descriptor.enumerable = descriptor.enumerable || false;\n            descriptor.configurable = true;\n            if (\"value\" in descriptor) descriptor.writable = true;\n            Object.defineProperty(target, descriptor.key, descriptor);\n          }\n        }\n\n        function _createClass(Constructor, protoProps, staticProps) {\n          if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n          if (staticProps) _defineProperties(Constructor, staticProps);\n          return Constructor;\n        }\n\n        function _inherits(subClass, superClass) {\n          if (typeof superClass !== \"function\" && superClass !== null) {\n            throw new TypeError(\"Super expression must either be null or a function\");\n          }\n\n          subClass.prototype = Object.create(superClass && superClass.prototype, {\n            constructor: {\n              value: subClass,\n              writable: true,\n              configurable: true\n            }\n          });\n          if (superClass) _setPrototypeOf(subClass, superClass);\n        }\n\n        function _setPrototypeOf(o, p) {\n          _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n            o.__proto__ = p;\n            return o;\n          };\n\n          return _setPrototypeOf(o, p);\n        } // using constants to prevent someone writing the string wrong\n\n\n        var PLAYING = 'playing';\n        var PAUSED = 'paused';\n        var FINISHED = 'finished';\n        /**\n         * WebAudio backend\n         *\n         * @extends {Observer}\n         */\n\n        var WebAudio =\n        /*#__PURE__*/\n        function (_util$Observer) {\n          _inherits(WebAudio, _util$Observer);\n\n          _createClass(WebAudio, [{\n            key: \"supportsWebAudio\",\n\n            /** scriptBufferSize: size of the processing buffer */\n\n            /** audioContext: allows to process audio with WebAudio API */\n\n            /** @private */\n\n            /** @private */\n\n            /**\n             * Does the browser support this backend\n             *\n             * @return {boolean} Whether or not this browser supports this backend\n             */\n            value: function supportsWebAudio() {\n              return !!(window.AudioContext || window.webkitAudioContext);\n            }\n            /**\n             * Get the audio context used by this backend or create one\n             *\n             * @return {AudioContext} Existing audio context, or creates a new one\n             */\n\n          }, {\n            key: \"getAudioContext\",\n            value: function getAudioContext() {\n              if (!window.WaveSurferAudioContext) {\n                window.WaveSurferAudioContext = new (window.AudioContext || window.webkitAudioContext)();\n              }\n\n              return window.WaveSurferAudioContext;\n            }\n            /**\n             * Get the offline audio context used by this backend or create one\n             *\n             * @param {number} sampleRate The sample rate to use\n             * @return {OfflineAudioContext} Existing offline audio context, or creates\n             * a new one\n             */\n\n          }, {\n            key: \"getOfflineAudioContext\",\n            value: function getOfflineAudioContext(sampleRate) {\n              if (!window.WaveSurferOfflineAudioContext) {\n                window.WaveSurferOfflineAudioContext = new (window.OfflineAudioContext || window.webkitOfflineAudioContext)(1, 2, sampleRate);\n              }\n\n              return window.WaveSurferOfflineAudioContext;\n            }\n            /**\n             * Construct the backend\n             *\n             * @param {WavesurferParams} params Wavesurfer parameters\n             */\n\n          }]);\n\n          function WebAudio(params) {\n            var _this$stateBehaviors, _this$states;\n\n            var _this;\n\n            _classCallCheck(this, WebAudio);\n\n            _this = _possibleConstructorReturn(this, _getPrototypeOf(WebAudio).call(this));\n            /** @private */\n\n            _this.audioContext = null;\n            _this.offlineAudioContext = null;\n            _this.stateBehaviors = (_this$stateBehaviors = {}, _defineProperty(_this$stateBehaviors, PLAYING, {\n              init: function init() {\n                this.addOnAudioProcess();\n              },\n              getPlayedPercents: function getPlayedPercents() {\n                var duration = this.getDuration();\n                return this.getCurrentTime() / duration || 0;\n              },\n              getCurrentTime: function getCurrentTime() {\n                return this.startPosition + this.getPlayedTime();\n              }\n            }), _defineProperty(_this$stateBehaviors, PAUSED, {\n              init: function init() {\n                this.removeOnAudioProcess();\n              },\n              getPlayedPercents: function getPlayedPercents() {\n                var duration = this.getDuration();\n                return this.getCurrentTime() / duration || 0;\n              },\n              getCurrentTime: function getCurrentTime() {\n                return this.startPosition;\n              }\n            }), _defineProperty(_this$stateBehaviors, FINISHED, {\n              init: function init() {\n                this.removeOnAudioProcess();\n                this.fireEvent('finish');\n              },\n              getPlayedPercents: function getPlayedPercents() {\n                return 1;\n              },\n              getCurrentTime: function getCurrentTime() {\n                return this.getDuration();\n              }\n            }), _this$stateBehaviors);\n            _this.params = params;\n            /** ac: Audio Context instance */\n\n            _this.ac = params.audioContext || (_this.supportsWebAudio() ? _this.getAudioContext() : {});\n            /**@private */\n\n            _this.lastPlay = _this.ac.currentTime;\n            /** @private */\n\n            _this.startPosition = 0;\n            /** @private */\n\n            _this.scheduledPause = null;\n            /** @private */\n\n            _this.states = (_this$states = {}, _defineProperty(_this$states, PLAYING, Object.create(_this.stateBehaviors[PLAYING])), _defineProperty(_this$states, PAUSED, Object.create(_this.stateBehaviors[PAUSED])), _defineProperty(_this$states, FINISHED, Object.create(_this.stateBehaviors[FINISHED])), _this$states);\n            /** @private */\n\n            _this.buffer = null;\n            /** @private */\n\n            _this.filters = [];\n            /** gainNode: allows to control audio volume */\n\n            _this.gainNode = null;\n            /** @private */\n\n            _this.mergedPeaks = null;\n            /** @private */\n\n            _this.offlineAc = null;\n            /** @private */\n\n            _this.peaks = null;\n            /** @private */\n\n            _this.playbackRate = 1;\n            /** analyser: provides audio analysis information */\n\n            _this.analyser = null;\n            /** scriptNode: allows processing audio */\n\n            _this.scriptNode = null;\n            /** @private */\n\n            _this.source = null;\n            /** @private */\n\n            _this.splitPeaks = [];\n            /** @private */\n\n            _this.state = null;\n            /** @private */\n\n            _this.explicitDuration = params.duration;\n            /**\n             * Boolean indicating if the backend was destroyed.\n             */\n\n            _this.destroyed = false;\n            return _this;\n          }\n          /**\n           * Initialise the backend, called in `wavesurfer.createBackend()`\n           */\n\n\n          _createClass(WebAudio, [{\n            key: \"init\",\n            value: function init() {\n              this.createVolumeNode();\n              this.createScriptNode();\n              this.createAnalyserNode();\n              this.setState(PAUSED);\n              this.setPlaybackRate(this.params.audioRate);\n              this.setLength(0);\n            }\n            /** @private */\n\n          }, {\n            key: \"disconnectFilters\",\n            value: function disconnectFilters() {\n              if (this.filters) {\n                this.filters.forEach(function (filter) {\n                  filter && filter.disconnect();\n                });\n                this.filters = null; // Reconnect direct path\n\n                this.analyser.connect(this.gainNode);\n              }\n            }\n            /**\n             * @private\n             *\n             * @param {string} state The new state\n             */\n\n          }, {\n            key: \"setState\",\n            value: function setState(state) {\n              if (this.state !== this.states[state]) {\n                this.state = this.states[state];\n                this.state.init.call(this);\n              }\n            }\n            /**\n             * Unpacked `setFilters()`\n             *\n             * @param {...AudioNode} filters One or more filters to set\n             */\n\n          }, {\n            key: \"setFilter\",\n            value: function setFilter() {\n              for (var _len = arguments.length, filters = new Array(_len), _key = 0; _key < _len; _key++) {\n                filters[_key] = arguments[_key];\n              }\n\n              this.setFilters(filters);\n            }\n            /**\n             * Insert custom Web Audio nodes into the graph\n             *\n             * @param {AudioNode[]} filters Packed filters array\n             * @example\n             * const lowpass = wavesurfer.backend.ac.createBiquadFilter();\n             * wavesurfer.backend.setFilter(lowpass);\n             */\n\n          }, {\n            key: \"setFilters\",\n            value: function setFilters(filters) {\n              // Remove existing filters\n              this.disconnectFilters(); // Insert filters if filter array not empty\n\n              if (filters && filters.length) {\n                this.filters = filters; // Disconnect direct path before inserting filters\n\n                this.analyser.disconnect(); // Connect each filter in turn\n\n                filters.reduce(function (prev, curr) {\n                  prev.connect(curr);\n                  return curr;\n                }, this.analyser).connect(this.gainNode);\n              }\n            }\n            /** Create ScriptProcessorNode to process audio */\n\n          }, {\n            key: \"createScriptNode\",\n            value: function createScriptNode() {\n              if (this.params.audioScriptProcessor) {\n                this.scriptNode = this.params.audioScriptProcessor;\n              } else {\n                if (this.ac.createScriptProcessor) {\n                  this.scriptNode = this.ac.createScriptProcessor(WebAudio.scriptBufferSize);\n                } else {\n                  this.scriptNode = this.ac.createJavaScriptNode(WebAudio.scriptBufferSize);\n                }\n              }\n\n              this.scriptNode.connect(this.ac.destination);\n            }\n            /** @private */\n\n          }, {\n            key: \"addOnAudioProcess\",\n            value: function addOnAudioProcess() {\n              var _this2 = this;\n\n              this.scriptNode.onaudioprocess = function () {\n                var time = _this2.getCurrentTime();\n\n                if (time >= _this2.getDuration()) {\n                  _this2.setState(FINISHED);\n\n                  _this2.fireEvent('pause');\n                } else if (time >= _this2.scheduledPause) {\n                  _this2.pause();\n                } else if (_this2.state === _this2.states[PLAYING]) {\n                  _this2.fireEvent('audioprocess', time);\n                }\n              };\n            }\n            /** @private */\n\n          }, {\n            key: \"removeOnAudioProcess\",\n            value: function removeOnAudioProcess() {\n              this.scriptNode.onaudioprocess = function () {};\n            }\n            /** Create analyser node to perform audio analysis */\n\n          }, {\n            key: \"createAnalyserNode\",\n            value: function createAnalyserNode() {\n              this.analyser = this.ac.createAnalyser();\n              this.analyser.connect(this.gainNode);\n            }\n            /**\n             * Create the gain node needed to control the playback volume.\n             *\n             */\n\n          }, {\n            key: \"createVolumeNode\",\n            value: function createVolumeNode() {\n              // Create gain node using the AudioContext\n              if (this.ac.createGain) {\n                this.gainNode = this.ac.createGain();\n              } else {\n                this.gainNode = this.ac.createGainNode();\n              } // Add the gain node to the graph\n\n\n              this.gainNode.connect(this.ac.destination);\n            }\n            /**\n             * Set the sink id for the media player\n             *\n             * @param {string} deviceId String value representing audio device id.\n             * @returns {Promise} A Promise that resolves to `undefined` when there\n             * are no errors.\n             */\n\n          }, {\n            key: \"setSinkId\",\n            value: function setSinkId(deviceId) {\n              if (deviceId) {\n                /**\n                 * The webaudio API doesn't currently support setting the device\n                 * output. Here we create an HTMLAudioElement, connect the\n                 * webaudio stream to that element and setSinkId there.\n                 */\n                var audio = new window.Audio();\n\n                if (!audio.setSinkId) {\n                  return Promise.reject(new Error('setSinkId is not supported in your browser'));\n                }\n\n                audio.autoplay = true;\n                var dest = this.ac.createMediaStreamDestination();\n                this.gainNode.disconnect();\n                this.gainNode.connect(dest);\n                audio.srcObject = dest.stream;\n                return audio.setSinkId(deviceId);\n              } else {\n                return Promise.reject(new Error('Invalid deviceId: ' + deviceId));\n              }\n            }\n            /**\n             * Set the audio volume\n             *\n             * @param {number} value A floating point value between 0 and 1.\n             */\n\n          }, {\n            key: \"setVolume\",\n            value: function setVolume(value) {\n              this.gainNode.gain.setValueAtTime(value, this.ac.currentTime);\n            }\n            /**\n             * Get the current volume\n             *\n             * @return {number} value A floating point value between 0 and 1.\n             */\n\n          }, {\n            key: \"getVolume\",\n            value: function getVolume() {\n              return this.gainNode.gain.value;\n            }\n            /**\n             * Decode an array buffer and pass data to a callback\n             *\n             * @private\n             * @param {ArrayBuffer} arraybuffer The array buffer to decode\n             * @param {function} callback The function to call on complete.\n             * @param {function} errback The function to call on error.\n             */\n\n          }, {\n            key: \"decodeArrayBuffer\",\n            value: function decodeArrayBuffer(arraybuffer, callback, errback) {\n              if (!this.offlineAc) {\n                this.offlineAc = this.getOfflineAudioContext(this.ac && this.ac.sampleRate ? this.ac.sampleRate : 44100);\n              }\n\n              this.offlineAc.decodeAudioData(arraybuffer, function (data) {\n                return callback(data);\n              }, errback);\n            }\n            /**\n             * Set pre-decoded peaks\n             *\n             * @param {number[]|Number.<Array[]>} peaks Peaks data\n             * @param {?number} duration Explicit duration\n             */\n\n          }, {\n            key: \"setPeaks\",\n            value: function setPeaks(peaks, duration) {\n              if (duration != null) {\n                this.explicitDuration = duration;\n              }\n\n              this.peaks = peaks;\n            }\n            /**\n             * Set the rendered length (different from the length of the audio)\n             *\n             * @param {number} length The rendered length\n             */\n\n          }, {\n            key: \"setLength\",\n            value: function setLength(length) {\n              // No resize, we can preserve the cached peaks.\n              if (this.mergedPeaks && length == 2 * this.mergedPeaks.length - 1 + 2) {\n                return;\n              }\n\n              this.splitPeaks = [];\n              this.mergedPeaks = []; // Set the last element of the sparse array so the peak arrays are\n              // appropriately sized for other calculations.\n\n              var channels = this.buffer ? this.buffer.numberOfChannels : 1;\n              var c;\n\n              for (c = 0; c < channels; c++) {\n                this.splitPeaks[c] = [];\n                this.splitPeaks[c][2 * (length - 1)] = 0;\n                this.splitPeaks[c][2 * (length - 1) + 1] = 0;\n              }\n\n              this.mergedPeaks[2 * (length - 1)] = 0;\n              this.mergedPeaks[2 * (length - 1) + 1] = 0;\n            }\n            /**\n             * Compute the max and min value of the waveform when broken into <length> subranges.\n             *\n             * @param {number} length How many subranges to break the waveform into.\n             * @param {number} first First sample in the required range.\n             * @param {number} last Last sample in the required range.\n             * @return {number[]|Number.<Array[]>} Array of 2*<length> peaks or array of arrays of\n             * peaks consisting of (max, min) values for each subrange.\n             */\n\n          }, {\n            key: \"getPeaks\",\n            value: function getPeaks(length, first, last) {\n              if (this.peaks) {\n                return this.peaks;\n              }\n\n              if (!this.buffer) {\n                return [];\n              }\n\n              first = first || 0;\n              last = last || length - 1;\n              this.setLength(length);\n\n              if (!this.buffer) {\n                return this.params.splitChannels ? this.splitPeaks : this.mergedPeaks;\n              }\n              /**\n               * The following snippet fixes a buffering data issue on the Safari\n               * browser which returned undefined It creates the missing buffer based\n               * on 1 channel, 4096 samples and the sampleRate from the current\n               * webaudio context 4096 samples seemed to be the best fit for rendering\n               * will review this code once a stable version of Safari TP is out\n               */\n\n\n              if (!this.buffer.length) {\n                var newBuffer = this.createBuffer(1, 4096, this.sampleRate);\n                this.buffer = newBuffer.buffer;\n              }\n\n              var sampleSize = this.buffer.length / length;\n              var sampleStep = ~~(sampleSize / 10) || 1;\n              var channels = this.buffer.numberOfChannels;\n              var c;\n\n              for (c = 0; c < channels; c++) {\n                var peaks = this.splitPeaks[c];\n                var chan = this.buffer.getChannelData(c);\n                var i = void 0;\n\n                for (i = first; i <= last; i++) {\n                  var start = ~~(i * sampleSize);\n                  var end = ~~(start + sampleSize);\n                  var min = 0;\n                  var max = 0;\n                  var j = void 0;\n\n                  for (j = start; j < end; j += sampleStep) {\n                    var value = chan[j];\n\n                    if (value > max) {\n                      max = value;\n                    }\n\n                    if (value < min) {\n                      min = value;\n                    }\n                  }\n\n                  peaks[2 * i] = max;\n                  peaks[2 * i + 1] = min;\n\n                  if (c == 0 || max > this.mergedPeaks[2 * i]) {\n                    this.mergedPeaks[2 * i] = max;\n                  }\n\n                  if (c == 0 || min < this.mergedPeaks[2 * i + 1]) {\n                    this.mergedPeaks[2 * i + 1] = min;\n                  }\n                }\n              }\n\n              return this.params.splitChannels ? this.splitPeaks : this.mergedPeaks;\n            }\n            /**\n             * Get the position from 0 to 1\n             *\n             * @return {number} Position\n             */\n\n          }, {\n            key: \"getPlayedPercents\",\n            value: function getPlayedPercents() {\n              return this.state.getPlayedPercents.call(this);\n            }\n            /** @private */\n\n          }, {\n            key: \"disconnectSource\",\n            value: function disconnectSource() {\n              if (this.source) {\n                this.source.disconnect();\n              }\n            }\n            /**\n             * This is called when wavesurfer is destroyed\n             */\n\n          }, {\n            key: \"destroy\",\n            value: function destroy() {\n              if (!this.isPaused()) {\n                this.pause();\n              }\n\n              this.unAll();\n              this.buffer = null;\n              this.destroyed = true;\n              this.disconnectFilters();\n              this.disconnectSource();\n              this.gainNode.disconnect();\n              this.scriptNode.disconnect();\n              this.analyser.disconnect(); // close the audioContext if closeAudioContext option is set to true\n\n              if (this.params.closeAudioContext) {\n                // check if browser supports AudioContext.close()\n                if (typeof this.ac.close === 'function' && this.ac.state != 'closed') {\n                  this.ac.close();\n                } // clear the reference to the audiocontext\n\n\n                this.ac = null; // clear the actual audiocontext, either passed as param or the\n                // global singleton\n\n                if (!this.params.audioContext) {\n                  window.WaveSurferAudioContext = null;\n                } else {\n                  this.params.audioContext = null;\n                } // clear the offlineAudioContext\n\n\n                window.WaveSurferOfflineAudioContext = null;\n              }\n            }\n            /**\n             * Loaded a decoded audio buffer\n             *\n             * @param {Object} buffer Decoded audio buffer to load\n             */\n\n          }, {\n            key: \"load\",\n            value: function load(buffer) {\n              this.startPosition = 0;\n              this.lastPlay = this.ac.currentTime;\n              this.buffer = buffer;\n              this.createSource();\n            }\n            /** @private */\n\n          }, {\n            key: \"createSource\",\n            value: function createSource() {\n              this.disconnectSource();\n              this.source = this.ac.createBufferSource(); // adjust for old browsers\n\n              this.source.start = this.source.start || this.source.noteGrainOn;\n              this.source.stop = this.source.stop || this.source.noteOff;\n              this.source.playbackRate.setValueAtTime(this.playbackRate, this.ac.currentTime);\n              this.source.buffer = this.buffer;\n              this.source.connect(this.analyser);\n            }\n            /**\n             * Used by `wavesurfer.isPlaying()` and `wavesurfer.playPause()`\n             *\n             * @return {boolean} Whether or not this backend is currently paused\n             */\n\n          }, {\n            key: \"isPaused\",\n            value: function isPaused() {\n              return this.state !== this.states[PLAYING];\n            }\n            /**\n             * Used by `wavesurfer.getDuration()`\n             *\n             * @return {number} Duration of loaded buffer\n             */\n\n          }, {\n            key: \"getDuration\",\n            value: function getDuration() {\n              if (this.explicitDuration) {\n                return this.explicitDuration;\n              }\n\n              if (!this.buffer) {\n                return 0;\n              }\n\n              return this.buffer.duration;\n            }\n            /**\n             * Used by `wavesurfer.seekTo()`\n             *\n             * @param {number} start Position to start at in seconds\n             * @param {number} end Position to end at in seconds\n             * @return {{start: number, end: number}} Object containing start and end\n             * positions\n             */\n\n          }, {\n            key: \"seekTo\",\n            value: function seekTo(start, end) {\n              if (!this.buffer) {\n                return;\n              }\n\n              this.scheduledPause = null;\n\n              if (start == null) {\n                start = this.getCurrentTime();\n\n                if (start >= this.getDuration()) {\n                  start = 0;\n                }\n              }\n\n              if (end == null) {\n                end = this.getDuration();\n              }\n\n              this.startPosition = start;\n              this.lastPlay = this.ac.currentTime;\n\n              if (this.state === this.states[FINISHED]) {\n                this.setState(PAUSED);\n              }\n\n              return {\n                start: start,\n                end: end\n              };\n            }\n            /**\n             * Get the playback position in seconds\n             *\n             * @return {number} The playback position in seconds\n             */\n\n          }, {\n            key: \"getPlayedTime\",\n            value: function getPlayedTime() {\n              return (this.ac.currentTime - this.lastPlay) * this.playbackRate;\n            }\n            /**\n             * Plays the loaded audio region.\n             *\n             * @param {number} start Start offset in seconds, relative to the beginning\n             * of a clip.\n             * @param {number} end When to stop relative to the beginning of a clip.\n             */\n\n          }, {\n            key: \"play\",\n            value: function play(start, end) {\n              if (!this.buffer) {\n                return;\n              } // need to re-create source on each playback\n\n\n              this.createSource();\n              var adjustedTime = this.seekTo(start, end);\n              start = adjustedTime.start;\n              end = adjustedTime.end;\n              this.scheduledPause = end;\n              this.source.start(0, start);\n\n              if (this.ac.state == 'suspended') {\n                this.ac.resume && this.ac.resume();\n              }\n\n              this.setState(PLAYING);\n              this.fireEvent('play');\n            }\n            /**\n             * Pauses the loaded audio.\n             */\n\n          }, {\n            key: \"pause\",\n            value: function pause() {\n              this.scheduledPause = null;\n              this.startPosition += this.getPlayedTime();\n              this.source && this.source.stop(0);\n              this.setState(PAUSED);\n              this.fireEvent('pause');\n            }\n            /**\n             * Returns the current time in seconds relative to the audio-clip's\n             * duration.\n             *\n             * @return {number} The current time in seconds\n             */\n\n          }, {\n            key: \"getCurrentTime\",\n            value: function getCurrentTime() {\n              return this.state.getCurrentTime.call(this);\n            }\n            /**\n             * Returns the current playback rate. (0=no playback, 1=normal playback)\n             *\n             * @return {number} The current playback rate\n             */\n\n          }, {\n            key: \"getPlaybackRate\",\n            value: function getPlaybackRate() {\n              return this.playbackRate;\n            }\n            /**\n             * Set the audio source playback rate.\n             *\n             * @param {number} value The playback rate to use\n             */\n\n          }, {\n            key: \"setPlaybackRate\",\n            value: function setPlaybackRate(value) {\n              value = value || 1;\n\n              if (this.isPaused()) {\n                this.playbackRate = value;\n              } else {\n                this.pause();\n                this.playbackRate = value;\n                this.play();\n              }\n            }\n            /**\n             * Set a point in seconds for playback to stop at.\n             *\n             * @param {number} end Position to end at\n             * @version 3.3.0\n             */\n\n          }, {\n            key: \"setPlayEnd\",\n            value: function setPlayEnd(end) {\n              this.scheduledPause = end;\n            }\n          }]);\n\n          return WebAudio;\n        }(util.Observer);\n\n        exports.default = WebAudio;\n        WebAudio.scriptBufferSize = 256;\n        module.exports = exports.default;\n        /***/\n      }\n      /******/\n\n    })\n  );\n});","map":{"version":3,"sources":["webpack://WaveSurfer/webpack/universalModuleDefinition","webpack://WaveSurfer/webpack/bootstrap","webpack://WaveSurfer/node_modules/debounce/index.js","webpack://WaveSurfer/src/drawer.canvasentry.js","webpack://WaveSurfer/src/drawer.js","webpack://WaveSurfer/src/drawer.multicanvas.js","webpack://WaveSurfer/src/mediaelement-webaudio.js","webpack://WaveSurfer/src/mediaelement.js","webpack://WaveSurfer/src/peakcache.js","webpack://WaveSurfer/src/util/ajax.js","webpack://WaveSurfer/src/util/extend.js","webpack://WaveSurfer/src/util/fetch.js","webpack://WaveSurfer/src/util/frame.js","webpack://WaveSurfer/src/util/get-id.js","webpack://WaveSurfer/src/util/index.js","webpack://WaveSurfer/src/util/max.js","webpack://WaveSurfer/src/util/min.js","webpack://WaveSurfer/src/util/observer.js","webpack://WaveSurfer/src/util/prevent-click.js","webpack://WaveSurfer/src/util/request-animation-frame.js","webpack://WaveSurfer/src/util/style.js","webpack://WaveSurfer/src/wavesurfer.js","webpack://WaveSurfer/src/webaudio.js"],"names":["CanvasEntry","element","elementWidth","totalWidth","width","height","elementSize","waveColor","progressColor","x","y","radius","ctx","peaks","absmax","halfH","offsetY","start","end","length","first","Math","last","canvasStart","canvasEnd","scale","halfOffset","absmaxHalf","i","peak","h","j","format","quality","type","Drawer","util","Observer","params","el","styles","document","display","position","userSelect","webkitUserSelect","overflowX","overflowY","e","noPrevent","clientX","bbox","nominalWidth","parentWidth","progress","scrollbarHeight","percent","immediate","scrollLeft","half","maxScroll","target","offset","rate","pixelRatio","minPxDelta","pos","newPos","channelIndex","MultiCanvas","zIndex","left","top","bottom","overflow","boxSizing","borderRightStyle","pointerEvents","borderRightWidth","borderRightColor","cursorColor","requiredCanvases","canvasWidth","lastCanvas","entry","leftOffset","lastEntry","hasMinVals","peakIndexScale","bar","gap","step","reflectedPeaks","len","startCanvas","endCanvas","intersection","x1","y1","x2","y2","fn","channels","max","min","val","images","MediaElementWebAudio","MediaElement","media","mediaElement","WebAudio","currentTime","duration","paused","playbackRate","play","pause","volume","Object","onAudioProcess","url","container","preload","prevMedia","elt","value","promise","time","deviceId","Promise","PeakCache","uncachedRanges","item","arr","a","uncachedRangePairs","peakCacheRangePairs","instance","xhr","fired100","options","header","sources","console","dest","source","ProgressHandler","response","parseInt","controller","read","done","loaded","total","lengthComputable","fetchHeaders","fetchRequest","responseType","fetchOptions","method","headers","mode","credentials","cache","redirect","referrer","signal","fetch","progressAvailable","contentLength","errMsg","args","func","prefix","largest","values","smallest","Number","event","handlers","name","callback","un","handler","setTimeout","window","PluginClass","WaveSurfer","defaultParams","audioContext","audioScriptProcessor","audioRate","autoCenter","autoCenterRate","autoCenterImmediately","backend","backgroundColor","barHeight","barRadius","barGap","barMinHeight","cursorWidth","dragSelection","drawingContextAttributes","desynchronized","fillParent","forceDecode","hideScrollbar","interact","loopSelection","maxCanvasWidth","mediaContainer","mediaControls","mediaType","minPxPerSec","normalize","partialRender","screen","plugins","removeMediaElementOnDestroy","renderer","responsive","rtl","scrollParent","skipLength","splitChannels","backends","wavesurfer","VERSION","__VERSION__","transform","prevWidth","plugin","Instance","observerPrototypeKeys","newVolume","seconds","isFinite","oldScrollParent","mute","color","background","newRanges","pxPerSec","arraybuffer","buffer","blob","reader","preloadIgnoreReasons","activeReasons","load","urlOrElt","request","percentComplete","accuracy","noWindow","json","JSON","encodeURIComponent","resolve","PLAYING","PAUSED","FINISHED","scriptBufferSize","offlineAudioContext","stateBehaviors","init","getPlayedPercents","getCurrentTime","sampleRate","filter","state","filters","prev","audio","errback","c","newBuffer","sampleSize","sampleStep","chan","adjustedTime"],"mappings":";;;;;AAAA,CAAA,SAAA,gCAAA,CAAA,IAAA,EAAA,OAAA,EAAA;AACA,MAAA,OAAA,OAAA,KAAA,QAAA,IAAA,OAAA,MAAA,KAAA,QAAA,EACA,MAAA,CAAA,OAAA,GAAA,OAAA,EAAA,CADA,KAEA,IAAA,OAAA,MAAA,KAAA,UAAA,IAAA,MAAA,CAAA,GAAA,EACA,MAAA,CAAA,YAAA,EAAA,EAAA,EAAA,OAAA,CAAA,CADA,KAEA,IAAA,OAAA,OAAA,KAAA,QAAA,EACA,OAAA,CAAA,YAAA,CAAA,GAAA,OAAA,EAAA,CADA,KAGA,IAAA,CAAA,YAAA,CAAA,GAAA,OAAA,EAAA;AACC,CATD,EASC,MATD,EASC,YAAA;AACD;;;;;ACVA;AAAA;;AACA;AAAA,UAAA,gBAAA,GAAA,EAAA;;;AAEA;AAAA;;AACA;;AAAA,eAAA,mBAAA,CAAA,QAAA,EAAA;;;AAEA;AAAA;;AACA;AAAA,YAAA,gBAAA,CAAA,QAAA,CAAA,EAAA;AACA;AAAA,iBAAA,gBAAA,CAAA,QAAA,CAAA,CAAA,OAAA;AACA;AAAA;AACA;AAAA;;AACA;;;AAAA,YAAA,MAAA,GAAA,gBAAA,CAAA,QAAA,CAAA,GAAA;AACA;AAAA,UAAA,CAAA,EAAA,QADA;;AAEA;AAAA,UAAA,CAAA,EAAA,KAFA;;AAGA;AAAA,UAAA,OAAA,EAAA;AACA;;AAJA,SAAA;;;AAMA;AAAA;;AACA;;AAAA,QAAA,OAAA,CAAA,QAAA,CAAA,CAAA,IAAA,CAAA,MAAA,CAAA,OAAA,EAAA,MAAA,EAAA,MAAA,CAAA,OAAA,EAAA,mBAAA;;;AAEA;AAAA;;AACA;;AAAA,QAAA,MAAA,CAAA,CAAA,GAAA,IAAA;;;AAEA;AAAA;;AACA;;AAAA,eAAA,MAAA,CAAA,OAAA;AACA;AAAA;;;;;AAGA;AAAA;;AACA;;;AAAA,MAAA,mBAAA,CAAA,CAAA,GAAA,OAAA;;;AAEA;AAAA;;AACA;;AAAA,MAAA,mBAAA,CAAA,CAAA,GAAA,gBAAA;;;AAEA;AAAA;;AACA;;AAAA,MAAA,mBAAA,CAAA,CAAA,GAAA,UAAA,OAAA,EAAA,IAAA,EAAA,MAAA,EAAA;AACA;AAAA,YAAA,CAAA,mBAAA,CAAA,CAAA,CAAA,OAAA,EAAA,IAAA,CAAA,EAAA;AACA;AAAA,UAAA,MAAA,CAAA,cAAA,CAAA,OAAA,EAAA,IAAA,EAAA;AAA0C,YAAA,UAAA,EAAA,IAA1C;AAA0C,YAAA,GAAA,EAAA;AAA1C,WAAA;AACA;AAAA;AACA;;AAAA,OAJA;;;AAMA;AAAA;;AACA;;;AAAA,MAAA,mBAAA,CAAA,CAAA,GAAA,UAAA,OAAA,EAAA;AACA;AAAA,YAAA,OAAA,MAAA,KAAA,WAAA,IAAA,MAAA,CAAA,WAAA,EAAA;AACA;AAAA,UAAA,MAAA,CAAA,cAAA,CAAA,OAAA,EAAA,MAAA,CAAA,WAAA,EAAA;AAAwD,YAAA,KAAA,EAAA;AAAxD,WAAA;AACA;AAAA;AACA;;;AAAA,QAAA,MAAA,CAAA,cAAA,CAAA,OAAA,EAAA,YAAA,EAAA;AAAiD,UAAA,KAAA,EAAA;AAAjD,SAAA;AACA;AAAA,OALA;;;AAOA;AAAA;;AACA;AAAA;;AACA;AAAA;;AACA;AAAA;;AACA;AAAA;;AACA;;;AAAA,MAAA,mBAAA,CAAA,CAAA,GAAA,UAAA,KAAA,EAAA,IAAA,EAAA;AACA;AAAA,YAAA,IAAA,GAAA,CAAA,EAAA,KAAA,GAAA,mBAAA,CAAA,KAAA,CAAA;AACA;;AAAA,YAAA,IAAA,GAAA,CAAA,EAAA,OAAA,KAAA;AACA;;AAAA,YAAA,IAAA,GAAA,CAAA,IAAA,OAAA,KAAA,KAAA,QAAA,IAAA,KAAA,IAAA,KAAA,CAAA,UAAA,EAAA,OAAA,KAAA;AACA;;AAAA,YAAA,EAAA,GAAA,MAAA,CAAA,MAAA,CAAA,IAAA,CAAA;AACA;;AAAA,QAAA,mBAAA,CAAA,CAAA,CAAA,EAAA;AACA;;;AAAA,QAAA,MAAA,CAAA,cAAA,CAAA,EAAA,EAAA,SAAA,EAAA;AAAyC,UAAA,UAAA,EAAA,IAAzC;AAAyC,UAAA,KAAA,EAAA;AAAzC,SAAA;AACA;;AAAA,YAAA,IAAA,GAAA,CAAA,IAAA,OAAA,KAAA,IAAA,QAAA,EAAA,KAAA,IAAA,GAAA,IAAA,KAAA,EAAA,mBAAA,CAAA,CAAA,CAAA,EAAA,EAAA,GAAA,EAAA,UAAA,GAAA,EAAA;AAAgH,iBAAA,KAAA,CAAA,GAAA,CAAA;AAAqB,SAArI,CAAqI,IAArI,CAAqI,IAArI,EAAqI,GAArI,CAAA;AACA;;AAAA,eAAA,EAAA;AACA;AAAA,OATA;;;AAWA;AAAA;;AACA;;;AAAA,MAAA,mBAAA,CAAA,CAAA,GAAA,UAAA,MAAA,EAAA;AACA;AAAA,YAAA,MAAA,GAAA,MAAA,IAAA,MAAA,CAAA,UAAA;AACA;AAAA,iBAAA,UAAA,GAAA;AAA2B,iBAAA,MAAA,CAAA,SAAA,CAAA;AAA4B,SADvD;AAEA;AAAA,iBAAA,gBAAA,GAAA;AAAiC,iBAAA,MAAA;AAAe,SAFhD;AAGA;;AAAA,QAAA,mBAAA,CAAA,CAAA,CAAA,MAAA,EAAA,GAAA,EAAA,MAAA;AACA;;;AAAA,eAAA,MAAA;AACA;AAAA,OANA;;;AAQA;AAAA;;AACA;;;AAAA,MAAA,mBAAA,CAAA,CAAA,GAAA,UAAA,MAAA,EAAA,QAAA,EAAA;AAAsD,eAAA,MAAA,CAAA,SAAA,CAAA,cAAA,CAAA,IAAA,CAAA,MAAA,EAAA,QAAA,CAAA;AAA+D,OAArH;;;AAEA;AAAA;;AACA;;;AAAA,MAAA,mBAAA,CAAA,CAAA,GAAA,EAAA;;;;;AAGA;AAAA;;AACA;;AAAA,aAAA,mBAAA,CAAA,mBAAA,CAAA,CAAA,GAAA,qBAAA,CAAA;;;;;;;;;;;;;;;;;AClFA;;;;;;;;;;;;;;AAcA,iBAAA,QAAA,CAAA,IAAA,EAAA,IAAA,EAAA,SAAA,EAAA;AACA,cAAA,OAAA,EAAA,IAAA,EAAA,OAAA,EAAA,SAAA,EAAA,MAAA;AACA,cAAA,QAAA,IAAA,EAAA,IAAA,GAAA,GAAA;;AAEA,mBAAA,KAAA,GAAA;AACA,gBAAA,IAAA,GAAA,IAAA,CAAA,GAAA,KAAA,SAAA;;AAEA,gBAAA,IAAA,GAAA,IAAA,IAAA,IAAA,IAAA,CAAA,EAAA;AACA,cAAA,OAAA,GAAA,UAAA,CAAA,KAAA,EAAA,IAAA,GAAA,IAAA,CAAA;AACK,aAFL,MAEK;AACL,cAAA,OAAA,GAAA,IAAA;;AACA,kBAAA,CAAA,SAAA,EAAA;AACA,gBAAA,MAAA,GAAA,IAAA,CAAA,KAAA,CAAA,OAAA,EAAA,IAAA,CAAA;AACA,gBAAA,OAAA,GAAA,IAAA,GAAA,IAAA;AACA;AACA;AACA;;AAAA;;AAEA,cAAA,SAAA,GAAA,YAAA;AACA,YAAA,OAAA,GAAA,IAAA;AACA,YAAA,IAAA,GAAA,SAAA;AACA,YAAA,SAAA,GAAA,IAAA,CAAA,GAAA,EAAA;AACA,gBAAA,OAAA,GAAA,SAAA,IAAA,CAAA,OAAA;AACA,gBAAA,CAAA,OAAA,EAAA,OAAA,GAAA,UAAA,CAAA,KAAA,EAAA,IAAA,CAAA;;AACA,gBAAA,OAAA,EAAA;AACA,cAAA,MAAA,GAAA,IAAA,CAAA,KAAA,CAAA,OAAA,EAAA,IAAA,CAAA;AACA,cAAA,OAAA,GAAA,IAAA,GAAA,IAAA;AACA;;AAEA,mBAAA,MAAA;AACA,WAZA;;AAcA,UAAA,SAAA,CAAA,KAAA,GAAA,YAAA;AACA,gBAAA,OAAA,EAAA;AACA,cAAA,YAAA,CAAA,OAAA,CAAA;AACA,cAAA,OAAA,GAAA,IAAA;AACA;AACA,WALA;;AAOA,UAAA,SAAA,CAAA,KAAA,GAAA,YAAA;AACA,gBAAA,OAAA,EAAA;AACA,cAAA,MAAA,GAAA,IAAA,CAAA,KAAA,CAAA,OAAA,EAAA,IAAA,CAAA;AACA,cAAA,OAAA,GAAA,IAAA,GAAA,IAAA;AAEA,cAAA,YAAA,CAAA,OAAA,CAAA;AACA,cAAA,OAAA,GAAA,IAAA;AACA;AACA,WARA;;AAUA,iBAAA,SAAA;AACA;;AAAA,S,CAEA;;AACA,QAAA,QAAA,CAAA,QAAA,GAAA,QAAA;AAEA,QAAA,MAAA,CAAA,OAAA,GAAA,QAAA;;;;;;;;;;;;;;;;;;;;;ACjEA,YAAA,MAAA,GAAA,sBAAA,CAAA,mBAAA;AAAA;AAAA,6BAAA,CAAA,CAAA;;AACA,YAAA,MAAA,GAAA,sBAAA,CAAA,mBAAA;AAAA;AAAA,8BAAA,CAAA,CAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAEA;;;;;;;;;YAOqBA,W;;;AACjB,mBAAA,WAAA,GAAc;AAAA,YAAA,eAAA,CAAA,IAAA,EAAA,WAAA,CAAA;AACV;;;;;;;AAKA,iBAAA,IAAA,GAAA,IAAA;AACA;;;;;;AAKA,iBAAA,OAAA,GAAA,IAAA;AACA;;;;;;AAKA,iBAAA,QAAA,GAAA,IAAA;AACA;;;;;;AAKA,iBAAA,WAAA,GAAA,IAAA;AACA;;;;;;;AAMA,iBAAA,KAAA,GAAA,CAAA;AACA;;;;;;;AAMA,iBAAA,GAAA,GAAA,CAAA;AACA;;;;;;AAKA,iBAAA,EAAA,GAAU,CAAA,GAAA,MAAA,CAAA,OAAA,EAAM,KAAA,WAAA,CAAA,IAAA,CAAA,WAAA,KAAhB,GAAU,CAAV;AACA;;;;;;AAKA,iBAAA,uBAAA,GAAA,EAAA;AACH;AAED;;;;;;;;;qCAKSC,O,EAAS;AACd,mBAAA,IAAA,GAAA,OAAA;AACA,mBAAA,OAAA,GAAe,KAAA,IAAA,CAAA,UAAA,CAAA,IAAA,EAA2B,KAA1C,uBAAe,CAAf;AACH;AAED;;;;;;;;;yCAMaA,O,EAAS;AAClB,mBAAA,QAAA,GAAA,OAAA;AACA,mBAAA,WAAA,GAAmB,KAAA,QAAA,CAAA,UAAA,CAAA,IAAA,EAEf,KAFJ,uBAAmB,CAAnB;AAIH;AAED;;;;;;;;;;;6CAQiBC,Y,EAAcC,U,EAAYC,K,EAAOC,M,EAAQ;AACtD;AACA;AACA,mBAAA,KAAA,GAAa,KAAA,IAAA,CAAA,UAAA,GAAA,UAAA,IAAb,CAAA;AACA,mBAAA,GAAA,GAAW,KAAA,KAAA,GAAaH,YAAY,GAJkB,UAItD,CAJsD,CAMtD;;AACA,mBAAA,IAAA,CAAA,KAAA,GAAA,KAAA;AACA,mBAAA,IAAA,CAAA,MAAA,GAAA,MAAA;AACA,kBAAII,WAAW,GAAG;AAAEF,gBAAAA,KAAK,EAAEF,YAAY,GAAG;AAAxB,eAAlB;AACA,eAAA,GAAA,MAAA,CAAA,OAAA,EAAM,KAAN,IAAA,EAAA,WAAA;;AAEA,kBAAI,KAAJ,iBAAA,EAA4B;AACxB;AACA,qBAAA,QAAA,CAAA,KAAA,GAAA,KAAA;AACA,qBAAA,QAAA,CAAA,MAAA,GAAA,MAAA;AACA,iBAAA,GAAA,MAAA,CAAA,OAAA,EAAM,KAAN,QAAA,EAAA,WAAA;AACH;AACJ;AAED;;;;;;wCAGY;AACR;AACA,mBAAA,OAAA,CAAA,SAAA,CAAA,CAAA,EAAA,CAAA,EAGI,KAAA,OAAA,CAAA,MAAA,CAHJ,KAAA,EAII,KAAA,OAAA,CAAA,MAAA,CANI,MAER,EAFQ,CASR;;AACA,kBAAI,KAAJ,iBAAA,EAA4B;AACxB,qBAAA,WAAA,CAAA,SAAA,CAAA,CAAA,EAAA,CAAA,EAGI,KAAA,WAAA,CAAA,MAAA,CAHJ,KAAA,EAII,KAAA,WAAA,CAAA,MAAA,CAJJ,MAAA;AAMH;AACJ;AAED;;;;;;;;;0CAMcK,S,EAAWC,a,EAAe;AACpC,mBAAA,OAAA,CAAA,SAAA,GAAA,SAAA;;AAEA,kBAAI,KAAJ,iBAAA,EAA4B;AACxB,qBAAA,WAAA,CAAA,SAAA,GAAA,aAAA;AACH;AACJ;AAED;;;;;;;;;;;;sCASUC,C,EAAGC,C,EAAGN,K,EAAOC,M,EAAQM,M,EAAQ;AACnC,mBAAA,iBAAA,CAAuB,KAAvB,OAAA,EAAA,CAAA,EAAA,CAAA,EAAA,KAAA,EAAA,MAAA,EAAA,MAAA;;AAEA,kBAAI,KAAJ,iBAAA,EAA4B;AACxB,qBAAA,iBAAA,CACI,KADJ,WAAA,EAAA,CAAA,EAAA,CAAA,EAAA,KAAA,EAAA,MAAA,EAAA,MAAA;AAQH;AACJ;AAED;;;;;;;;;;;;;;8CAWkBC,G,EAAKH,C,EAAGC,C,EAAGN,K,EAAOC,M,EAAQM,M,EAAQ;AAChD,kBAAI,CAAJ,GAAA,EAAU;AACN;AACH;;AAED,kBAAA,MAAA,EAAY;AACR,qBAAA,eAAA,CAAA,GAAA,EAAA,CAAA,EAAA,CAAA,EAAA,KAAA,EAAA,MAAA,EAAA,MAAA;AADJ,eAAA,MAEO;AACHC,gBAAAA,GAAG,CAAHA,QAAAA,CAAAA,CAAAA,EAAAA,CAAAA,EAAAA,KAAAA,EAAAA,MAAAA;AACH;AACJ;AAED;;;;;;;;;;;;;;;;;4CAcgBA,G,EAAKH,C,EAAGC,C,EAAGN,K,EAAOC,M,EAAQM,M,EAAQ;AAC9C,kBAAIN,MAAM,KAAV,CAAA,EAAkB;AACd;AAF0C,eAAA,CAI9C;AACA;;;AACA,kBAAIA,MAAM,GAAV,CAAA,EAAgB;AACZA,gBAAAA,MAAM,IAAI,CAAVA,CAAAA;AACAK,gBAAAA,CAAC,IAADA,MAAAA;AACH;;AACDE,cAAAA,GAAG,CAAHA,SAAAA;AACAA,cAAAA,GAAG,CAAHA,MAAAA,CAAWH,CAAC,GAAZG,MAAAA,EAAAA,CAAAA;AACAA,cAAAA,GAAG,CAAHA,MAAAA,CAAWH,CAAC,GAADA,KAAAA,GAAXG,MAAAA,EAAAA,CAAAA;AACAA,cAAAA,GAAG,CAAHA,gBAAAA,CAAqBH,CAAC,GAAtBG,KAAAA,EAAAA,CAAAA,EAAmCH,CAAC,GAApCG,KAAAA,EAA8CF,CAAC,GAA/CE,MAAAA;AACAA,cAAAA,GAAG,CAAHA,MAAAA,CAAWH,CAAC,GAAZG,KAAAA,EAAsBF,CAAC,GAADA,MAAAA,GAAtBE,MAAAA;AACAA,cAAAA,GAAG,CAAHA,gBAAAA,CACIH,CAAC,GADLG,KAAAA,EAEIF,CAAC,GAFLE,MAAAA,EAGIH,CAAC,GAADA,KAAAA,GAHJG,MAAAA,EAIIF,CAAC,GAJLE,MAAAA;AAMAA,cAAAA,GAAG,CAAHA,MAAAA,CAAWH,CAAC,GAAZG,MAAAA,EAAuBF,CAAC,GAAxBE,MAAAA;AACAA,cAAAA,GAAG,CAAHA,gBAAAA,CAAAA,CAAAA,EAAwBF,CAAC,GAAzBE,MAAAA,EAAAA,CAAAA,EAAuCF,CAAC,GAADA,MAAAA,GAAvCE,MAAAA;AACAA,cAAAA,GAAG,CAAHA,MAAAA,CAAAA,CAAAA,EAAcF,CAAC,GAAfE,MAAAA;AACAA,cAAAA,GAAG,CAAHA,gBAAAA,CAAAA,CAAAA,EAAAA,CAAAA,EAA2BH,CAAC,GAA5BG,MAAAA,EAAAA,CAAAA;AACAA,cAAAA,GAAG,CAAHA,SAAAA;AACAA,cAAAA,GAAG,CAAHA,IAAAA;AACH;AAED;;;;;;;;;;;;;;;sCAYUC,K,EAAOC,M,EAAQC,K,EAAOC,O,EAASC,K,EAAOC,G,EAAK;AACjD,mBAAA,iBAAA,CACI,KADJ,OAAA,EAAA,KAAA,EAAA,MAAA,EAAA,KAAA,EAAA,OAAA,EAAA,KAAA,EAAA,GAAA;;AAUA,kBAAI,KAAJ,iBAAA,EAA4B;AACxB,qBAAA,iBAAA,CACI,KADJ,WAAA,EAAA,KAAA,EAAA,MAAA,EAAA,KAAA,EAAA,OAAA,EAAA,KAAA,EAAA,GAAA;AASH;AACJ;AAED;;;;;;;;;;;;;;;;;8CAckBN,G,EAAKC,K,EAAOC,M,EAAQC,K,EAAOC,O,EAASC,K,EAAOC,G,EAAK;AAC9D,kBAAI,CAAJ,GAAA,EAAU;AACN;AACH;;AAED,kBAAMC,MAAM,GAAGN,KAAK,CAALA,MAAAA,GAAf,CAAA;AACA,kBAAMO,KAAK,GAAGC,IAAI,CAAJA,KAAAA,CAAWF,MAAM,GAAG,KAN4B,KAMhDE,CAAd,CAN8D,CAQ9D;AACA;;AACA,kBAAMC,IAAI,GAAGD,IAAI,CAAJA,KAAAA,CAAWF,MAAM,GAAG,KAApBE,GAAAA,IAAb,CAAA;AAEA,kBAAME,WAAW,GAAjB,KAAA;AACA,kBAAMC,SAAS,GAAf,IAAA;AACA,kBAAMC,KAAK,GAAG,KAAA,IAAA,CAAA,KAAA,IAAmBD,SAAS,GAATA,WAAAA,GAd6B,CAchD,CAAd,CAd8D,CAgB9D;;AACA,kBAAME,UAAU,GAAGX,KAAK,GAAxB,OAAA;AACA,kBAAMY,UAAU,GAAGb,MAAM,GAAzB,KAAA;AAEAF,cAAAA,GAAG,CAAHA,SAAAA;AACAA,cAAAA,GAAG,CAAHA,MAAAA,CAAW,CAACW,WAAW,GAAZ,KAAA,IAAXX,KAAAA,EAAAA,UAAAA;AAEAA,cAAAA,GAAG,CAAHA,MAAAA,CACI,CAACW,WAAW,GAAZ,KAAA,IADJX,KAAAA,EAEIc,UAAU,GAAGL,IAAI,CAAJA,KAAAA,CAAW,CAACR,KAAK,CAAC,IAANA,WAAK,CAALA,IAAD,CAAA,IAF5BD,UAEiBS,CAFjBT;AAKA,kBAAA,CAAA,EAAA,IAAA,EAAA,CAAA;;AACA,mBAAKgB,CAAC,GAAN,WAAA,EAAsBA,CAAC,GAAvB,SAAA,EAAqCA,CAArC,EAAA,EAA0C;AACtCC,gBAAAA,IAAI,GAAGhB,KAAK,CAAC,IAANA,CAAK,CAALA,IAAPgB,CAAAA;AACAC,gBAAAA,CAAC,GAAGT,IAAI,CAAJA,KAAAA,CAAWQ,IAAI,GAAnBC,UAAIT,CAAJS;AACAlB,gBAAAA,GAAG,CAAHA,MAAAA,CAAW,CAACgB,CAAC,GAAF,KAAA,IAAA,KAAA,GAAsB,KAAjChB,SAAAA,EAAiDc,UAAU,GAA3Dd,CAAAA;AAhC0D,eAAA,CAmC9D;AACA;;;AACA,kBAAImB,CAAC,GAAGP,SAAS,GAAjB,CAAA;;AACA,mBAAA,CAAA,EAAQO,CAAC,IAAT,WAAA,EAA0BA,CAA1B,EAAA,EAA+B;AAC3BF,gBAAAA,IAAI,GAAGhB,KAAK,CAAC,IAAA,CAAA,GAANA,CAAK,CAALA,IAAPgB,CAAAA;AACAC,gBAAAA,CAAC,GAAGT,IAAI,CAAJA,KAAAA,CAAWQ,IAAI,GAAnBC,UAAIT,CAAJS;AACAlB,gBAAAA,GAAG,CAAHA,MAAAA,CAAW,CAACmB,CAAC,GAAF,KAAA,IAAA,KAAA,GAAsB,KAAjCnB,SAAAA,EAAiDc,UAAU,GAA3Dd,CAAAA;AACH;;AAEDA,cAAAA,GAAG,CAAHA,MAAAA,CACI,CAACW,WAAW,GAAZ,KAAA,IADJX,KAAAA,EAEIc,UAAU,GACNL,IAAI,CAAJA,KAAAA,CAAW,CAACR,KAAK,CAAC,IAAA,WAAA,GAANA,CAAK,CAALA,IAAD,CAAA,IAHnBD,UAGQS,CAHRT;AAMAA,cAAAA,GAAG,CAAHA,SAAAA;AACAA,cAAAA,GAAG,CAAHA,IAAAA;AACH;AAED;;;;;;sCAGU;AACN,mBAAA,OAAA,GAAA,IAAA;AACA,mBAAA,IAAA,GAAA,IAAA;AAEA,mBAAA,WAAA,GAAA,IAAA;AACA,mBAAA,QAAA,GAAA,IAAA;AACH;AAED;;;;;;;;;;;;;;;;qCAaSoB,M,EAAQC,O,EAASC,I,EAAM;AAAA,kBAAA,KAAA,GAAA,IAAA;;AAC5B,kBAAIA,IAAI,KAAR,MAAA,EAAqB;AACjB,uBAAO,IAAA,OAAA,CAAY,UAAA,OAAA,EAAW;AAC1B,kBAAA,KAAI,CAAJ,IAAA,CAAA,MAAA,CAAA,OAAA,EAAA,MAAA,EAAA,OAAA;AADJ,iBAAO,CAAP;AADJ,eAAA,MAIO,IAAIA,IAAI,KAAR,SAAA,EAAwB;AAC3B,uBAAO,KAAA,IAAA,CAAA,SAAA,CAAA,MAAA,EAAP,OAAO,CAAP;AACH;AACJ;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC/XL,YAAA,IAAA,GAAA,uBAAA,CAAA,mBAAA;AAAA;AAAA,6BAAA,CAAA,CAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAEA;;;;;;;YAKqBC,M;;;;AACjB;;;;;;AAIA,mBAAA,MAAA,CAAA,SAAA,EAAA,MAAA,EAA+B;AAAA,gBAAA,KAAA;;AAAA,YAAA,eAAA,CAAA,IAAA,EAAA,MAAA,CAAA;;AAC3B,YAAA,KAAA,GAAA,0BAAA,CAAA,IAAA,EAAA,eAAA,CAAA,MAAA,CAAA,CAAA,IAAA,CAAA,IAAA,CAAA,CAAA;AACA;;AACA,YAAA,KAAA,CAAA,SAAA,GAAA,SAAA;AACA;;;;;AAIA,YAAA,KAAA,CAAA,MAAA,GAAA,MAAA;AACA;;;;;AAIA,YAAA,KAAA,CAAA,KAAA,GAAA,CAAA;AACA;;;;;AAIA,YAAA,KAAA,CAAA,MAAA,GAAcG,MAAM,CAANA,MAAAA,GAAgB,KAAA,CAAA,MAAA,CAA9B,UAAA;AACA;;AACA,YAAA,KAAA,CAAA,OAAA,GAAA,CAAA;AACA;;;;;AAIA,YAAA,KAAA,CAAA,OAAA,GAAA,IAAA;AAzB2B,mBAAA,KAAA;AA0B9B;AAED;;;;;;;;;;;kCAOMC,E,EAAIC,M,EAAQ;AACd,qBAAOJ,IAAI,CAAJA,KAAAA,CAAAA,EAAAA,EAAP,MAAOA,CAAP;AACH;AAED;;;;;;;4CAIgB;AACZ,mBAAA,OAAA,GAAe,KAAA,SAAA,CAAA,WAAA,CACXK,QAAQ,CAARA,aAAAA,CADJ,MACIA,CADW,CAAf;AAIA,mBAAA,KAAA,CAAW,KAAX,OAAA,EAAyB;AACrBC,gBAAAA,OAAO,EADc,OAAA;AAErBC,gBAAAA,QAAQ,EAFa,UAAA;AAGrBC,gBAAAA,UAAU,EAHW,MAAA;AAIrBC,gBAAAA,gBAAgB,EAJK,MAAA;AAKrBxC,gBAAAA,MAAM,EAAE,KAAA,MAAA,CAAA,MAAA,GAAqB;AALR,eAAzB;;AAQA,kBAAI,KAAA,MAAA,CAAA,UAAA,IAA0B,KAAA,MAAA,CAA9B,YAAA,EAAwD;AACpD,qBAAA,KAAA,CAAW,KAAX,OAAA,EAAyB;AACrBD,kBAAAA,KAAK,EADgB,MAAA;AAErB0C,kBAAAA,SAAS,EAAE,KAAA,MAAA,CAAA,aAAA,GAAA,QAAA,GAFU,MAAA;AAGrBC,kBAAAA,SAAS,EAAE;AAHU,iBAAzB;AAKH;;AAED,mBAAA,kBAAA;AACH;AAED;;;;;;;;;;wCAOYC,C,EAAGC,S,EAAW;AACtB,eAAA,SAAA,IAAcD,CAAC,CAAf,cAAcA,EAAd;AAEA,kBAAME,OAAO,GAAGF,CAAC,CAADA,aAAAA,GACVA,CAAC,CAADA,aAAAA,CAAAA,CAAAA,EADUA,OAAAA,GAEVA,CAAC,CAFP,OAAA;AAGA,kBAAMG,IAAI,GAAG,KAAA,OAAA,CAAb,qBAAa,EAAb;AAEA,kBAAMC,YAAY,GAAG,KAArB,KAAA;AACA,kBAAMC,WAAW,GAAG,KAApB,QAAoB,EAApB;AAEA,kBAAA,QAAA;;AACA,kBAAI,CAAC,KAAA,MAAA,CAAD,UAAA,IAA2BD,YAAY,GAA3C,WAAA,EAA2D;AACvDE,gBAAAA,QAAQ,GACJ,CAAC,KAAA,MAAA,CAAA,GAAA,GAAkBH,IAAI,CAAJA,KAAAA,GAAlB,OAAA,GAAyCD,OAAO,GAAGC,IAAI,CAAxD,IAAA,KACK,KAAA,MAAA,CAAA,UAAA,GADL,YAAA,KADJG,CAAAA;;AAIA,oBAAIA,QAAQ,GAAZ,CAAA,EAAkB;AACdA,kBAAAA,QAAQ,GAARA,CAAAA;AACH;AAPL,eAAA,MAQO;AACHA,gBAAAA,QAAQ,GACJ,CAAC,CAAC,KAAA,MAAA,CAAA,GAAA,GACIH,IAAI,CAAJA,KAAAA,GADJ,OAAA,GAEID,OAAO,GAAGC,IAAI,CAFnB,IAAA,IAGG,KAAA,OAAA,CAHJ,UAAA,IAII,KAAA,OAAA,CAJJ,WAAA,IADJG,CAAAA;AAMH;;AAED,qBAAA,QAAA;AACH;AAED;;;;;;iDAGqB;AAAA,kBAAA,MAAA,GAAA,IAAA;;AACjB,mBAAA,OAAA,CAAA,gBAAA,CAAA,OAAA,EAAuC,UAAA,CAAA,EAAK;AACxC,oBAAMC,eAAe,GACjB,MAAI,CAAJ,OAAA,CAAA,YAAA,GAA4B,MAAI,CAAJ,OAAA,CADhC,YAAA;;AAEA,oBAAIA,eAAe,KAAnB,CAAA,EAA2B;AACvB;AACA,sBAAMJ,IAAI,GAAG,MAAI,CAAJ,OAAA,CAAb,qBAAa,EAAb;;AACA,sBAAIH,CAAC,CAADA,OAAAA,IAAaG,IAAI,CAAJA,MAAAA,GAAjB,eAAA,EAAgD;AAC5C;AACA;AACH;AACJ;;AAED,oBAAI,MAAI,CAAJ,MAAA,CAAJ,QAAA,EAA0B;AACtB,kBAAA,MAAI,CAAJ,SAAA,CAAA,OAAA,EAAA,CAAA,EAA2B,MAAI,CAAJ,WAAA,CAA3B,CAA2B,CAA3B;AACH;AAdL,eAAA;AAiBA,mBAAA,OAAA,CAAA,gBAAA,CAAA,UAAA,EAA0C,UAAA,CAAA,EAAK;AAC3C,oBAAI,MAAI,CAAJ,MAAA,CAAJ,QAAA,EAA0B;AACtB,kBAAA,MAAI,CAAJ,SAAA,CAAA,UAAA,EAAA,CAAA,EAA8B,MAAI,CAAJ,WAAA,CAA9B,CAA8B,CAA9B;AACH;AAHL,eAAA;AAMA,mBAAA,OAAA,CAAA,gBAAA,CAAA,QAAA,EAAwC,UAAA,CAAA,EAAC;AAAA,uBACrC,MAAI,CAAJ,SAAA,CAAA,QAAA,EADqC,CACrC,CADqC;AAAzC,eAAA;AAGH;AAED;;;;;;;;;;;;;;sCAWUtC,K,EAAOM,M,EAAQF,K,EAAOC,G,EAAK;AACjC,kBAAI,CAAC,KAAA,QAAA,CAAL,MAAK,CAAL,EAA4B;AACxB,qBAAA,SAAA;AACH;;AAED,mBAAA,MAAA,CAAA,QAAA,GACM,KAAA,QAAA,CAAA,KAAA,EAAA,CAAA,EAAA,KAAA,EADN,GACM,CADN,GAEM,KAAA,QAAA,CAAA,KAAA,EAAA,CAAA,EAAA,KAAA,EAFN,GAEM,CAFN;AAGH;AAED;;;;;;0CAGc;AACV,kBAAI,KAAA,OAAA,KAAJ,IAAA,EAA2B;AACvB,qBAAA,OAAA,CAAA,UAAA,GAAA,CAAA;AACH;AACJ;AAED;;;;;;;;qCAKSsC,O,EAAS;AACd,kBAAMb,QAAQ,GAAG,KAAA,OAAA,CAAA,WAAA,GAAjB,OAAA;AACA,mBAAA,kBAAA,CAAA,QAAA,EAAA,IAAA;AACH;AAED;;;;;;;;;;+CAOmBA,Q,EAAUc,S,EAAW;AACpC,kBAAMC,UAAU,GAAG,KAAA,OAAA,CAAnB,UAAA;AACA,kBAAMC,IAAI,GAAG,CAAC,EAAE,KAAA,OAAA,CAAA,WAAA,GAAhB,CAAc,CAAd;AACA,kBAAMC,SAAS,GAAG,KAAA,OAAA,CAAA,WAAA,GAA2B,KAAA,OAAA,CAA7C,WAAA;AACA,kBAAIC,MAAM,GAAGlB,QAAQ,GAArB,IAAA;AACA,kBAAImB,MAAM,GAAGD,MAAM,GAAnB,UAAA;;AAEA,kBAAID,SAAS,IAAb,CAAA,EAAoB;AAChB;AACA;AATgC,eAAA,CAYpC;;;AACA,kBAAI,CAAA,SAAA,IAAc,CAAA,IAAA,IAAd,MAAA,IAAiCE,MAAM,GAA3C,IAAA,EAAoD;AAChD;AACA,oBAAIC,IAAI,GAAG,KAAA,MAAA,CAFqC,cAEhD,CAFgD,CAIhD;;AACAA,gBAAAA,IAAI,IAAJA,IAAAA;AACAA,gBAAAA,IAAI,IAAJA,SAAAA;AAEAD,gBAAAA,MAAM,GAAGzC,IAAI,CAAJA,GAAAA,CAAS,CAATA,IAAAA,EAAgBA,IAAI,CAAJA,GAAAA,CAAAA,IAAAA,EAAzByC,MAAyBzC,CAAhBA,CAATyC;AACAD,gBAAAA,MAAM,GAAGH,UAAU,GAAnBG,MAAAA;AAtBgC,eAAA,CAyBpC;;;AACAA,cAAAA,MAAM,GAAGxC,IAAI,CAAJA,GAAAA,CAAAA,CAAAA,EAAYA,IAAI,CAAJA,GAAAA,CAAAA,SAAAA,EA1Be,MA0BfA,CAAZA,CAATwC,CA1BoC,CA2BpC;;AACA,kBAAIA,MAAM,IAAV,UAAA,EAA0B;AACtB,qBAAA,OAAA,CAAA,UAAA,GAAA,MAAA;AACH;AACJ;AAED;;;;;;;;yCAKa;AACT,kBAAIpD,CAAC,GAAL,CAAA;;AACA,kBAAI,KAAJ,OAAA,EAAkB;AACd,oBAAMuD,UAAU,GAAG,KAAA,MAAA,CAAnB,UAAA;AACAvD,gBAAAA,CAAC,GAAGY,IAAI,CAAJA,KAAAA,CAAW,KAAA,OAAA,CAAA,UAAA,GAFD,UAEVA,CAAJZ,CAFc,CAId;AACA;AACA;AACA;AACA;;AACA,oBAAI,KAAA,MAAA,CAAJ,YAAA,EAA8B;AAC1B,sBAAMmD,SAAS,GAAG,CAAC,EACf,KAAA,OAAA,CAAA,WAAA,GAAA,UAAA,GACA,KAFJ,QAEI,EAFe,CAAnB;AAIAnD,kBAAAA,CAAC,GAAGY,IAAI,CAAJA,GAAAA,CAAAA,SAAAA,EAAoBA,IAAI,CAAJA,GAAAA,CAAAA,CAAAA,EAAxBZ,CAAwBY,CAApBA,CAAJZ;AACH;AACJ;;AACD,qBAAA,CAAA;AACH;AAED;;;;;;;;uCAKW;AACP,qBAAOY,IAAI,CAAJA,KAAAA,CAAW,KAAA,SAAA,CAAA,WAAA,GAA6B,KAAA,MAAA,CAA/C,UAAOA,CAAP;AACH;AAED;;;;;;;;;qCAMSjB,K,EAAO;AACZ,kBAAI,KAAA,KAAA,IAAJ,KAAA,EAAyB;AACrB,uBAAA,KAAA;AACH;;AAED,mBAAA,KAAA,GAAA,KAAA;;AAEA,kBAAI,KAAA,MAAA,CAAA,UAAA,IAA0B,KAAA,MAAA,CAA9B,YAAA,EAAwD;AACpD,qBAAA,KAAA,CAAW,KAAX,OAAA,EAAyB;AACrBA,kBAAAA,KAAK,EAAE;AADc,iBAAzB;AADJ,eAAA,MAIO;AACH,qBAAA,KAAA,CAAW,KAAX,OAAA,EAAyB;AACrBA,kBAAAA,KAAK,EAAE,CAAC,EAAE,KAAA,KAAA,GAAa,KAAA,MAAA,CAAhB,UAAC,CAAD,GAA0C;AAD5B,iBAAzB;AAGH;;AAED,mBAAA,UAAA;AACA,qBAAA,IAAA;AACH;AAED;;;;;;;;;sCAMUC,M,EAAQ;AACd,kBAAIA,MAAM,IAAI,KAAd,MAAA,EAA2B;AACvB,uBAAA,KAAA;AACH;;AACD,mBAAA,MAAA,GAAA,MAAA;AAEA,mBAAA,KAAA,CAAW,KAAX,OAAA,EAAyB;AACrBA,gBAAAA,MAAM,EAAE,CAAC,EAAE,KAAA,MAAA,GAAc,KAAA,MAAA,CAAjB,UAAC,CAAD,GAA2C;AAD9B,eAAzB;AAIA,mBAAA,UAAA;AACA,qBAAA,IAAA;AACH;AAED;;;;;;;;qCAKSiD,S,EAAU;AACf,kBAAMW,UAAU,GAAG,IAAI,KAAA,MAAA,CAAvB,UAAA;AACA,kBAAMC,GAAG,GAAG7C,IAAI,CAAJA,KAAAA,CAAWiC,SAAQ,GAAG,KAAtBjC,KAAAA,IAAZ,UAAA;;AAEA,kBAAI6C,GAAG,GAAG,KAANA,OAAAA,IAAsBA,GAAG,GAAG,KAANA,OAAAA,IAA1B,UAAA,EAA4D;AACxD,qBAAA,OAAA,GAAA,GAAA;;AAEA,oBAAI,KAAA,MAAA,CAAA,YAAA,IAA4B,KAAA,MAAA,CAAhC,UAAA,EAAwD;AACpD,sBAAMC,MAAM,GAAG,CAAC,EAAE,KAAA,OAAA,CAAA,WAAA,GAAlB,SAAgB,CAAhB;AACA,uBAAA,kBAAA,CAAA,MAAA,EAEI,KAAA,MAAA,CAFJ,qBAAA;AAIH;;AAED,qBAAA,cAAA,CAAA,GAAA;AACH;AACJ;AAED;;;;;;sCAGU;AACN,mBAAA,KAAA;;AACA,kBAAI,KAAJ,OAAA,EAAkB;AACd,oBAAI,KAAA,OAAA,CAAA,UAAA,IAA2B,KAA/B,SAAA,EAA+C;AAC3C,uBAAA,SAAA,CAAA,WAAA,CAA2B,KAA3B,OAAA;AACH;;AACD,qBAAA,OAAA,GAAA,IAAA;AACH;AACJ;AAED;;AAEA;;;;;;;;2CAKe,CAAE;AAEjB;;;;;;;;yCAKa,CAAE;AAEf;;;;;;;;;;;;;;;;qCAaStD,K,EAAOuD,Y,EAAcnD,K,EAAOC,G,EAAK,CAAE;AAE5C;;;;;;;;;;;;;;;;qCAaSL,K,EAAOuD,Y,EAAcnD,K,EAAOC,G,EAAK,CAAE;AAE5C;;;;;;;;wCAKY,CAAE;AAEd;;;;;;;;;2CAMeyB,Q,EAAU,CAAE;;;;UAlZKP,IAAI,CAACC,Q;;;;;;;;;;;;;;;;;;;;;;;;ACPzC,YAAA,OAAA,GAAA,sBAAA,CAAA,mBAAA;AAAA;AAAA,yBAAA,CAAA,CAAA;;AACA,YAAA,IAAA,GAAA,uBAAA,CAAA,mBAAA;AAAA;AAAA,6BAAA,CAAA,CAAA;;AACA,YAAA,QAAA,GAAA,sBAAA,CAAA,mBAAA;AAAA;AAAA,qCAAA,CAAA,CAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAEA;;;;;;;;;YAOqBgC,W;;;;AACjB;;;;;;AAIA,mBAAA,WAAA,CAAA,SAAA,EAAA,MAAA,EAA+B;AAAA,gBAAA,KAAA;;AAAA,YAAA,eAAA,CAAA,IAAA,EAAA,WAAA,CAAA;;AAC3B,YAAA,KAAA,GAAA,0BAAA,CAAA,IAAA,EAAA,eAAA,CAAA,WAAA,CAAA,CAAA,IAAA,CAAA,IAAA,EAAA,SAAA,EAAA,MAAA,CAAA,CAAA;AAEA;;;;;AAIA,YAAA,KAAA,CAAA,cAAA,GAAsB/B,MAAM,CAA5B,cAAA;AAEA;;;;;AAIA,YAAA,KAAA,CAAA,qBAAA,GAA6BjB,IAAI,CAAJA,KAAAA,CACzBiB,MAAM,CAANA,cAAAA,GAAwBA,MAAM,CADlC,UAA6BjB,CAA7B;AAIA;;;;;;;AAMA,YAAA,KAAA,CAAA,iBAAA,GAAyBiB,MAAM,CAANA,SAAAA,IAAoBA,MAAM,CAAnD,aAAA;AAEA;;;;;AAIA,YAAA,KAAA,CAAA,SAAA,GAAiB,MAAMA,MAAM,CAA7B,UAAA;AAEA;;;;;;;AAMA,YAAA,KAAA,CAAA,QAAA,GAAA,EAAA;AAEA;;;;;AAIA,YAAA,KAAA,CAAA,YAAA,GAAA,IAAA;AAEA;;;;;;;AAMA,YAAA,KAAA,CAAA,UAAA,GAAkBtC,QAAAA,CAAlB,OAAA;AAEA;;;;;;;AAMA,YAAA,KAAA,CAAA,uBAAA,GAA+BsC,MAAM,CAArC,wBAAA;AAEA;;;;;;;AAMA,YAAA,KAAA,CAAA,OAAA,GAAe,IAAIjB,IAAI,CAAJA,IAAAA,CAAUiB,MAAM,CAANA,UAAAA,GAA7B,CAAmBjB,CAAnB;AAEA;;;;;;;AAMA,YAAA,KAAA,CAAA,SAAA,GAAiBiB,MAAM,CAANA,SAAAA,IAAjB,CAAA;AA3E2B,mBAAA,KAAA;AA4E9B;AAED;;;;;;;mCAGO;AACH,mBAAA,aAAA;AACA,mBAAA,cAAA;AACH;AAED;;;;;;;;6CAKiB;AACb,mBAAA,YAAA,GAAoB,KAAA,OAAA,CAAA,WAAA,CAChB,KAAA,KAAA,CAAWG,QAAQ,CAARA,aAAAA,CAAX,MAAWA,CAAX,EAA2C;AACvCE,gBAAAA,QAAQ,EAD+B,UAAA;AAEvC2B,gBAAAA,MAAM,EAFiC,CAAA;AAGvCC,gBAAAA,IAAI,EAHmC,CAAA;AAIvCC,gBAAAA,GAAG,EAJoC,CAAA;AAKvCC,gBAAAA,MAAM,EALiC,CAAA;AAMvCC,gBAAAA,QAAQ,EAN+B,QAAA;AAOvCtE,gBAAAA,KAAK,EAPkC,GAAA;AAQvCsC,gBAAAA,OAAO,EARgC,MAAA;AASvCiC,gBAAAA,SAAS,EAT8B,YAAA;AAUvCC,gBAAAA,gBAAgB,EAVuB,OAAA;AAWvCC,gBAAAA,aAAa,EAAE;AAXwB,eAA3C,CADgB,CAApB;AAgBA,mBAAA,SAAA;AACA,mBAAA,YAAA;AACH;AAED;;;;;;2CAGe;AACX,mBAAA,KAAA,CAAW,KAAX,YAAA,EAA8B;AAC1BC,gBAAAA,gBAAgB,EAAE,KAAA,MAAA,CAAA,WAAA,GADQ,IAAA;AAE1BC,gBAAAA,gBAAgB,EAAE,KAAA,MAAA,CAAYC;AAFJ,eAA9B;AAIH;AAED;;;;;;yCAGa;AAAA,kBAAA,MAAA,GAAA,IAAA;;AACT,kBAAM7E,UAAU,GAAGkB,IAAI,CAAJA,KAAAA,CAAW,KAAA,KAAA,GAAa,KAAA,MAAA,CAA3C,UAAmBA,CAAnB;AACA,kBAAM4D,gBAAgB,GAAG5D,IAAI,CAAJA,IAAAA,CACrBlB,UAAU,IAAI,KAAA,qBAAA,GAA6B,KAHtC,OAGK,CADWkB,CAAzB,CAFS,CAMT;;AACA,qBAAO,KAAA,QAAA,CAAA,MAAA,GAAP,gBAAA,EAAgD;AAC5C,qBAAA,SAAA;AARK,eAAA,CAWT;;;AACA,qBAAO,KAAA,QAAA,CAAA,MAAA,GAAP,gBAAA,EAAgD;AAC5C,qBAAA,YAAA;AACH;;AAED,kBAAI6D,WAAW,GAAG,KAAA,cAAA,GAAsB,KAAxC,OAAA;AACA,kBAAMC,UAAU,GAAG,KAAA,QAAA,CAAA,MAAA,GAAnB,CAAA;AACA,mBAAA,QAAA,CAAA,OAAA,CAAsB,UAAA,KAAA,EAAA,CAAA,EAAc;AAChC,oBAAIvD,CAAC,IAAL,UAAA,EAAqB;AACjBsD,kBAAAA,WAAW,GAAG,MAAI,CAAJ,KAAA,GAAa,MAAI,CAAJ,cAAA,GAA3BA,UAAAA;AACH;;AACD,gBAAA,MAAI,CAAJ,gBAAA,CAAA,KAAA,EAAA,WAAA,EAA0C,MAAI,CAA9C,MAAA;;AAEAE,gBAAAA,KAAK,CAALA,SAAAA;AANJ,eAAA;AAQH;AAED;;;;;;;;wCAKY;AACR,kBAAMA,KAAK,GAAG,IAAI,KAAlB,UAAc,EAAd;AACAA,cAAAA,KAAK,CAALA,uBAAAA,GAAgC,KAAhCA,uBAAAA;AACAA,cAAAA,KAAK,CAALA,iBAAAA,GAA0B,KAA1BA,iBAAAA;AACAA,cAAAA,KAAK,CAALA,SAAAA,GAAkB,KAAlBA,SAAAA;AACA,kBAAMC,UAAU,GAAG,KAAA,qBAAA,GAA6B,KAAA,QAAA,CALxC,MAKR,CALQ,CAOR;;AACAD,cAAAA,KAAK,CAALA,QAAAA,CACI,KAAA,OAAA,CAAA,WAAA,CACI,KAAA,KAAA,CAAW3C,QAAQ,CAARA,aAAAA,CAAX,QAAWA,CAAX,EAA6C;AACzCE,gBAAAA,QAAQ,EADiC,UAAA;AAEzC2B,gBAAAA,MAAM,EAFmC,CAAA;AAGzCC,gBAAAA,IAAI,EAAEc,UAAU,GAHyB,IAAA;AAIzCb,gBAAAA,GAAG,EAJsC,CAAA;AAKzCC,gBAAAA,MAAM,EALmC,CAAA;AAMzCpE,gBAAAA,MAAM,EANmC,MAAA;AAOzCwE,gBAAAA,aAAa,EAAE;AAP0B,eAA7C,CADJ,CADJO,EARQ,CAsBR;;AACA,kBAAI,KAAJ,iBAAA,EAA4B;AACxBA,gBAAAA,KAAK,CAALA,YAAAA,CACI,KAAA,YAAA,CAAA,WAAA,CACI,KAAA,KAAA,CAAW3C,QAAQ,CAARA,aAAAA,CAAX,QAAWA,CAAX,EAA6C;AACzCE,kBAAAA,QAAQ,EADiC,UAAA;AAEzC4B,kBAAAA,IAAI,EAAEc,UAAU,GAFyB,IAAA;AAGzCb,kBAAAA,GAAG,EAHsC,CAAA;AAIzCC,kBAAAA,MAAM,EAJmC,CAAA;AAKzCpE,kBAAAA,MAAM,EAAE;AALiC,iBAA7C,CADJ,CADJ+E;AAWH;;AAED,mBAAA,QAAA,CAAA,IAAA,CAAA,KAAA;AACH;AAED;;;;;;;;2CAKe;AACX,kBAAIE,SAAS,GAAG,KAAA,QAAA,CAAc,KAAA,QAAA,CAAA,MAAA,GADnB,CACK,CAAhB,CADW,CAGX;;AACAA,cAAAA,SAAS,CAATA,IAAAA,CAAAA,aAAAA,CAAAA,WAAAA,CAAyCA,SAAS,CAJvC,IAIXA,EAJW,CAMX;;AACA,kBAAI,KAAJ,iBAAA,EAA4B;AACxBA,gBAAAA,SAAS,CAATA,QAAAA,CAAAA,aAAAA,CAAAA,WAAAA,CAA6CA,SAAS,CAAtDA,QAAAA;AARO,eAAA,CAWX;;;AACA,kBAAA,SAAA,EAAe;AACXA,gBAAAA,SAAS,CAATA,OAAAA;AACAA,gBAAAA,SAAS,GAATA,IAAAA;AACH;;AAED,mBAAA,QAAA,CAAA,GAAA;AACH;AAED;;;;;;;;;;;6CAQiBF,K,EAAOhF,K,EAAOC,M,EAAQ;AACnC,kBAAMH,YAAY,GAAGmB,IAAI,CAAJA,KAAAA,CAAWjB,KAAK,GAAG,KAAA,MAAA,CAAxC,UAAqBiB,CAArB;AACA,kBAAMlB,UAAU,GAAGkB,IAAI,CAAJA,KAAAA,CAAW,KAAA,KAAA,GAAa,KAAA,MAAA,CAFR,UAEhBA,CAAnB,CAFmC,CAInC;;AACA+D,cAAAA,KAAK,CAALA,gBAAAA,CAAAA,YAAAA,EAAAA,UAAAA,EAAAA,KAAAA,EALmC,MAKnCA,EALmC,CAOnC;;AACA,mBAAA,KAAA,CAAW,KAAX,YAAA,EAA8B;AAAE1C,gBAAAA,OAAO,EAAE;AAAX,eAA9B;AACH;AAED;;;;;;wCAGY;AACR,mBAAA,QAAA,CAAA,OAAA,CAAsB,UAAA,KAAA,EAAK;AAAA,uBAAI0C,KAAK,CAAT,SAAIA,EAAJ;AAA3B,eAAA;AACH;AAED;;;;;;;;;;;;;;;;qCAaSvE,K,EAAOuD,Y,EAAcnD,K,EAAOC,G,EAAK;AAAA,kBAAA,MAAA,GAAA,IAAA;;AACtC,qBAAO,KAAA,WAAA,CAAA,KAAA,EAAA,YAAA,EAAA,KAAA,EAAA,GAAA,EAKH,UAAA,IAAA,EAA2D;AAAA,oBAAxDJ,MAAwD,GAAA,IAAA,CAAxDA,MAAwD;AAAA,oBAAhDyE,UAAgD,GAAA,IAAA,CAAhDA,UAAgD;AAAA,oBAApClF,MAAoC,GAAA,IAAA,CAApCA,MAAoC;AAAA,oBAA5BW,OAA4B,GAAA,IAAA,CAA5BA,OAA4B;AAAA,oBAAnBD,KAAmB,GAAA,IAAA,CAAnBA,KAAmB;AAAA,oBAAZF,KAAY,GAAA,IAAA,CAAZA,KAAY,CAAA,CACvD;AACA;;AACA,oBAAII,KAAK,KAAT,SAAA,EAAyB;AACrB;AAJmD,iBAAA,CAMvD;;;AACA,oBAAMuE,cAAc,GAAGD,UAAU,GAAA,CAAA,GAAjC,CAAA;AACA,oBAAMpE,MAAM,GAAGN,KAAK,CAALA,MAAAA,GAAf,cAAA;AACA,oBAAM4E,GAAG,GAAG,MAAI,CAAJ,MAAA,CAAA,QAAA,GAAuB,MAAI,CAAJ,MAAA,CAAnC,UAAA;AACA,oBAAMC,GAAG,GACL,MAAI,CAAJ,MAAA,CAAA,MAAA,KAAA,IAAA,GACMrE,IAAI,CAAJA,GAAAA,CAAS,MAAI,CAAJ,MAAA,CAATA,UAAAA,EAAiC,CAAC,EAAEoE,GAAG,GAD7C,CACwC,CAAlCpE,CADN,GAEMA,IAAI,CAAJA,GAAAA,CACI,MAAI,CAAJ,MAAA,CADJA,UAAAA,EAEI,MAAI,CAAJ,MAAA,CAAA,MAAA,GAAqB,MAAI,CAAJ,MAAA,CALnC,UAGUA,CAHV;AAOA,oBAAMsE,IAAI,GAAGF,GAAG,GAAhB,GAAA;AAEA,oBAAMhE,KAAK,GAAGN,MAAM,GAAG,MAAI,CAA3B,KAAA;AACA,oBAAMC,KAAK,GAAX,KAAA;AACA,oBAAME,IAAI,GAAV,GAAA;AACA,oBAAIM,CAAC,GAAL,KAAA;;AAEA,qBAAA,CAAA,EAAQA,CAAC,GAAT,IAAA,EAAkBA,CAAC,IAAnB,IAAA,EAA6B;AACzB,sBAAMC,IAAI,GACNhB,KAAK,CAACQ,IAAI,CAAJA,KAAAA,CAAWO,CAAC,GAADA,KAAAA,GAAjBf,cAAMQ,CAAD,CAALR,IADJ,CAAA;AAEA,sBAAIiB,CAAC,GAAGT,IAAI,CAAJA,KAAAA,CAAYQ,IAAI,GAAL,MAACA,GAApB,KAAQR,CAAR;AAEA;;;AAEA,sBAAIS,CAAC,IAADA,CAAAA,IAAU,MAAI,CAAJ,MAAA,CAAd,YAAA,EACIA,CAAC,GAAG,MAAI,CAAJ,MAAA,CAAJA,YAAAA;;AAEJ,kBAAA,MAAI,CAAJ,QAAA,CACIF,CAAC,GAAG,MAAI,CADZ,SAAA,EAEIb,KAAK,GAALA,CAAAA,GAFJ,OAAA,EAGI0E,GAAG,GAAG,MAAI,CAHd,SAAA,EAII3D,CAAC,GAJL,CAAA,EAKI,MAAI,CALR,SAAA;AAOH;AA9CT,eAAO,CAAP;AAiDH;AAED;;;;;;;;;;;;;;;;qCAaSjB,K,EAAOuD,Y,EAAcnD,K,EAAOC,G,EAAK;AAAA,kBAAA,MAAA,GAAA,IAAA;;AACtC,qBAAO,KAAA,WAAA,CAAA,KAAA,EAAA,YAAA,EAAA,KAAA,EAAA,GAAA,EAKH,UAAA,KAAA,EAA2D;AAAA,oBAAxDJ,MAAwD,GAAA,KAAA,CAAxDA,MAAwD;AAAA,oBAAhDyE,UAAgD,GAAA,KAAA,CAAhDA,UAAgD;AAAA,oBAApClF,MAAoC,GAAA,KAAA,CAApCA,MAAoC;AAAA,oBAA5BW,OAA4B,GAAA,KAAA,CAA5BA,OAA4B;AAAA,oBAAnBD,KAAmB,GAAA,KAAA,CAAnBA,KAAmB;AAAA,oBAAZF,KAAY,GAAA,KAAA,CAAZA,KAAY;;AACvD,oBAAI,CAAJ,UAAA,EAAiB;AACb,sBAAM+E,cAAc,GAApB,EAAA;AACA,sBAAMC,GAAG,GAAGhF,KAAK,CAAjB,MAAA;AACA,sBAAIe,CAAC,GAAL,CAAA;;AACA,uBAAA,CAAA,EAAQA,CAAC,GAAT,GAAA,EAAiBA,CAAjB,EAAA,EAAsB;AAClBgE,oBAAAA,cAAc,CAAC,IAAfA,CAAc,CAAdA,GAAwB/E,KAAK,CAA7B+E,CAA6B,CAA7BA;AACAA,oBAAAA,cAAc,CAAC,IAAA,CAAA,GAAfA,CAAc,CAAdA,GAA4B,CAAC/E,KAAK,CAAlC+E,CAAkC,CAAlCA;AACH;;AACD/E,kBAAAA,KAAK,GAALA,cAAAA;AATmD,iBAAA,CAYvD;AACA;;;AACA,oBAAII,KAAK,KAAT,SAAA,EAAyB;AACrB,kBAAA,MAAI,CAAJ,QAAA,CAAA,KAAA,EAAA,MAAA,EAAA,KAAA,EAAA,OAAA,EAAA,KAAA,EAAA,GAAA;AAfmD,iBAAA,CAkBvD;;;AACA,gBAAA,MAAI,CAAJ,QAAA,CAAA,CAAA,EAEIF,KAAK,GAALA,OAAAA,GAAkB,MAAI,CAF1B,SAAA,EAGI,MAAI,CAHR,KAAA,EAII,MAAI,CAJR,SAAA,EAKI,MAAI,CALR,SAAA;AAxBR,eAAO,CAAP;AAiCH;AAED;;;;;;;;;;;;;;;;qCAaSF,K,EAAOC,M,EAAQC,K,EAAOC,O,EAASC,K,EAAOC,G,EAAK;AAAA,kBAAA,MAAA,GAAA,IAAA;;AAChD,mBAAA,QAAA,CAAA,OAAA,CAAsB,UAAA,KAAA,EAAS;AAC3B,gBAAA,MAAI,CAAJ,aAAA,CAAA,KAAA;;AACAkE,gBAAAA,KAAK,CAALA,SAAAA,CAAAA,KAAAA,EAAAA,MAAAA,EAAAA,KAAAA,EAAAA,OAAAA,EAAAA,KAAAA,EAAAA,GAAAA;AAFJ,eAAA;AAIH;AAED;;;;;;;;;;;;qCASS3E,C,EAAGC,C,EAAGN,K,EAAOC,M,EAAQM,M,EAAQ;AAClC,kBAAMmF,WAAW,GAAGzE,IAAI,CAAJA,KAAAA,CAAWZ,CAAC,GAAG,KAAnC,cAAoBY,CAApB;AACA,kBAAM0E,SAAS,GAAG1E,IAAI,CAAJA,GAAAA,CACdA,IAAI,CAAJA,IAAAA,CAAU,CAACZ,CAAC,GAAF,KAAA,IAAc,KAAxBY,cAAAA,IADcA,CAAAA,EAEd,KAAA,QAAA,CAFJ,MAAkBA,CAAlB;AAIA,kBAAIO,CAAC,GAAL,WAAA;;AACA,mBAAA,CAAA,EAAQA,CAAC,GAAT,SAAA,EAAuBA,CAAvB,EAAA,EAA4B;AACxB,oBAAMwD,KAAK,GAAG,KAAA,QAAA,CAAd,CAAc,CAAd;AACA,oBAAMC,UAAU,GAAGzD,CAAC,GAAG,KAAvB,cAAA;AAEA,oBAAMoE,YAAY,GAAG;AACjBC,kBAAAA,EAAE,EAAE5E,IAAI,CAAJA,GAAAA,CAAAA,CAAAA,EAAYO,CAAC,GAAG,KADH,cACbP,CADa;AAEjB6E,kBAAAA,EAAE,EAFe,CAAA;AAGjBC,kBAAAA,EAAE,EAAE9E,IAAI,CAAJA,GAAAA,CACAZ,CAAC,GADDY,KAAAA,EAEAO,CAAC,GAAG,KAAJA,cAAAA,GAA0BwD,KAAK,CAALA,IAAAA,CALb,KAGb/D,CAHa;AAOjB+E,kBAAAA,EAAE,EAAE1F,CAAC,GAAGL;AAPS,iBAArB;;AAUA,oBAAI2F,YAAY,CAAZA,EAAAA,GAAkBA,YAAY,CAAlC,EAAA,EAAuC;AACnC,uBAAA,aAAA,CAAA,KAAA;AAEAZ,kBAAAA,KAAK,CAALA,SAAAA,CACIY,YAAY,CAAZA,EAAAA,GADJZ,UAAAA,EAEIY,YAAY,CAFhBZ,EAAAA,EAGIY,YAAY,CAAZA,EAAAA,GAAkBA,YAAY,CAHlCZ,EAAAA,EAIIY,YAAY,CAAZA,EAAAA,GAAkBA,YAAY,CAJlCZ,EAAAA,EAAAA,MAAAA;AAOH;AACJ;AACJ;AAED;;;;;;;;;;;;;;;;;;;wCAgBYvE,K,EAAOuD,Y,EAAcnD,K,EAAOC,G,EAAKmF,E,EAAI;AAAA,kBAAA,MAAA,GAAA,IAAA;;AAC7C,qBAAO,IAAI,CAAJ,KAAA,CAAW,YAAM;AACpB;AACA,oBAAIxF,KAAK,CAALA,CAAK,CAALA,YAAJ,KAAA,EAA+B;AAC3B,sBAAMyF,QAAQ,GAAd,KAAA;;AACA,sBAAI,MAAI,CAAJ,MAAA,CAAJ,aAAA,EAA+B;AAC3B,oBAAA,MAAI,CAAJ,SAAA,CACIA,QAAQ,CAARA,MAAAA,GACI,MAAI,CAAJ,MAAA,CADJA,MAAAA,GAEI,MAAI,CAAJ,MAAA,CAHR,UAAA;;AAKA,2BAAO,QAAQ,CAAR,OAAA,CAAiB,UAAA,YAAA,EAAA,CAAA,EAAA;AAAA,6BACpB,MAAI,CAAJ,WAAA,CAAA,YAAA,EAAA,CAAA,EAAA,KAAA,EAAA,GAAA,EADoB,EACpB,CADoB;AAAxB,qBAAO,CAAP;AAGH;;AACDzF,kBAAAA,KAAK,GAAGyF,QAAQ,CAAhBzF,CAAgB,CAAhBA;AAdgB,iBAAA,CAgBpB;AACA;AACA;;;AACA,oBAAIC,MAAM,GAAG,IAAI,MAAI,CAAJ,MAAA,CAAjB,SAAA;;AACA,oBAAI,MAAI,CAAJ,MAAA,CAAJ,SAAA,EAA2B;AACvB,sBAAMyF,GAAG,GAAGnE,IAAI,CAAJA,GAAAA,CAAZ,KAAYA,CAAZ;AACA,sBAAMoE,GAAG,GAAGpE,IAAI,CAAJA,GAAAA,CAAZ,KAAYA,CAAZ;AACAtB,kBAAAA,MAAM,GAAG,CAAA,GAAA,GAAA,GAAA,GAAa,CAAb,GAAA,GAATA,GAAAA;AAvBgB,iBAAA,CA0BpB;AACA;;;AACA,oBAAMyE,UAAU,GAAG,GAAA,IAAA,CAAA,IAAA,CAAA,KAAA,EAAoB,UAAA,GAAA,EAAG;AAAA,yBAAIkB,GAAG,GAAP,CAAA;AAA1C,iBAAmB,CAAnB;AACA,oBAAMpG,MAAM,GAAG,MAAI,CAAJ,MAAA,CAAA,MAAA,GAAqB,MAAI,CAAJ,MAAA,CAApC,UAAA;AACA,oBAAMW,OAAO,GAAGX,MAAM,GAANA,YAAAA,IAAhB,CAAA;AACA,oBAAMU,KAAK,GAAGV,MAAM,GAApB,CAAA;AAEA,uBAAOgG,EAAE,CAAC;AACNvF,kBAAAA,MAAM,EADA,MAAA;AAENyE,kBAAAA,UAAU,EAFJ,UAAA;AAGNlF,kBAAAA,MAAM,EAHA,MAAA;AAINW,kBAAAA,OAAO,EAJD,OAAA;AAKND,kBAAAA,KAAK,EALC,KAAA;AAMNF,kBAAAA,KAAK,EAAEA;AAND,iBAAD,CAAT;AAjCJ,eAAO,GAAP;AA0CH;AAED;;;;;;;;;0CAMcuE,K,EAAO;AACjBA,cAAAA,KAAK,CAALA,aAAAA,CAAoB,KAAA,MAAA,CAApBA,SAAAA,EAA2C,KAAA,MAAA,CAA3CA,aAAAA;AACH;AAED;;;;;;;;;;;;;;;;;qCAcSpD,M,EAAQC,O,EAASC,I,EAAM;AAC5B,kBAAIA,IAAI,KAAR,MAAA,EAAqB;AACjB,uBAAO,OAAO,CAAP,GAAA,CACH,KAAA,QAAA,CAAA,GAAA,CAAkB,UAAA,KAAA,EAAS;AACvB,yBAAOkD,KAAK,CAALA,QAAAA,CAAAA,MAAAA,EAAAA,OAAAA,EAAP,IAAOA,CAAP;AAFR,iBACI,CADG,CAAP;AADJ,eAAA,MAMO,IAAIlD,IAAI,KAAR,SAAA,EAAwB;AAC3B,oBAAIwE,MAAM,GAAG,KAAA,QAAA,CAAA,GAAA,CAAkB,UAAA,KAAA,EAAK;AAAA,yBAChCtB,KAAK,CAALA,QAAAA,CAAAA,MAAAA,EAAAA,OAAAA,EADgC,IAChCA,CADgC;AAApC,iBAAa,CAAb;AAGA,uBAAOsB,MAAM,CAANA,MAAAA,GAAAA,CAAAA,GAAAA,MAAAA,GAA6BA,MAAM,CAA1C,CAA0C,CAA1C;AACH;AACJ;AAED;;;;;;;;2CAKe/D,Q,EAAU;AACrB,mBAAA,KAAA,CAAW,KAAX,YAAA,EAA8B;AAAEvC,gBAAAA,KAAK,EAAEuC,QAAQ,GAAG;AAApB,eAA9B;AACH;;;;UA3hBoCR,OAAAA,CAAAA,O;;;;;;;;;;;;;;;;;;;;;;;;ACXzC,YAAA,aAAA,GAAA,sBAAA,CAAA,mBAAA;AAAA;AAAA,+BAAA,CAAA,CAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAEA;;;;;;;;;;;;YAUqBwE,oB;;;;AACjB;;;;;;;AAKA,mBAAA,oBAAA,CAAA,MAAA,EAAoB;AAAA,gBAAA,KAAA;;AAAA,YAAA,eAAA,CAAA,IAAA,EAAA,oBAAA,CAAA;;AAChB,YAAA,KAAA,GAAA,0BAAA,CAAA,IAAA,EAAA,eAAA,CAAA,oBAAA,CAAA,CAAA,IAAA,CAAA,IAAA,EAAA,MAAA,CAAA,CAAA;AACA;;AACA,YAAA,KAAA,CAAA,MAAA,GAAA,MAAA;AACA;;AACA,YAAA,KAAA,CAAA,kBAAA,GAAA,IAAA;AALgB,mBAAA,KAAA;AAMnB;AAED;;;;;;;mCAGO;AACH,mBAAA,eAAA,CAAqB,KAAA,MAAA,CAArB,SAAA;AACA,mBAAA,WAAA;AACA,mBAAA,gBAAA;AACA,mBAAA,gBAAA;AACA,mBAAA,kBAAA;AACH;AACD;;;;;;;;;;;kCAQME,K,EAAOhG,K,EAAO;AAChB,cAAA,IAAA,CAAA,eAAA,CAAA,oBAAA,CAAA,SAAA,CAAA,EAAA,OAAA,EAAA,IAAA,CAAA,CAAA,IAAA,CAAA,IAAA,EAAA,KAAA,EAAA,KAAA;;AACA,mBAAA,wBAAA,CAAA,KAAA;AACH;AAED;;;;;;;;;qDAMyBiG,Y,EAAc;AACnC,mBAAA,kBAAA,GAA0B,KAAA,EAAA,CAAA,wBAAA,CAA1B,YAA0B,CAA1B;AAGA,mBAAA,kBAAA,CAAA,OAAA,CAAgC,KAAhC,QAAA;AACH;;;;UAhD6CF,aAAAA,CAAAA,O;;;;;;;;;;;;;;;;;;;;;;;;ACZlD,YAAA,SAAA,GAAA,sBAAA,CAAA,mBAAA;AAAA;AAAA,2BAAA,CAAA,CAAA;;AACA,YAAA,IAAA,GAAA,uBAAA,CAAA,mBAAA;AAAA;AAAA,6BAAA,CAAA,CAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAEA;;;;;YAGqBA,Y;;;;AACjB;;;;;;;AAKA,mBAAA,YAAA,CAAA,MAAA,EAAoB;AAAA,gBAAA,KAAA;;AAAA,YAAA,eAAA,CAAA,IAAA,EAAA,YAAA,CAAA;;AAChB,YAAA,KAAA,GAAA,0BAAA,CAAA,IAAA,EAAA,eAAA,CAAA,YAAA,CAAA,CAAA,IAAA,CAAA,IAAA,EAAA,MAAA,CAAA,CAAA;AACA;;AACA,YAAA,KAAA,CAAA,MAAA,GAAA,MAAA;AAEA;;;;;;AAKA,YAAA,KAAA,CAAA,KAAA,GAAa;AACTI,cAAAA,WAAW,EADF,CAAA;AAETC,cAAAA,QAAQ,EAFC,CAAA;AAGTC,cAAAA,MAAM,EAHG,IAAA;AAITC,cAAAA,YAAY,EAJH,CAAA;AAKTC,cAAAA,IALS,EAAA,SAAA,IAAA,GAKF,CALE,CAAA;AAMTC,cAAAA,KANS,EAAA,SAAA,KAAA,GAMD,CANC,CAAA;AAOTC,cAAAA,MAAM,EAAE;AAPC,aAAb;AAUA;;AACA,YAAA,KAAA,CAAA,SAAA,GAAiBhF,MAAM,CAANA,SAAAA,CAAjB,WAAiBA,EAAjB;AACA;;AACA,YAAA,KAAA,CAAA,eAAA,GAAuBA,MAAM,CAA7B,eAAA;AACA;;AACA,YAAA,KAAA,CAAA,KAAA,GAAA,IAAA;AACA;;AACA,YAAA,KAAA,CAAA,YAAA,GAAA,CAAA;AACA;;AACA,YAAA,KAAA,CAAA,MAAA,GAAA,CAAA;AACA;;AACA,YAAA,KAAA,CAAA,OAAA,GAAA,KAAA;AACA;;AACA,YAAA,KAAA,CAAA,MAAA,GAAA,IAAA;AACA;;AACA,YAAA,KAAA,CAAA,SAAA,GAAA,IAAA;AACA;;AACA,YAAA,KAAA,CAAA,cAAA,GAAA,EAAA;AArCgB,mBAAA,KAAA;AAsCnB;AAED;;;;;;;mCAGO;AACH,mBAAA,eAAA,CAAqB,KAAA,MAAA,CAArB,SAAA;AACA,mBAAA,WAAA;AACH;AAED;;;;;;mDAGuB;AAAA,kBAAA,MAAA,GAAA,IAAA;;AACnB,mBAAA,cAAA,CAAA,KAAA,GAA4B,YAAM;AAC9B,gBAAA,MAAI,CAAJ,SAAA,CAAA,OAAA,EAAA,6BAAA;AADJ,eAAA;;AAGA,mBAAA,cAAA,CAAA,OAAA,GAA8B,YAAM;AAChC,gBAAA,MAAI,CAAJ,SAAA,CAAA,SAAA;AADJ,eAAA;;AAGA,mBAAA,cAAA,CAAA,KAAA,GAA4B,YAAM;AAC9B,gBAAA,MAAI,CAAJ,SAAA,CAAA,QAAA;AARe,eAOnB,CAPmB,CAUnB;AACA;;;AACA,mBAAA,cAAA,CAAA,IAAA,GAA2B,YAAM;AAC7B,gBAAA,MAAI,CAAJ,SAAA,CAAA,MAAA;AADJ,eAAA;;AAGA,mBAAA,cAAA,CAAA,KAAA,GAA4B,YAAM;AAC9B,gBAAA,MAAI,CAAJ,SAAA,CAAA,OAAA;AADJ,eAAA;;AAGA,mBAAA,cAAA,CAAA,MAAA,GAA6B,UAAA,KAAA,EAAS;AAClC,gBAAA,MAAI,CAAJ,SAAA,CAAA,MAAA;AADJ,eAAA;;AAGA,mBAAA,cAAA,CAAA,YAAA,GAAmC,UAAA,KAAA,EAAS;AACxC,gBAAA,MAAI,CAAJ,OAAA,GAAe,MAAI,CAAJ,KAAA,CAAf,KAAA;;AACA,oBAAI,MAAI,CAAR,OAAA,EAAkB;AACd,kBAAA,MAAI,CAAJ,MAAA,GAAA,CAAA;AADJ,iBAAA,MAEO;AACH,kBAAA,MAAI,CAAJ,MAAA,GAAc,MAAI,CAAJ,KAAA,CAAd,MAAA;AACH;;AACD,gBAAA,MAAI,CAAJ,SAAA,CAAA,QAAA;AA5Be,eAqBnB,CArBmB,CA+BnB;;;AACAiF,cAAAA,MAAM,CAANA,IAAAA,CAAY,KAAZA,cAAAA,EAAAA,OAAAA,CAAyC,UAAA,EAAA,EAAM;AAC3C,gBAAA,MAAI,CAAJ,KAAA,CAAA,mBAAA,CAAA,EAAA,EAAmC,MAAI,CAAJ,cAAA,CAAnC,EAAmC,CAAnC;;AACA,gBAAA,MAAI,CAAJ,KAAA,CAAA,gBAAA,CAAA,EAAA,EAAgC,MAAI,CAAJ,cAAA,CAAhC,EAAgC,CAAhC;AAFJA,eAAAA;AAIH;AAED;;;;;;0CAGc;AAAA,kBAAA,MAAA,GAAA,IAAA;;AACV,kBAAMC,cAAc,GAAG,SAAjBA,cAAiB,GAAM;AACzB,oBAAI,MAAI,CAAR,QAAI,EAAJ,EAAqB;AACjB;AACH;;AACD,gBAAA,MAAI,CAAJ,SAAA,CAAA,cAAA,EAA+B,MAAI,CAJV,cAIM,EAA/B,EAJyB,CAMzB;;;AACApF,gBAAAA,IAAI,CAAJA,KAAAA,CAAAA,cAAAA;AAPJ,eAAA;;AAUA,mBAAA,EAAA,CAAA,MAAA,EAXU,cAWV,EAXU,CAaV;AACA;;AACA,mBAAA,EAAA,CAAA,OAAA,EAAiB,YAAM;AACnB,gBAAA,MAAI,CAAJ,SAAA,CAAA,cAAA,EAA+B,MAAI,CAAnC,cAA+B,EAA/B;AADJ,eAAA;AAGH;AAED;;;;;;;;;;;;;;iCAWKqF,G,EAAKC,S,EAAW7G,K,EAAO8G,O,EAAS;AACjC,kBAAMd,KAAK,GAAGpE,QAAQ,CAARA,aAAAA,CAAuB,KAArC,SAAcA,CAAd;AACAoE,cAAAA,KAAK,CAALA,QAAAA,GAAiB,KAAA,MAAA,CAAjBA,aAAAA;AACAA,cAAAA,KAAK,CAALA,QAAAA,GAAiB,KAAA,MAAA,CAAA,QAAA,IAAjBA,KAAAA;AACAA,cAAAA,KAAK,CAALA,OAAAA,GAAgBc,OAAO,IAAPA,IAAAA,GAAAA,MAAAA,GAAhBd,OAAAA;AACAA,cAAAA,KAAK,CAALA,GAAAA,GAAAA,GAAAA;AACAA,cAAAA,KAAK,CAALA,KAAAA,CAAAA,KAAAA,GAAAA,MAAAA;AAEA,kBAAMe,SAAS,GAAGF,SAAS,CAATA,aAAAA,CAAwB,KAA1C,SAAkBA,CAAlB;;AACA,kBAAA,SAAA,EAAe;AACXA,gBAAAA,SAAS,CAATA,WAAAA,CAAAA,SAAAA;AACH;;AACDA,cAAAA,SAAS,CAATA,WAAAA,CAAAA,KAAAA;;AAEA,mBAAA,KAAA,CAAA,KAAA,EAAA,KAAA;AACH;AAED;;;;;;;;;oCAMQG,G,EAAKhH,K,EAAO;AAChBgH,cAAAA,GAAG,CAAHA,QAAAA,GAAe,KAAA,MAAA,CAAfA,aAAAA;AACAA,cAAAA,GAAG,CAAHA,QAAAA,GAAe,KAAA,MAAA,CAAA,QAAA,IAAfA,KAAAA;;AAEA,mBAAA,KAAA,CAAA,GAAA,EAAA,KAAA;AACH;AAED;;;;;;;;;;;;;kCAUMhB,K,EAAOhG,K,EAAO;AAChB;AACA,kBACI,EAAEgG,KAAK,YAAP,gBAAA,KACA,OAAOA,KAAK,CAAZ,gBAAA,KAFJ,WAAA,EAGE;AACE,sBAAM,IAAA,KAAA,CAAN,8CAAM,CAAN;AANY,eAAA,CAShB;AACA;;;AACA,kBAAI,OAAOA,KAAK,CAAZ,IAAA,IAAJ,UAAA,EAAqC;AACjC;AACA;AACA;AACAA,gBAAAA,KAAK,CAALA,IAAAA;AACH;;AAED,mBAAA,KAAA,GAAA,KAAA;;AACA,mBAAA,oBAAA;;AACA,mBAAA,KAAA,GAAA,KAAA;AACA,mBAAA,SAAA,GAAA,IAAA;AACA,mBAAA,MAAA,GAAA,IAAA;AACA,mBAAA,OAAA,GAAeA,KAAK,CAApB,KAAA;AACA,mBAAA,eAAA,CAAqB,KAArB,YAAA;AACA,mBAAA,SAAA,CAAe,KAAf,MAAA;AACH;AAED;;;;;;;;uCAKW;AACP,qBAAO,CAAC,KAAD,KAAA,IAAe,KAAA,KAAA,CAAtB,MAAA;AACH;AAED;;;;;;;;0CAKc;AACV,kBAAI,KAAJ,gBAAA,EAA2B;AACvB,uBAAO,KAAP,gBAAA;AACH;;AACD,kBAAII,QAAQ,GAAG,CAAC,KAAA,MAAA,IAAe,KAAhB,KAAA,EAAf,QAAA;;AACA,kBAAIA,QAAQ,IAAZ,QAAA,EAA0B;AACtB;AACAA,gBAAAA,QAAQ,GAAG,KAAA,KAAA,CAAA,QAAA,CAAA,GAAA,CAAXA,CAAW,CAAXA;AACH;;AACD,qBAAA,QAAA;AACH;AAED;;;;;;;;;6CAMiB;AACb,qBAAO,KAAA,KAAA,IAAc,KAAA,KAAA,CAArB,WAAA;AACH;AAED;;;;;;;;gDAKoB;AAChB,qBAAO,KAAA,cAAA,KAAwB,KAAxB,WAAwB,EAAxB,IAAP,CAAA;AACH;AAED;;;;;;;;8CAKkB;AACd,qBAAO,KAAA,YAAA,IAAqB,KAAA,KAAA,CAA5B,YAAA;AACH;AAED;;;;;;;;4CAKgBa,K,EAAO;AACnB,mBAAA,YAAA,GAAoBA,KAAK,IAAzB,CAAA;AACA,mBAAA,KAAA,CAAA,YAAA,GAA0B,KAA1B,YAAA;AACH;AAED;;;;;;;;mCAKO7G,K,EAAO;AACV,kBAAIA,KAAK,IAAT,IAAA,EAAmB;AACf,qBAAA,KAAA,CAAA,WAAA,GAAA,KAAA;AACH;;AACD,mBAAA,YAAA;AACH;AAED;;;;;;;;;;;;iCASKA,K,EAAOC,G,EAAK;AACb,mBAAA,MAAA,CAAA,KAAA;AACA,kBAAM6G,OAAO,GAAG,KAAA,KAAA,CAAhB,IAAgB,EAAhB;AACA7G,cAAAA,GAAG,IAAI,KAAA,UAAA,CAAPA,GAAO,CAAPA;AAEA,qBAAA,OAAA;AACH;AAED;;;;;;;;;oCAMQ;AACJ,kBAAA,OAAA;;AAEA,kBAAI,KAAJ,KAAA,EAAgB;AACZ6G,gBAAAA,OAAO,GAAG,KAAA,KAAA,CAAVA,KAAU,EAAVA;AACH;;AACD,mBAAA,YAAA;AAEA,qBAAA,OAAA;AACH;AAED;;;;;;;;uCAKW7G,G,EAAK;AAAA,kBAAA,MAAA,GAAA,IAAA;;AACZ,mBAAA,YAAA;;AAEA,mBAAA,UAAA,GAAkB,UAAA,IAAA,EAAQ;AACtB,oBAAI8G,IAAI,IAAR,GAAA,EAAiB;AACb,kBAAA,MAAI,CAAJ,KAAA;;AACA,kBAAA,MAAI,CAAJ,MAAA,CAAA,GAAA;AACH;AAJL,eAAA;;AAMA,mBAAA,EAAA,CAAA,cAAA,EAAwB,KAAxB,UAAA;AACH;AAED;;;;2CACe;AACX,kBAAI,KAAJ,UAAA,EAAqB;AACjB,qBAAA,EAAA,CAAA,cAAA,EAAwB,KAAxB,UAAA;AACA,qBAAA,UAAA,GAAA,IAAA;AACH;AACJ;AAED;;;;;;;;;;;;;qCAUS7G,M,EAAQC,K,EAAOE,I,EAAM;AAC1B,kBAAI,KAAJ,MAAA,EAAiB;AACb,uBAAA,IAAA,CAAA,eAAA,CAAA,YAAA,CAAA,SAAA,CAAA,EAAA,UAAA,EAAA,IAAA,CAAA,CAAA,IAAA,CAAA,IAAA,EAAA,MAAA,EAAA,KAAA,EAAA,IAAA,CAAA;AACH;;AACD,qBAAO,KAAA,KAAA,IAAP,EAAA;AACH;AAED;;;;;;;;;;sCAOU2G,Q,EAAU;AAChB,kBAAA,QAAA,EAAc;AACV,oBAAI,CAAC,KAAA,KAAA,CAAL,SAAA,EAA2B;AACvB,yBAAOC,OAAO,CAAPA,MAAAA,CACH,IAAA,KAAA,CADJ,4CACI,CADGA,CAAP;AAGH;;AACD,uBAAO,KAAA,KAAA,CAAA,SAAA,CAAP,QAAO,CAAP;AACH;;AAED,qBAAOA,OAAO,CAAPA,MAAAA,CAAe,IAAA,KAAA,CAAU,uBAAhC,QAAsB,CAAfA,CAAP;AACH;AAED;;;;;;;;wCAKY;AACR,qBAAO,KAAP,MAAA;AACH;AAED;;;;;;;;sCAKUJ,K,EAAO;AACb,mBAAA,MAAA,GADa,KACb,CADa,CAEb;;AACA,kBAAI,KAAA,KAAA,CAAA,MAAA,KAAsB,KAA1B,MAAA,EAAuC;AACnC,qBAAA,KAAA,CAAA,MAAA,GAAoB,KAApB,MAAA;AACH;AACJ;AAED;;;;;;;sCAIU;AAAA,kBAAA,MAAA,GAAA,IAAA;;AACN,mBAAA,KAAA;AACA,mBAAA,KAAA;AACA,mBAAA,SAAA,GAHM,IAGN,CAHM,CAKN;;AACAP,cAAAA,MAAM,CAANA,IAAAA,CAAY,KAAZA,cAAAA,EAAAA,OAAAA,CAAyC,UAAA,EAAA,EAAM;AAC3C,oBAAI,MAAI,CAAR,KAAA,EAAgB;AACZ,kBAAA,MAAI,CAAJ,KAAA,CAAA,mBAAA,CAAA,EAAA,EAAmC,MAAI,CAAJ,cAAA,CAAnC,EAAmC,CAAnC;AACH;AAHLA,eAAAA;;AAMA,kBACI,KAAA,MAAA,CAAA,2BAAA,IACA,KADA,KAAA,IAEA,KAAA,KAAA,CAHJ,UAAA,EAIE;AACE,qBAAA,KAAA,CAAA,UAAA,CAAA,WAAA,CAAkC,KAAlC,KAAA;AACH;;AAED,mBAAA,KAAA,GAAA,IAAA;AACH;;;;UAhaqCR,SAAAA,CAAAA,O;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACN1C;;;;;;;YAKqBoB,S;;;AACjB;;;AAGA,mBAAA,SAAA,GAAc;AAAA,YAAA,eAAA,CAAA,IAAA,EAAA,SAAA,CAAA;;AACV,iBAAA,cAAA;AACH;AAED;;;;;;;6CAGiB;AACb;;;;;;AAMA,mBAAA,eAAA,GAAA,EAAA;AACA;;;;;;AAKA,mBAAA,eAAA,GAAuB,CAAvB,CAAA;AACH;AAED;;;;;;;;;;;gDAQoBhH,M,EAAQF,K,EAAOC,G,EAAK;AACpC,kBAAIC,MAAM,IAAI,KAAd,eAAA,EAAoC;AAChC,qBAAA,cAAA;AACA,qBAAA,eAAA,GAAA,MAAA;AAHgC,eAAA,CAMpC;;;AACA,kBAAIiH,cAAc,GAAlB,EAAA;AACA,kBAAIxG,CAAC,GAR+B,CAQpC,CARoC,CASpC;;AACA,qBACIA,CAAC,GAAG,KAAA,eAAA,CAAJA,MAAAA,IACA,KAAA,eAAA,CAAA,CAAA,IAFJ,KAAA,EAGE;AACEA,gBAAAA,CAAC;AAd+B,eAAA,CAgBpC;AACA;AACA;AACA;;;AACA,kBAAIA,CAAC,GAADA,CAAAA,IAAJ,CAAA,EAAgB;AACZwG,gBAAAA,cAAc,CAAdA,IAAAA,CAAAA,KAAAA;AACH;;AACD,qBACIxG,CAAC,GAAG,KAAA,eAAA,CAAJA,MAAAA,IACA,KAAA,eAAA,CAAA,CAAA,KAFJ,GAAA,EAGE;AACEwG,gBAAAA,cAAc,CAAdA,IAAAA,CAAoB,KAAA,eAAA,CAApBA,CAAoB,CAApBA;AACAxG,gBAAAA,CAAC;AA5B+B,eAAA,CA8BpC;;;AACA,kBAAIA,CAAC,GAADA,CAAAA,IAAJ,CAAA,EAAgB;AACZwG,gBAAAA,cAAc,CAAdA,IAAAA,CAAAA,GAAAA;AAhCgC,eAAA,CAmCpC;;;AACAA,cAAAA,cAAc,GAAG,cAAc,CAAd,MAAA,CAAsB,UAAA,IAAA,EAAA,GAAA,EAAA,GAAA,EAAoB;AACvD,oBAAIlE,GAAG,IAAP,CAAA,EAAc;AACV,yBAAOmE,IAAI,IAAIC,GAAG,CAACpE,GAAG,GAAtB,CAAkB,CAAlB;AADJ,iBAAA,MAEO,IAAIA,GAAG,IAAIoE,GAAG,CAAHA,MAAAA,GAAX,CAAA,EAA2B;AAC9B,yBAAOD,IAAI,IAAIC,GAAG,CAACpE,GAAG,GAAtB,CAAkB,CAAlB;AACH;;AACD,uBAAOmE,IAAI,IAAIC,GAAG,CAACpE,GAAG,GAAfmE,CAAW,CAAXA,IAAwBA,IAAI,IAAIC,GAAG,CAACpE,GAAG,GAA9C,CAA0C,CAA1C;AA1CgC,eAoCnB,CAAjBkE,CApCoC,CA6CpC;AACA;AACA;;AACA,mBAAA,eAAA,GAAuB,KAAA,eAAA,CAAA,MAAA,CAAvB,cAAuB,CAAvB;AACA,mBAAA,eAAA,GAAuB,KAAA,eAAA,CAAA,IAAA,CACb,UAAA,CAAA,EAAA,CAAA,EAAA;AAAA,uBAAUG,CAAC,GAAX,CAAA;AADa,eAAA,EAAA,MAAA,CAEX,UAAA,IAAA,EAAA,GAAA,EAAA,GAAA,EAAoB;AACxB,oBAAIrE,GAAG,IAAP,CAAA,EAAc;AACV,yBAAOmE,IAAI,IAAIC,GAAG,CAACpE,GAAG,GAAtB,CAAkB,CAAlB;AADJ,iBAAA,MAEO,IAAIA,GAAG,IAAIoE,GAAG,CAAHA,MAAAA,GAAX,CAAA,EAA2B;AAC9B,yBAAOD,IAAI,IAAIC,GAAG,CAACpE,GAAG,GAAtB,CAAkB,CAAlB;AACH;;AACD,uBAAOmE,IAAI,IAAIC,GAAG,CAACpE,GAAG,GAAfmE,CAAW,CAAXA,IAAwBA,IAAI,IAAIC,GAAG,CAACpE,GAAG,GAA9C,CAA0C,CAA1C;AAzD4B,eAiDb,CAAvB,CAjDoC,CA4DpC;AACA;;AACA,kBAAMsE,kBAAkB,GAAxB,EAAA;;AACA,mBAAK5G,CAAC,GAAN,CAAA,EAAYA,CAAC,GAAGwG,cAAc,CAA9B,MAAA,EAAuCxG,CAAC,IAAxC,CAAA,EAA+C;AAC3C4G,gBAAAA,kBAAkB,CAAlBA,IAAAA,CAAwB,CAACJ,cAAc,CAAf,CAAe,CAAf,EAAoBA,cAAc,CAACxG,CAAC,GAA5D4G,CAA0D,CAAlC,CAAxBA;AACH;;AAED,qBAAA,kBAAA;AACH;AAED;;;;;;;;6CAKiB;AACb,kBAAMC,mBAAmB,GAAzB,EAAA;AACA,kBAAA,CAAA;;AACA,mBAAK7G,CAAC,GAAN,CAAA,EAAYA,CAAC,GAAG,KAAA,eAAA,CAAhB,MAAA,EAA6CA,CAAC,IAA9C,CAAA,EAAqD;AACjD6G,gBAAAA,mBAAmB,CAAnBA,IAAAA,CAAyB,CACrB,KAAA,eAAA,CADqB,CACrB,CADqB,EAErB,KAAA,eAAA,CAAqB7G,CAAC,GAF1B6G,CAEI,CAFqB,CAAzBA;AAIH;;AACD,qBAAA,mBAAA;AACH;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC7HL,YAAA,SAAA,GAAA,sBAAA,CAAA,mBAAA;AAAA;AAAA,gCAAA,CAAA,CAAA;;;;;;;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAyCe,iBAAA,IAAA,CAAA,OAAA,EAAuB;AAClC,cAAMC,QAAQ,GAAG,IAAIrG,SAAAA,CAArB,OAAiB,EAAjB;AACA,cAAMsG,GAAG,GAAG,IAAZ,cAAY,EAAZ;AACA,cAAIC,QAAQ,GAAZ,KAAA;AACAD,UAAAA,GAAG,CAAHA,IAAAA,CAASE,OAAO,CAAPA,MAAAA,IAATF,KAAAA,EAAkCE,OAAO,CAAzCF,GAAAA,EAAAA,IAAAA;AACAA,UAAAA,GAAG,CAAHA,YAAAA,GAAmBE,OAAO,CAAPA,YAAAA,IAAnBF,MAAAA;;AAEA,cAAIE,OAAO,CAAX,GAAA,EAAiB;AACb,gBAAIA,OAAO,CAAPA,GAAAA,CAAJ,cAAA,EAAgC;AAC5B;AACAA,cAAAA,OAAO,CAAPA,GAAAA,CAAAA,cAAAA,CAAAA,OAAAA,CAAmC,UAAA,MAAA,EAAU;AACzCF,gBAAAA,GAAG,CAAHA,gBAAAA,CAAqBG,MAAM,CAA3BH,GAAAA,EAAiCG,MAAM,CAAvCH,KAAAA;AADJE,eAAAA;AAGH;;AACD,gBAAIA,OAAO,CAAPA,GAAAA,CAAJ,eAAA,EAAiC;AAC7B;AACAF,cAAAA,GAAG,CAAHA,eAAAA,GAAAA,IAAAA;AACH;AACJ;;AAEDA,UAAAA,GAAG,CAAHA,gBAAAA,CAAAA,UAAAA,EAAiC,UAAA,CAAA,EAAK;AAClCD,YAAAA,QAAQ,CAARA,SAAAA,CAAAA,UAAAA,EAAAA,CAAAA;;AACA,gBAAI1F,CAAC,CAADA,gBAAAA,IAAsBA,CAAC,CAADA,MAAAA,IAAYA,CAAC,CAAvC,KAAA,EAA+C;AAC3C4F,cAAAA,QAAQ,GAARA,IAAAA;AACH;AAJLD,WAAAA;AAMAA,UAAAA,GAAG,CAAHA,gBAAAA,CAAAA,MAAAA,EAA6B,UAAA,CAAA,EAAK;AAC9B,gBAAI,CAAJ,QAAA,EAAe;AACXD,cAAAA,QAAQ,CAARA,SAAAA,CAAAA,UAAAA,EAAAA,CAAAA;AACH;;AACDA,YAAAA,QAAQ,CAARA,SAAAA,CAAAA,MAAAA,EAAAA,CAAAA;;AACA,gBAAI,OAAOC,GAAG,CAAV,MAAA,IAAqB,OAAOA,GAAG,CAAnC,MAAA,EAA4C;AACxCD,cAAAA,QAAQ,CAARA,SAAAA,CAAAA,SAAAA,EAA8BC,GAAG,CAAjCD,QAAAA,EAAAA,CAAAA;AADJ,aAAA,MAEO;AACHA,cAAAA,QAAQ,CAARA,SAAAA,CAAAA,OAAAA,EAAAA,CAAAA;AACH;AATLC,WAAAA;AAWAA,UAAAA,GAAG,CAAHA,gBAAAA,CAAAA,OAAAA,EAA8B,UAAA,CAAA,EAAC;AAAA,mBAAID,QAAQ,CAARA,SAAAA,CAAAA,OAAAA,EAAJ,CAAIA,CAAJ;AAA/BC,WAAAA;AACAA,UAAAA,GAAG,CAAHA,IAAAA;AACAD,UAAAA,QAAQ,CAARA,GAAAA,GAAAA,GAAAA;AACA,iBAAA,QAAA;AACH;;;;;;;;;;;;;;;;;;;;;;ACpFD;;;;;;;;;;AASe,iBAAA,MAAA,CAAA,IAAA,EAAkC;AAC7CM,UAAAA,OAAO,CAAPA,IAAAA,CAAAA,sDAAAA;;AAD6C,eAAA,IAAA,IAAA,GAAA,SAAA,CAAA,MAAA,EAATD,OAAS,GAAA,IAAA,KAAA,CAAA,IAAA,GAAA,CAAA,GAAA,IAAA,GAAA,CAAA,GAAA,CAAA,CAAA,EAAA,IAAA,GAAA,CAAA,EAAA,IAAA,GAAA,IAAA,EAAA,IAAA,EAAA,EAAA;AAATA,YAAAA,OAAS,CAAA,IAAA,GAAA,CAAA,CAATA,GAAS,SAAA,CAAA,IAAA,CAATA;AAAS;;AAE7CA,UAAAA,OAAO,CAAPA,OAAAA,CAAgB,UAAA,MAAA,EAAU;AACtBxB,YAAAA,MAAM,CAANA,IAAAA,CAAAA,MAAAA,EAAAA,OAAAA,CAA4B,UAAA,GAAA,EAAO;AAC/B0B,cAAAA,IAAI,CAAJA,GAAI,CAAJA,GAAYC,MAAM,CAAlBD,GAAkB,CAAlBA;AADJ1B,aAAAA;AADJwB,WAAAA;AAKA,iBAAA,IAAA;AACH;;;;;;;;;;;;;;;;;;;;;;;ACbD,YAAA,SAAA,GAAA,sBAAA,CAAA,mBAAA;AAAA;AAAA,gCAAA,CAAA,CAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;YAEMI,e;;;AACF;;;;;;;AAOA,mBAAA,eAAA,CAAA,QAAA,EAAA,aAAA,EAAA,QAAA,EAA+C;AAAA,YAAA,eAAA,CAAA,IAAA,EAAA,eAAA,CAAA;;AAC3C,iBAAA,QAAA,GAAA,QAAA;AACA,iBAAA,QAAA,CAAA,OAAA,GAAwBC,QAAQ,CAARA,IAAAA,CAAxB,SAAwBA,EAAxB;AAEA,iBAAA,KAAA,GAAaC,QAAQ,CAAA,aAAA,EAArB,EAAqB,CAArB;AACA,iBAAA,MAAA,GAAA,CAAA;AACH;AAED;;;;;;;;;;;kCAOMC,U,EAAY;AAAA,kBAAA,KAAA,GAAA,IAAA;;AACd,kBAAMC,IAAI,GAAG,SAAPA,IAAO,GAAM;AACf;AACA;AACA,gBAAA,KAAI,CAAJ,QAAA,CAAA,OAAA,CAAA,IAAA,GAAA,IAAA,CAEU,UAAA,IAAA,EAAqB;AAAA,sBAAlBC,IAAkB,GAAA,IAAA,CAAlBA,IAAkB;AAAA,sBAAZ1B,KAAY,GAAA,IAAA,CAAZA,KAAY,CAAA,CACvB;AACA;AACA;;AACA,sBAAA,IAAA,EAAU;AACN;AACA,wBAAI,KAAI,CAAJ,KAAA,KAAJ,CAAA,EAAsB;AAClB,sBAAA,KAAI,CAAJ,QAAA,CAAA,UAAA,CAAA,IAAA,CAA8B,KAAI,CAAlC,QAAA,EAA6C;AACzC2B,wBAAAA,MAAM,EAAE,KAAI,CAD6B,MAAA;AAEzCC,wBAAAA,KAAK,EAAE,KAAI,CAF8B,KAAA;AAGzCC,wBAAAA,gBAAgB,EAAE;AAHuB,uBAA7C;AAHE,qBAAA,CASN;;;AACAL,oBAAAA,UAAU,CAAVA,KAAAA;AACA;AACH;;AAED,kBAAA,KAAI,CAAJ,MAAA,IAAexB,KAAK,CAApB,UAAA;;AACA,kBAAA,KAAI,CAAJ,QAAA,CAAA,UAAA,CAAA,IAAA,CAA8B,KAAI,CAAlC,QAAA,EAA6C;AACzC2B,oBAAAA,MAAM,EAAE,KAAI,CAD6B,MAAA;AAEzCC,oBAAAA,KAAK,EAAE,KAAI,CAF8B,KAAA;AAGzCC,oBAAAA,gBAAgB,EAAE,EAAE,KAAI,CAAJ,KAAA,KAAF,CAAA;AAHuB,mBAA7C,EAnBuB,CAwBvB;;;AACAL,kBAAAA,UAAU,CAAVA,OAAAA,CAAAA,KAAAA;AACAC,kBAAAA,IAAI;AA5BZ,iBAAA,EAAA,KAAA,CA8BW,UAAA,KAAA,EAAS;AACZD,kBAAAA,UAAU,CAAVA,KAAAA,CAAAA,KAAAA;AA/BR,iBAAA;AAHJ,eAAA;;AAsCAC,cAAAA,IAAI;AACP;;;;;AAGL;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAyCe,iBAAA,SAAA,CAAA,OAAA,EAA4B;AACvC,cAAI,CAAJ,OAAA,EAAc;AACV,kBAAM,IAAA,KAAA,CAAN,uBAAM,CAAN;AADJ,WAAA,MAEO,IAAI,CAACV,OAAO,CAAZ,GAAA,EAAkB;AACrB,kBAAM,IAAA,KAAA,CAAN,mBAAM,CAAN;AACH;;AACD,cAAMH,QAAQ,GAAG,IAAIrG,SAAAA,CAArB,OAAiB,EAAjB;AACA,cAAMuH,YAAY,GAAG,IAArB,OAAqB,EAArB;AACA,cAAMC,YAAY,GAAG,IAAA,OAAA,CAAYhB,OAAO,CARD,GAQlB,CAArB,CARuC,CAUvC;;AACAH,UAAAA,QAAQ,CAARA,UAAAA,GAAsB,IAXiB,eAWjB,EAAtBA,CAXuC,CAavC;;AACA,cAAIG,OAAO,IAAIA,OAAO,CAAtB,cAAA,EAAuC;AACnC;AACAA,YAAAA,OAAO,CAAPA,cAAAA,CAAAA,OAAAA,CAA+B,UAAA,MAAA,EAAU;AACrCe,cAAAA,YAAY,CAAZA,MAAAA,CAAoBd,MAAM,CAA1Bc,GAAAA,EAAgCd,MAAM,CAAtCc,KAAAA;AADJf,aAAAA;AAhBmC,WAAA,CAqBvC;;;AACA,cAAMiB,YAAY,GAAGjB,OAAO,CAAPA,YAAAA,IAArB,MAAA;AACA,cAAMkB,YAAY,GAAG;AACjBC,YAAAA,MAAM,EAAEnB,OAAO,CAAPA,MAAAA,IADS,KAAA;AAEjBoB,YAAAA,OAAO,EAFU,YAAA;AAGjBC,YAAAA,IAAI,EAAErB,OAAO,CAAPA,IAAAA,IAHW,MAAA;AAIjBsB,YAAAA,WAAW,EAAEtB,OAAO,CAAPA,WAAAA,IAJI,aAAA;AAKjBuB,YAAAA,KAAK,EAAEvB,OAAO,CAAPA,KAAAA,IALU,SAAA;AAMjBwB,YAAAA,QAAQ,EAAExB,OAAO,CAAPA,QAAAA,IANO,QAAA;AAOjByB,YAAAA,QAAQ,EAAEzB,OAAO,CAAPA,QAAAA,IAPO,QAAA;AAQjB0B,YAAAA,MAAM,EAAE7B,QAAQ,CAARA,UAAAA,CAAoB6B;AARX,WAArB;AAWAC,UAAAA,KAAK,CAAA,YAAA,EAALA,YAAK,CAALA,CAAAA,IAAAA,CACU,UAAA,QAAA,EAAY;AACd;AACA9B,YAAAA,QAAQ,CAARA,QAAAA,GAAAA,QAAAA;AAEA,gBAAI+B,iBAAiB,GAArB,IAAA;;AACA,gBAAI,CAACrB,QAAQ,CAAb,IAAA,EAAoB;AAChB;AACA;AACAqB,cAAAA,iBAAiB,GAAjBA,KAAAA;AARU,aAAA,CAWd;;;AACA,gBAAMC,aAAa,GAAGtB,QAAQ,CAARA,OAAAA,CAAAA,GAAAA,CAAtB,gBAAsBA,CAAtB;;AACA,gBAAIsB,aAAa,KAAjB,IAAA,EAA4B;AACxB;AACA;AACA;AACAD,cAAAA,iBAAiB,GAAjBA,KAAAA;AACH;;AAED,gBAAI,CAAJ,iBAAA,EAAwB;AACpB;AACA,qBAAA,QAAA;AAtBU,aAAA,CAyBd;;;AACA/B,YAAAA,QAAQ,CAARA,UAAAA,GAAsB,UAAA,CAAA,EAAK;AACvBA,cAAAA,QAAQ,CAARA,SAAAA,CAAAA,UAAAA,EAAAA,CAAAA;AADJA,aAAAA;;AAIA,mBAAO,IAAA,QAAA,CACH,IAAA,cAAA,CACI,IAAA,eAAA,CAAA,QAAA,EAAA,aAAA,EAFD,QAEC,CADJ,CADG,EAAP,YAAO,CAAP;AA/BR8B,WAAAA,EAAAA,IAAAA,CAsCU,UAAA,QAAA,EAAY;AACd,gBAAA,MAAA;;AACA,gBAAIpB,QAAQ,CAAZ,EAAA,EAAiB;AACb,sBAAA,YAAA;AACI,qBAAA,aAAA;AACI,yBAAOA,QAAQ,CAAf,WAAOA,EAAP;;AAEJ,qBAAA,MAAA;AACI,yBAAOA,QAAQ,CAAf,IAAOA,EAAP;;AAEJ,qBAAA,MAAA;AACI,yBAAOA,QAAQ,CAAf,IAAOA,EAAP;;AAEJ,qBAAA,MAAA;AACI,yBAAOA,QAAQ,CAAf,IAAOA,EAAP;;AAEJ;AACIuB,kBAAAA,MAAM,GAAG,2BAATA,YAAAA;AACA;AAfR;AAiBH;;AACD,gBAAI,CAAJ,MAAA,EAAa;AACTA,cAAAA,MAAM,GAAG,wBAAwBvB,QAAQ,CAAzCuB,MAAAA;AACH;;AACD,kBAAM,IAAA,KAAA,CAAN,MAAM,CAAN;AA9DRH,WAAAA,EAAAA,IAAAA,CAgEU,UAAA,QAAA,EAAY;AACd9B,YAAAA,QAAQ,CAARA,SAAAA,CAAAA,SAAAA,EAAAA,QAAAA;AAjER8B,WAAAA,EAAAA,KAAAA,CAmEW,UAAA,KAAA,EAAS;AACZ9B,YAAAA,QAAQ,CAARA,SAAAA,CAAAA,OAAAA,EAAAA,KAAAA;AAtG+B,WAkCvC8B,EAlCuC,CAyGvC;;AACA9B,UAAAA,QAAQ,CAARA,YAAAA,GAAAA,YAAAA;AACA,iBAAA,QAAA;AACH;;;;;;;;;;;;;;;;;;;;;;;AC7ND,YAAA,sBAAA,GAAA,sBAAA,CAAA,mBAAA;AAAA;AAAA,+CAAA,CAAA,CAAA;;;;;;;AAEA;;;;;;;;;;AAQe,iBAAA,KAAA,CAAA,IAAA,EAAqB;AAChC,iBAAO,YAAA;AAAA,iBAAA,IAAA,IAAA,GAAA,SAAA,CAAA,MAAA,EAAIkC,IAAJ,GAAA,IAAA,KAAA,CAAA,IAAA,CAAA,EAAA,IAAA,GAAA,CAAA,EAAA,IAAA,GAAA,IAAA,EAAA,IAAA,EAAA,EAAA;AAAIA,cAAAA,IAAJ,CAAA,IAAA,CAAIA,GAAJ,SAAA,CAAA,IAAA,CAAIA;AAAJ;;AAAA,mBAAa,CAAA,GAAA,sBAAA,CAAA,OAAA,EAAkB,YAAA;AAAA,qBAAMC,IAAI,CAAJA,KAAAA,CAAAA,KAAAA,CAAAA,EAAN,IAAMA,CAAN;AAA/B,aAAa,CAAb;AAAP,WAAA;AACH;;;;;;;;;;;;;;;;;;;;;;ACZD;;;;;;;;;;;;AAWe,iBAAA,KAAA,CAAA,MAAA,EAAuB;AAClC,cAAIC,MAAM,KAAV,SAAA,EAA0B;AACtBA,YAAAA,MAAM,GAANA,aAAAA;AACH;;AACD,iBACIA,MAAM,GACNzJ,IAAI,CAAJA,MAAAA,GAAAA,QAAAA,CAAAA,EAAAA,EAAAA,SAAAA,CAFJ,CAEIA,CAFJ;AAMH;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACrBD,YAAA,KAAA,GAAA,sBAAA,CAAA,mBAAA;AAAA;AAAA,4BAAA,CAAA,CAAA;;AACA,YAAA,MAAA,GAAA,sBAAA,CAAA,mBAAA;AAAA;AAAA,8BAAA,CAAA,CAAA;;AACA,YAAA,IAAA,GAAA,sBAAA,CAAA,mBAAA;AAAA;AAAA,2BAAA,CAAA,CAAA;;AACA,YAAA,IAAA,GAAA,sBAAA,CAAA,mBAAA;AAAA;AAAA,2BAAA,CAAA,CAAA;;AACA,YAAA,SAAA,GAAA,sBAAA,CAAA,mBAAA;AAAA;AAAA,gCAAA,CAAA,CAAA;;AACA,YAAA,OAAA,GAAA,sBAAA,CAAA,mBAAA;AAAA;AAAA,8BAAA,CAAA,CAAA;;AACA,YAAA,MAAA,GAAA,sBAAA,CAAA,mBAAA;AAAA;AAAA,6BAAA,CAAA,CAAA;;AACA,YAAA,sBAAA,GAAA,sBAAA,CAAA,mBAAA;AAAA;AAAA,+CAAA,CAAA,CAAA;;AACA,YAAA,MAAA,GAAA,sBAAA,CAAA,mBAAA;AAAA;AAAA,6BAAA,CAAA,CAAA;;AACA,YAAA,SAAA,GAAA,sBAAA,CAAA,mBAAA;AAAA;AAAA,0CAAA,CAAA,CAAA;;AACA,YAAA,aAAA,GAAA,sBAAA,CAAA,mBAAA;AAAA;AAAA,qCAAA,CAAA,CAAA;;AACA,YAAA,MAAA,GAAA,sBAAA,CAAA,mBAAA;AAAA;AAAA,6BAAA,CAAA,CAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;ACXA;;;;;;;;AAOe,iBAAA,GAAA,CAAA,MAAA,EAAqB;AAChC,cAAI0J,OAAO,GAAG,CAAd,QAAA;AACAxD,UAAAA,MAAM,CAANA,IAAAA,CAAAA,MAAAA,EAAAA,OAAAA,CAA4B,UAAA,CAAA,EAAK;AAC7B,gBAAIyD,MAAM,CAANA,CAAM,CAANA,GAAJ,OAAA,EAAyB;AACrBD,cAAAA,OAAO,GAAGC,MAAM,CAAhBD,CAAgB,CAAhBA;AACH;AAHLxD,WAAAA;AAKA,iBAAA,OAAA;AACH;;;;;;;;;;;;;;;;;;;;;;ACfD;;;;;;;;AAOe,iBAAA,GAAA,CAAA,MAAA,EAAqB;AAChC,cAAI0D,QAAQ,GAAGC,MAAM,CAArB,QAAqB,CAArB;AACA3D,UAAAA,MAAM,CAANA,IAAAA,CAAAA,MAAAA,EAAAA,OAAAA,CAA4B,UAAA,CAAA,EAAK;AAC7B,gBAAIyD,MAAM,CAANA,CAAM,CAANA,GAAJ,QAAA,EAA0B;AACtBC,cAAAA,QAAQ,GAAGD,MAAM,CAAjBC,CAAiB,CAAjBA;AACH;AAHL1D,WAAAA;AAKA,iBAAA,QAAA;AACH;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACfD;;;;;;;AAOA;;;;;YAGqBlF,Q;;;AACjB;;;AAGA,mBAAA,QAAA,GAAc;AAAA,YAAA,eAAA,CAAA,IAAA,EAAA,QAAA,CAAA;AACV;;;;;;;AAKA,iBAAA,QAAA,GAAA,IAAA;AACH;AACD;;;;;;;;;;;+BAOG8I,K,EAAO9E,E,EAAI;AAAA,kBAAA,KAAA,GAAA,IAAA;;AACV,kBAAI,CAAC,KAAL,QAAA,EAAoB;AAChB,qBAAA,QAAA,GAAA,EAAA;AACH;;AAED,kBAAI+E,QAAQ,GAAG,KAAA,QAAA,CAAf,KAAe,CAAf;;AACA,kBAAI,CAAJ,QAAA,EAAe;AACXA,gBAAAA,QAAQ,GAAG,KAAA,QAAA,CAAA,KAAA,IAAXA,EAAAA;AACH;;AACDA,cAAAA,QAAQ,CAARA,IAAAA,CATU,EASVA,EATU,CAWV;;AACA,qBAAO;AACHC,gBAAAA,IAAI,EADD,KAAA;AAEHC,gBAAAA,QAAQ,EAFL,EAAA;AAGHC,gBAAAA,EAAE,EAAE,SAAA,EAAA,CAAA,CAAA,EAAA,EAAA,EAAA;AAAA,yBAAW,KAAI,CAAJ,EAAA,CAAA,CAAA,EAAX,EAAW,CAAX;AAAA;AAHD,eAAP;AAKH;AAED;;;;;;;;;;+BAOGJ,K,EAAO9E,E,EAAI;AACV,kBAAI,CAAC,KAAL,QAAA,EAAoB;AAChB;AACH;;AAED,kBAAM+E,QAAQ,GAAG,KAAA,QAAA,CAAjB,KAAiB,CAAjB;AACA,kBAAA,CAAA;;AACA,kBAAA,QAAA,EAAc;AACV,oBAAA,EAAA,EAAQ;AACJ,uBAAKxJ,CAAC,GAAGwJ,QAAQ,CAARA,MAAAA,GAAT,CAAA,EAA8BxJ,CAAC,IAA/B,CAAA,EAAsCA,CAAtC,EAAA,EAA2C;AACvC,wBAAIwJ,QAAQ,CAARA,CAAQ,CAARA,IAAJ,EAAA,EAAuB;AACnBA,sBAAAA,QAAQ,CAARA,MAAAA,CAAAA,CAAAA,EAAAA,CAAAA;AACH;AACJ;AALL,iBAAA,MAMO;AACHA,kBAAAA,QAAQ,CAARA,MAAAA,GAAAA,CAAAA;AACH;AACJ;AACJ;AAED;;;;;;oCAGQ;AACJ,mBAAA,QAAA,GAAA,IAAA;AACH;AAED;;;;;;;;;;;iCAQKD,K,EAAOK,O,EAAS;AAAA,kBAAA,MAAA,GAAA,IAAA;;AACjB,kBAAMnF,EAAE,GAAG,SAALA,EAAK,GAAa;AAAA,qBAAA,IAAA,IAAA,GAAA,SAAA,CAAA,MAAA,EAATuE,IAAS,GAAA,IAAA,KAAA,CAAA,IAAA,CAAA,EAAA,IAAA,GAAA,CAAA,EAAA,IAAA,GAAA,IAAA,EAAA,IAAA,EAAA,EAAA;AAATA,kBAAAA,IAAS,CAAA,IAAA,CAATA,GAAS,SAAA,CAAA,IAAA,CAATA;AAAS;AACpB;;;AACAY,gBAAAA,OAAO,CAAPA,KAAAA,CAAAA,MAAAA,EAAAA,IAAAA;AACA;;AACAC,gBAAAA,UAAU,CAAC,YAAM;AACb,kBAAA,MAAI,CAAJ,EAAA,CAAA,KAAA,EAAA,EAAA;AADM,iBAAA,EAAVA,CAAU,CAAVA;AAJJ,eAAA;;AAQA,qBAAO,KAAA,EAAA,CAAA,KAAA,EAAP,EAAO,CAAP;AACH;AAED;;;;;;;;;sCAMUN,K,EAAgB;AAAA,mBAAA,IAAA,KAAA,GAAA,SAAA,CAAA,MAAA,EAANP,IAAM,GAAA,IAAA,KAAA,CAAA,KAAA,GAAA,CAAA,GAAA,KAAA,GAAA,CAAA,GAAA,CAAA,CAAA,EAAA,KAAA,GAAA,CAAA,EAAA,KAAA,GAAA,KAAA,EAAA,KAAA,EAAA,EAAA;AAANA,gBAAAA,IAAM,CAAA,KAAA,GAAA,CAAA,CAANA,GAAM,SAAA,CAAA,KAAA,CAANA;AAAM;;AACtB,kBAAI,CAAC,KAAL,QAAA,EAAoB;AAChB;AACH;;AACD,kBAAMQ,QAAQ,GAAG,KAAA,QAAA,CAAjB,KAAiB,CAAjB;AACAA,cAAAA,QAAQ,IACJ,QAAQ,CAAR,OAAA,CAAiB,UAAA,EAAA,EAAM;AACnB/E,gBAAAA,EAAE,CAAFA,KAAAA,CAAAA,KAAAA,CAAAA,EAAAA,IAAAA;AAFR+E,eACI,CADJA;AAIH;;;;;;;;;;;;;;;;;;;;;;;;;;;ACrHL;;;;;;;AAMA,iBAAA,mBAAA,CAAA,KAAA,EAAoC;AAChCD,UAAAA,KAAK,CAALA,eAAAA;AACA1I,UAAAA,QAAQ,CAARA,IAAAA,CAAAA,mBAAAA,CAAAA,OAAAA,EAAAA,mBAAAA,EAAAA,IAAAA;AACH;AAED;;;;;;;AAKe,iBAAA,YAAA,CAAA,MAAA,EAA8B;AACzCA,UAAAA,QAAQ,CAARA,IAAAA,CAAAA,gBAAAA,CAAAA,OAAAA,EAAAA,mBAAAA,EAAAA,IAAAA;AACH;;;;;;;;;;;;;;;;;;;;;;AClBD;;AACA;;;;;;;uBAMe,CACXiJ,MAAM,CAANA,qBAAAA,IACAA,MAAM,CADNA,2BAAAA,IAEAA,MAAM,CAFNA,wBAAAA,IAGAA,MAAM,CAHNA,sBAAAA,IAIAA,MAAM,CAJNA,uBAAAA,IAKC,UAAA,QAAA,EAAA,OAAA,EAAA;AAAA,iBAAuBD,UAAU,CAAA,QAAA,EAAW,OAA5C,EAAiC,CAAjC;AANU,SAAA,EAAA,IAAA,CAAA,MAAA,C;;;;;;;;;;;;;;;;;;;;;;;ACPf;;;;;;;;;AAQe,iBAAA,KAAA,CAAA,EAAA,EAAA,MAAA,EAA2B;AACtClE,UAAAA,MAAM,CAANA,IAAAA,CAAAA,MAAAA,EAAAA,OAAAA,CAA4B,UAAA,IAAA,EAAQ;AAChC,gBAAIhF,EAAE,CAAFA,KAAAA,CAAAA,IAAAA,MAAmBC,MAAM,CAA7B,IAA6B,CAA7B,EAAqC;AACjCD,cAAAA,EAAE,CAAFA,KAAAA,CAAAA,IAAAA,IAAiBC,MAAM,CAAvBD,IAAuB,CAAvBA;AACH;AAHLgF,WAAAA;AAKA,iBAAA,EAAA;AACH;;;;;;;;;;;;;;;;;;;;;;;ACfD,YAAA,IAAA,GAAA,uBAAA,CAAA,mBAAA;AAAA;AAAA,6BAAA,CAAA,CAAA;;AACA,YAAA,OAAA,GAAA,sBAAA,CAAA,mBAAA;AAAA;AAAA,qCAAA,CAAA,CAAA;;AACA,YAAA,SAAA,GAAA,sBAAA,CAAA,mBAAA;AAAA;AAAA,2BAAA,CAAA,CAAA;;AACA,YAAA,aAAA,GAAA,sBAAA,CAAA,mBAAA;AAAA;AAAA,+BAAA,CAAA,CAAA;;AACA,YAAA,UAAA,GAAA,sBAAA,CAAA,mBAAA;AAAA;AAAA,4BAAA,CAAA,CAAA;;AACA,YAAA,qBAAA,GAAA,sBAAA,CAAA,mBAAA;AAAA;AAAA,wCAAA,CAAA,CAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAEA;;;;AAIA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAoHA;;;;;;;;;;;;;;;;AAgBA;;;;;;;;;;;YASMoE,W;;;;;;AACF;;;;;;;;;;mCAUOrJ,M,EAAQ,CAAE;AACjB;;;;;;;;;AAMA,mBAAA,WAAA,CAAA,MAAA,EAAA,EAAA,EAAwB;AAAA,YAAA,eAAA,CAAA,IAAA,EAAA,WAAA,CAAA;AAAE;AAC1B;;;;;;;;;;mCAMO,CAAE;AACT;;;;;;;;;sCAMU,CAAE;;;;;AAGhB;;;;;;;;;;;;;;;;;;;;;;;YAqBqBsJ,U;;;;;;;;AACjB;;AAqDA;;AAOA;;;;;;;mCAOctJ,M,EAAQ;AAClB,kBAAM8L,UAAU,GAAG,IAAA,UAAA,CAAnB,MAAmB,CAAnB;AACA,qBAAOA,UAAU,CAAjB,IAAOA,EAAP;AACH;AAED;;;;;;;;;;AA+BA;;;;;;;;;;AAQA,mBAAA,UAAA,CAAA,MAAA,EAAoB;AAAA,gBAAA,KAAA;;AAAA,YAAA,eAAA,CAAA,IAAA,EAAA,UAAA,CAAA;;AAChB,YAAA,KAAA,GAAA,0BAAA,CAAA,IAAA,EAAA,eAAA,CAAA,UAAA,CAAA,CAAA,IAAA,CAAA,IAAA,CAAA,CAAA;AACA;;;;;AAFgB,YAAA,KAAA,CA9GpBvC,aA8GoB,GA9GJ;AACZC,cAAAA,YAAY,EADA,IAAA;AAEZC,cAAAA,oBAAoB,EAFR,IAAA;AAGZC,cAAAA,SAAS,EAHG,CAAA;AAIZC,cAAAA,UAAU,EAJE,IAAA;AAKZC,cAAAA,cAAc,EALF,CAAA;AAMZC,cAAAA,qBAAqB,EANT,KAAA;AAOZC,cAAAA,OAAO,EAPK,UAAA;AAQZC,cAAAA,eAAe,EARH,IAAA;AASZC,cAAAA,SAAS,EATG,CAAA;AAUZC,cAAAA,SAAS,EAVG,CAAA;AAWZC,cAAAA,MAAM,EAXM,IAAA;AAYZC,cAAAA,YAAY,EAZA,IAAA;AAaZ/E,cAAAA,SAAS,EAbG,IAAA;AAcZ1C,cAAAA,WAAW,EAdC,MAAA;AAeZ0H,cAAAA,WAAW,EAfC,CAAA;AAgBZC,cAAAA,aAAa,EAhBD,IAAA;AAiBZC,cAAAA,wBAAwB,EAAE;AACtB;AACA;AACA;AACAC,gBAAAA,cAAc,EAAE;AAJM,eAjBd;AAuBZ5F,cAAAA,QAAQ,EAvBI,IAAA;AAwBZ6F,cAAAA,UAAU,EAxBE,IAAA;AAyBZC,cAAAA,WAAW,EAzBC,KAAA;AA0BZ1M,cAAAA,MAAM,EA1BM,GAAA;AA2BZ2M,cAAAA,aAAa,EA3BD,KAAA;AA4BZC,cAAAA,QAAQ,EA5BI,IAAA;AA6BZC,cAAAA,aAAa,EA7BD,IAAA;AA8BZC,cAAAA,cAAc,EA9BF,IAAA;AA+BZC,cAAAA,cAAc,EA/BF,IAAA;AAgCZC,cAAAA,aAAa,EAhCD,KAAA;AAiCZC,cAAAA,SAAS,EAjCG,OAAA;AAkCZC,cAAAA,WAAW,EAlCC,EAAA;AAmCZC,cAAAA,SAAS,EAnCG,KAAA;AAoCZC,cAAAA,aAAa,EApCD,KAAA;AAqCZzJ,cAAAA,UAAU,EACN0H,MAAM,CAANA,gBAAAA,IAA2BgC,MAAM,CAANA,UAAAA,GAAoBA,MAAM,CAtC7C,WAAA;AAuCZC,cAAAA,OAAO,EAvCK,EAAA;AAwCZnN,cAAAA,aAAa,EAxCD,MAAA;AAyCZoN,cAAAA,2BAA2B,EAzCf,IAAA;AA0CZC,cAAAA,QAAQ,EAAExJ,OAAAA,CA1CE,OAAA;AA2CZyJ,cAAAA,UAAU,EA3CE,KAAA;AA4CZC,cAAAA,GAAG,EA5CS,KAAA;AA6CZC,cAAAA,YAAY,EA7CA,KAAA;AA8CZC,cAAAA,UAAU,EA9CE,CAAA;AA+CZC,cAAAA,aAAa,EA/CD,KAAA;AAgDZ3N,cAAAA,SAAS,EAhDG,MAAA;AAiDZoI,cAAAA,GAAG,EAAE;AAjDO,aA8GI;AAAA,YAAA,KAAA,CAzDpBwF,QAyDoB,GAzDT;AACPvH,cAAAA,YAAY,EAAZA,aAAAA,CADO,OAAA;AAEPG,cAAAA,QAAQ,EAARA,SAAAA,CAFO,OAAA;AAGPJ,cAAAA,oBAAoB,EAApBA,qBAAAA,CAAAA;AAHO,aAyDS;AAAA,YAAA,KAAA,CApBpBvE,IAoBoB,GApBbA,IAoBa;AAMhB,YAAA,KAAA,CAAA,MAAA,GAAcmF,MAAM,CAANA,MAAAA,CAAAA,EAAAA,EAAkB,KAAA,CAAlBA,aAAAA,EAAd,MAAcA,CAAd;AAEA;;AACA,YAAA,KAAA,CAAA,SAAA,GACI,YAAY,OAAOjF,MAAM,CAAzB,SAAA,GACMG,QAAQ,CAARA,aAAAA,CAAuB,KAAA,CAAA,MAAA,CAD7B,SACMA,CADN,GAEM,KAAA,CAAA,MAAA,CAHV,SAAA;;AAKA,gBAAI,CAAC,KAAA,CAAL,SAAA,EAAqB;AACjB,oBAAM,IAAA,KAAA,CAAN,6BAAM,CAAN;AACH;;AAED,gBAAI,KAAA,CAAA,MAAA,CAAA,cAAA,IAAJ,IAAA,EAAwC;AACpC;AACA,cAAA,KAAA,CAAA,cAAA,GAAsB,KAAA,CAAtB,SAAA;AAFJ,aAAA,MAGO,IAAI,OAAO,KAAA,CAAA,MAAA,CAAP,cAAA,IAAJ,QAAA,EAAmD;AACtD;AACA,cAAA,KAAA,CAAA,cAAA,GAAsBA,QAAQ,CAARA,aAAAA,CAClB,KAAA,CAAA,MAAA,CADJ,cAAsBA,CAAtB;AAFG,aAAA,MAKA;AACH;AACA,cAAA,KAAA,CAAA,cAAA,GAAsB,KAAA,CAAA,MAAA,CAAtB,cAAA;AACH;;AAED,gBAAI,CAAC,KAAA,CAAL,cAAA,EAA0B;AACtB,oBAAM,IAAA,KAAA,CAAN,mCAAM,CAAN;AACH;;AAED,gBAAI,KAAA,CAAA,MAAA,CAAA,cAAA,IAAJ,CAAA,EAAqC;AACjC,oBAAM,IAAA,KAAA,CAAN,uCAAM,CAAN;AADJ,aAAA,MAEO,IAAI,KAAA,CAAA,MAAA,CAAA,cAAA,GAAA,CAAA,IAAJ,CAAA,EAAyC;AAC5C,oBAAM,IAAA,KAAA,CAAN,uCAAM,CAAN;AACH;;AAED,gBAAI,KAAA,CAAA,MAAA,CAAA,GAAA,KAAJ,IAAA,EAA8B;AAC1BL,cAAAA,IAAI,CAAJA,KAAAA,CAAW,KAAA,CAAXA,SAAAA,EAA2B;AAAEmM,gBAAAA,SAAS,EAAE;AAAb,eAA3BnM;AACH;;AAED,gBAAI,KAAA,CAAA,MAAA,CAAJ,eAAA,EAAiC;AAC7B,cAAA,KAAA,CAAA,kBAAA,CAAwB,KAAA,CAAA,MAAA,CAAxB,eAAA;AACH;AAED;;;;;;;AAKA,YAAA,KAAA,CAAA,WAAA,GAAA,CAAA;AAEA;;;;;AAIA,YAAA,KAAA,CAAA,OAAA,GAAA,KAAA;AAEA;;;;;;AAKA,YAAA,KAAA,CAAA,SAAA,GAAA,EAAA;AAEA;;;;;AAIA,YAAA,KAAA,CAAA,cAAA,GAAA,IAAA;AACA;;AACA,YAAA,KAAA,CAAA,WAAA,GAAA,IAAA;AACA;;AACA,YAAA,KAAA,CAAA,MAAA,GAAA,IAAA;AACA;;AACA,YAAA,KAAA,CAAA,OAAA,GAAA,IAAA;AACA;;AACA,YAAA,KAAA,CAAA,SAAA,GAjFgB,IAiFhB,CAjFgB,CAmFhB;;AACA,gBAAI,OAAO,KAAA,CAAA,MAAA,CAAP,QAAA,KAAJ,UAAA,EAAgD;AAC5C,oBAAM,IAAA,KAAA,CAAN,+BAAM,CAAN;AACH;AACD;;;;;AAGA,YAAA,KAAA,CAAA,MAAA,GAAc,KAAA,CAAA,MAAA,CAAd,QAAA;AACA;;;AAGA;;AACA,gBAAI,KAAA,CAAA,MAAA,CAAA,OAAA,IAAJ,cAAA,EAA2C;AACvC,cAAA,KAAA,CAAA,MAAA,CAAA,OAAA,GAAA,cAAA;AACH;;AAED,gBACI,CAAC,KAAA,CAAA,MAAA,CAAA,OAAA,IAAA,UAAA,IACG,KAAA,CAAA,MAAA,CAAA,OAAA,KADJ,sBAAA,KAEA,CAAC2E,SAAAA,CAAAA,OAAAA,CAAAA,SAAAA,CAAAA,gBAAAA,CAAAA,IAAAA,CAHL,IAGKA,CAHL,EAIE;AACE,cAAA,KAAA,CAAA,MAAA,CAAA,OAAA,GAAA,cAAA;AACH;;AACD,YAAA,KAAA,CAAA,OAAA,GAAe,KAAA,CAAA,QAAA,CAAc,KAAA,CAAA,MAAA,CAA7B,OAAe,CAAf;AAEA;;;;AAGA,YAAA,KAAA,CAAA,qBAAA,GAAA,EAAA;AACA;;AACA,YAAA,KAAA,CAAA,WAAA,GAAA,KAAA;AAEA;;;;;;;AAMA,YAAA,KAAA,CAAA,OAAA,GAzHgB,KAyHhB,CAzHgB,CA2HhB;AACA;AACA;;AACA,gBAAIyH,SAAS,GAAb,CAAA;AACA,YAAA,KAAA,CAAA,SAAA,GAAiB,IAAI,CAAJ,QAAA,CACb,YAAM;AACF,kBACIA,SAAS,IAAI,KAAA,CAAA,MAAA,CAAA,OAAA,CAAbA,WAAAA,IACA,CAAC,KAAA,CAAA,MAAA,CAFL,YAAA,EAGE;AACEA,gBAAAA,SAAS,GAAG,KAAA,CAAA,MAAA,CAAA,OAAA,CAAZA,WAAAA;;AACA,gBAAA,KAAA,CAAA,MAAA,CAAA,SAAA,CAAA,QAAA;AACH;AARQ,aAAA,EAUb,OAAO,KAAA,CAAA,MAAA,CAAP,UAAA,KAAA,QAAA,GACM,KAAA,CAAA,MAAA,CADN,UAAA,GAVJ,GAAiB,CAAjB;AAeA,mBAAA,0BAAA,CAAA,KAAA,EAAA,sBAAA,CAAA,KAAA,CAAA,CAAA;AACH;AAED;;;;;;;;;;;;mCAQO;AACH,mBAAA,eAAA,CAAqB,KAAA,MAAA,CAArB,OAAA;AACA,mBAAA,YAAA;AACA,mBAAA,aAAA;AACA,mBAAA,eAAA;AACA,qBAAA,IAAA;AACH;AAED;;;;;;;;;;;4CAQgBb,O,EAAS;AAAA,kBAAA,MAAA,GAAA,IAAA,CAAA,CACrB;;;AACAA,cAAAA,OAAO,CAAPA,OAAAA,CAAgB,UAAA,MAAA,EAAM;AAAA,uBAAI,MAAI,CAAJ,SAAA,CAAJ,MAAI,CAAJ;AAFD,eAErBA,EAFqB,CAIrB;;AACAA,cAAAA,OAAO,CAAPA,OAAAA,CAAgB,UAAA,MAAA,EAAU;AACtB;AACA;AACA,oBAAI,CAACc,MAAM,CAAX,SAAA,EAAuB;AACnB,kBAAA,MAAI,CAAJ,UAAA,CAAgBA,MAAM,CAAtB,IAAA;AACH;AALLd,eAAAA;AAOA,mBAAA,SAAA,CAAA,oBAAA,EAAA,OAAA;AACA,qBAAA,IAAA;AACH;AAED;;;;;;;;;+CAMmB;AACf,qBAAO,KAAP,qBAAA;AACH;AAED;;;;;;;;;;;sCAQUc,M,EAAQ;AAAA,kBAAA,MAAA,GAAA,IAAA;;AACd,kBAAI,CAACA,MAAM,CAAX,IAAA,EAAkB;AACd,sBAAM,IAAA,KAAA,CAAN,8BAAM,CAAN;AACH;;AACD,kBAAI,CAACA,MAAM,CAAX,QAAA,EAAsB;AAClB,sBAAM,IAAA,KAAA,CAAA,UAAA,MAAA,CACQA,MAAM,CADd,IAAA,EAAN,sCAAM,CAAA,CAAN;AALU,eAAA,CAUd;;;AACA,kBAAIA,MAAM,CAAV,WAAA,EAAwB;AACpBlH,gBAAAA,MAAM,CAANA,IAAAA,CAAYkH,MAAM,CAAlBlH,WAAAA,EAAAA,OAAAA,CAAwC,UAAA,gBAAA,EAAoB;AACxD;;;;AAIA,kBAAA,MAAI,CAAJ,gBAAI,CAAJ,GAAyBkH,MAAM,CAANA,WAAAA,CAAzB,gBAAyBA,CAAzB;AALJlH,iBAAAA;AAOH;;AAED,kBAAMmH,QAAQ,GAAGD,MAAM,CArBT,QAqBd,CArBc,CAuBd;;AACA,kBAAME,qBAAqB,GAAGpH,MAAM,CAANA,mBAAAA,CAC1BnF,IAAI,CAAJA,QAAAA,CADJ,SAA8BmF,CAA9B;AAGAoH,cAAAA,qBAAqB,CAArBA,OAAAA,CAA8B,UAAA,GAAA,EAAO;AACjCD,gBAAAA,QAAQ,CAARA,SAAAA,CAAAA,GAAAA,IAA0BtM,IAAI,CAAJA,QAAAA,CAAAA,SAAAA,CAA1BsM,GAA0BtM,CAA1BsM;AADJC,eAAAA;AAIA;;;;;;AAKA,mBAAKF,MAAM,CAAX,IAAA,IAAoB,IAAA,QAAA,CAAaA,MAAM,CAANA,MAAAA,IAAb,EAAA,EAApB,IAAoB,CAApB;AACA,mBAAA,SAAA,CAAA,cAAA,EAA+BA,MAAM,CAArC,IAAA;AACA,qBAAA,IAAA;AACH;AAED;;;;;;;;;;;uCAQWpD,I,EAAM;AACb,kBAAI,CAAC,KAAL,IAAK,CAAL,EAAiB;AACb,sBAAM,IAAA,KAAA,CAAA,UAAA,MAAA,CAAA,IAAA,EAAN,0BAAM,CAAA,CAAN;AACH;;AACD,kBAAI,KAAA,qBAAA,CAAJ,IAAI,CAAJ,EAAsC;AAClC;AACA,qBAAA,aAAA,CAAA,IAAA;AACH;;AACD,mBAAA,IAAA,EAAA,IAAA;AACA,mBAAA,qBAAA,CAAA,IAAA,IAAA,IAAA;AACA,mBAAA,SAAA,CAAA,oBAAA,EAAA,IAAA;AACA,qBAAA,IAAA;AACH;AAED;;;;;;;;;;;0CAQcA,I,EAAM;AAChB,kBAAI,CAAC,KAAL,IAAK,CAAL,EAAiB;AACb,sBAAM,IAAA,KAAA,CAAA,UAAA,MAAA,CAAA,IAAA,EAAN,kDAAM,CAAA,CAAN;AAGH;;AACD,kBAAI,CAAC,KAAA,qBAAA,CAAL,IAAK,CAAL,EAAuC;AACnC,sBAAM,IAAA,KAAA,CAAA,UAAA,MAAA,CAAA,IAAA,EAAN,yCAAM,CAAA,CAAN;AAGH;;AACD,kBAAI,OAAO,KAAA,IAAA,EAAP,OAAA,KAAJ,UAAA,EAA8C;AAC1C,sBAAM,IAAA,KAAA,CAAA,UAAA,MAAA,CAAA,IAAA,EAAN,oCAAM,CAAA,CAAN;AACH;;AAED,mBAAA,IAAA,EAAA,OAAA;AACA,qBAAO,KAAA,qBAAA,CAAP,IAAO,CAAP;AACA,mBAAA,SAAA,CAAA,kBAAA,EAAA,IAAA;AACA,qBAAA,IAAA;AACH;AAED;;;;;;;;;gDAMoB;AAAA,kBAAA,MAAA,GAAA,IAAA;;AAChB9D,cAAAA,MAAM,CAANA,IAAAA,CAAY,KAAZA,qBAAAA,EAAAA,OAAAA,CAAgD,UAAA,IAAA,EAAI;AAAA,uBAChD,MAAI,CAAJ,aAAA,CADgD,IAChD,CADgD;AAApDA,eAAAA;AAGH;AAED;;;;;;;;;2CAMe;AAAA,kBAAA,MAAA,GAAA,IAAA;;AACX,mBAAA,MAAA,GAAc,IAAI,KAAJ,MAAA,CAAgB,KAAhB,SAAA,EAAgC,KAA9C,MAAc,CAAd;AACA,mBAAA,MAAA,CAAA,IAAA;AACA,mBAAA,SAAA,CAAA,gBAAA,EAAiC,KAAjC,MAAA;;AAEA,kBAAI,KAAA,MAAA,CAAA,UAAA,KAAJ,KAAA,EAAsC;AAClCmE,gBAAAA,MAAM,CAANA,gBAAAA,CAAAA,QAAAA,EAAkC,KAAlCA,SAAAA,EAAAA,IAAAA;AACAA,gBAAAA,MAAM,CAANA,gBAAAA,CAAAA,mBAAAA,EAA6C,KAA7CA,SAAAA,EAAAA,IAAAA;AACH;;AAED,mBAAA,MAAA,CAAA,EAAA,CAAA,QAAA,EAAyB,YAAM;AAC3B,gBAAA,MAAI,CAAJ,UAAA;;AACA,gBAAA,MAAI,CAAJ,MAAA,CAAA,QAAA,CAAqB,MAAI,CAAJ,OAAA,CAArB,iBAAqB,EAArB;AAZO,eAUX,EAVW,CAeX;;AACA,mBAAA,MAAA,CAAA,EAAA,CAAA,OAAA,EAAwB,UAAA,CAAA,EAAA,QAAA,EAAiB;AACrCD,gBAAAA,UAAU,CAAC,YAAA;AAAA,yBAAM,MAAI,CAAJ,MAAA,CAAN,QAAM,CAAN;AAAD,iBAAA,EAAVA,CAAU,CAAVA;AAjBO,eAgBX,EAhBW,CAoBX;;AACA,mBAAA,MAAA,CAAA,EAAA,CAAA,QAAA,EAAyB,UAAA,CAAA,EAAK;AAC1B,oBAAI,MAAI,CAAJ,MAAA,CAAJ,aAAA,EAA+B;AAC3B,kBAAA,MAAI,CAAJ,UAAA;AACH;;AACD,gBAAA,MAAI,CAAJ,SAAA,CAAA,QAAA,EAAA,CAAA;AAJJ,eAAA;AAMH;AAED;;;;;;;;;4CAMgB;AAAA,kBAAA,MAAA,GAAA,IAAA;;AACZ,kBAAI,KAAJ,OAAA,EAAkB;AACd,qBAAA,OAAA,CAAA,OAAA;AACH;;AAED,mBAAA,OAAA,GAAe,IAAI,KAAJ,OAAA,CAAiB,KAAhC,MAAe,CAAf;AACA,mBAAA,OAAA,CAAA,IAAA;AACA,mBAAA,SAAA,CAAA,iBAAA,EAAkC,KAAlC,OAAA;AAEA,mBAAA,OAAA,CAAA,EAAA,CAAA,QAAA,EAA0B,YAAM;AAC5B,gBAAA,MAAI,CAAJ,MAAA,CAAA,QAAA,CAAqB,MAAI,CAAJ,OAAA,CAArB,iBAAqB,EAArB;;AACA,gBAAA,MAAI,CAAJ,SAAA,CAAA,QAAA;AAFJ,eAAA;AAIA,mBAAA,OAAA,CAAA,EAAA,CAAA,MAAA,EAAwB,YAAA;AAAA,uBAAM,MAAI,CAAJ,SAAA,CAAN,MAAM,CAAN;AAAxB,eAAA;AACA,mBAAA,OAAA,CAAA,EAAA,CAAA,OAAA,EAAyB,YAAA;AAAA,uBAAM,MAAI,CAAJ,SAAA,CAAN,OAAM,CAAN;AAAzB,eAAA;AAEA,mBAAA,OAAA,CAAA,EAAA,CAAA,cAAA,EAAgC,UAAA,IAAA,EAAQ;AACpC,gBAAA,MAAI,CAAJ,MAAA,CAAA,QAAA,CAAqB,MAAI,CAAJ,OAAA,CAArB,iBAAqB,EAArB;;AACA,gBAAA,MAAI,CAAJ,SAAA,CAAA,cAAA,EAAA,IAAA;AAlBQ,eAgBZ,EAhBY,CAqBZ;;AACA,kBACI,KAAA,MAAA,CAAA,OAAA,KAAA,cAAA,IACA,KAAA,MAAA,CAAA,OAAA,KAFJ,sBAAA,EAGE;AACE,qBAAA,OAAA,CAAA,EAAA,CAAA,MAAA,EAAwB,YAAM;AAC1B,kBAAA,MAAI,CAAJ,MAAA,CAAA,QAAA,CAAqB,MAAI,CAAJ,OAAA,CAArB,iBAAqB,EAArB;AADJ,iBAAA;AAIA,qBAAA,OAAA,CAAA,EAAA,CAAA,QAAA,EAA0B,YAAM;AAC5B,sBAAImD,SAAS,GAAG,MAAI,CAApB,SAAgB,EAAhB;;AACA,kBAAA,MAAI,CAAJ,SAAA,CAAA,QAAA,EAAA,SAAA;;AAEA,sBAAI,MAAI,CAAJ,OAAA,CAAA,OAAA,KAAyB,MAAI,CAAjC,OAAA,EAA2C;AACvC,oBAAA,MAAI,CAAJ,OAAA,GAAe,MAAI,CAAJ,OAAA,CAAf,OAAA;;AACA,oBAAA,MAAI,CAAJ,SAAA,CAAA,MAAA,EAAuB,MAAI,CAA3B,OAAA;AACH;AAPL,iBAAA;AASH;AACJ;AAED;;;;;;;;8CAKkB;AACd,kBAAI,KAAA,MAAA,CAAJ,aAAA,EAA+B;AAC3B,qBAAA,SAAA,GAAiB,IAAIzG,UAAAA,CAArB,OAAiB,EAAjB;AACH;AACJ;AAED;;;;;;;;;0CAMc;AACV,qBAAO,KAAA,OAAA,CAAP,WAAO,EAAP;AACH;AAED;;;;;;;;;6CAMiB;AACb,qBAAO,KAAA,OAAA,CAAP,cAAO,EAAP;AACH;AAED;;;;;;;;;2CAMe0G,O,EAAS;AACpB,kBAAIA,OAAO,IAAI,KAAf,WAAe,EAAf,EAAmC;AAC/B,qBAAA,MAAA,CAAA,CAAA;AADJ,eAAA,MAEO;AACH,qBAAA,MAAA,CAAYA,OAAO,GAAG,KAAtB,WAAsB,EAAtB;AACH;AACJ;AAED;;;;;;;;;;;;;;;iCAYK5N,K,EAAOC,G,EAAK;AAAA,kBAAA,MAAA,GAAA,IAAA;;AACb,mBAAA,SAAA,CAAA,aAAA,EAA8B,YAAA;AAAA,uBAAM,MAAI,CAAJ,IAAA,CAAA,KAAA,EAAN,GAAM,CAAN;AAA9B,eAAA;AACA,qBAAO,KAAA,OAAA,CAAA,IAAA,CAAA,KAAA,EAAP,GAAO,CAAP;AACH;AAED;;;;;;;;;uCAMWyB,Q,EAAU;AACjB,mBAAA,OAAA,CAAA,UAAA,CAAA,QAAA;AACH;AAED;;;;;;;;;oCAMQ;AACJ,kBAAI,CAAC,KAAA,OAAA,CAAL,QAAK,EAAL,EAA8B;AAC1B,uBAAO,KAAA,OAAA,CAAP,KAAO,EAAP;AACH;AACJ;AAED;;;;;;;;;wCAMY;AACR,qBAAO,KAAA,OAAA,CAAA,QAAA,KAA0B,KAA1B,IAA0B,EAA1B,GAAwC,KAA/C,KAA+C,EAA/C;AACH;AAED;;;;;;;;;wCAMY;AACR,qBAAO,CAAC,KAAA,OAAA,CAAR,QAAQ,EAAR;AACH;AAED;;;;;;;;;;yCAOakM,O,EAAS;AAClB,mBAAA,IAAA,CAAU,CAAA,OAAA,IAAY,CAAC,KAAA,MAAA,CAAvB,UAAA;AACH;AAED;;;;;;;;;;wCAOYA,O,EAAS;AACjB,mBAAA,IAAA,CAAUA,OAAO,IAAI,KAAA,MAAA,CAArB,UAAA;AACH;AAED;;;;;;;;;;;;iCASK/K,M,EAAQ;AACT,kBAAMmD,QAAQ,GAAG,KAAA,WAAA,MAAjB,CAAA;AACA,kBAAItE,QAAQ,GAAG,KAAA,cAAA,MAAf,CAAA;AACAA,cAAAA,QAAQ,GAAGtB,IAAI,CAAJA,GAAAA,CAAAA,CAAAA,EAAYA,IAAI,CAAJA,GAAAA,CAAAA,QAAAA,EAAmBsB,QAAQ,IAAImB,MAAM,IAA5DnB,CAAkD,CAA3BtB,CAAZA,CAAXsB;AACA,mBAAA,aAAA,CAAmBA,QAAQ,GAA3B,QAAA;AACH;AAED;;;;;;;;;;;0CAQcW,Q,EAAU;AACpB,mBAAA,MAAA,CAAA,QAAA;AACA,mBAAA,MAAA,CAAA,QAAA,CAAA,QAAA;AACH;AAED;;;;;;;;;;;;;mCAUOA,Q,EAAU;AAAA,kBAAA,MAAA,GAAA,IAAA,CAAA,CACb;;;AACA,kBACI,OAAA,QAAA,KAAA,QAAA,IACA,CAACwL,QAAQ,CADT,QACS,CADT,IAEAxL,QAAQ,GAFR,CAAA,IAGAA,QAAQ,GAJZ,CAAA,EAKE;AACE,sBAAM,IAAA,KAAA,CAAN,8EAAM,CAAN;AAGH;;AACD,mBAAA,SAAA,CAAA,aAAA,EAA8B,YAAA;AAAA,uBAAM,MAAI,CAAJ,MAAA,CAAN,QAAM,CAAN;AAA9B,eAAA;AAEA,kBAAM4D,MAAM,GAAG,KAAA,OAAA,CAdF,QAcE,EAAf,CAda,CAeb;;AACA,kBAAI,CAAJ,MAAA,EAAa;AACT,qBAAA,OAAA,CAAA,KAAA;AAjBS,eAAA,CAmBb;;;AACA,kBAAM6H,eAAe,GAAG,KAAA,MAAA,CAAxB,YAAA;AACA,mBAAA,MAAA,CAAA,YAAA,GAAA,KAAA;AACA,mBAAA,OAAA,CAAA,MAAA,CAAoBzL,QAAQ,GAAG,KAA/B,WAA+B,EAA/B;AACA,mBAAA,MAAA,CAAA,QAAA,CAAA,QAAA;;AAEA,kBAAI,CAAJ,MAAA,EAAa;AACT,qBAAA,OAAA,CAAA,IAAA;AACH;;AACD,mBAAA,MAAA,CAAA,YAAA,GAAA,eAAA;AACA,mBAAA,SAAA,CAAA,MAAA,EAAA,QAAA;AACH;AAED;;;;;;;;mCAKO;AACH,mBAAA,KAAA;AACA,mBAAA,MAAA,CAAA,CAAA;AACA,mBAAA,MAAA,CAAA,QAAA,CAAA,CAAA;AACH;AAED;;;;;;;;;;;sCAQU2E,Q,EAAU;AAChB,qBAAO,KAAA,OAAA,CAAA,SAAA,CAAP,QAAO,CAAP;AACH;AAED;;;;;;;;;;sCAOU2G,S,EAAW;AACjB,mBAAA,OAAA,CAAA,SAAA,CAAA,SAAA;AACA,mBAAA,SAAA,CAAA,QAAA,EAAA,SAAA;AACH;AAED;;;;;;;;;wCAMY;AACR,qBAAO,KAAA,OAAA,CAAP,SAAO,EAAP;AACH;AAED;;;;;;;;;;4CAOgB7K,I,EAAM;AAClB,mBAAA,OAAA,CAAA,eAAA,CAAA,IAAA;AACH;AAED;;;;;;;;8CAKkB;AACd,qBAAO,KAAA,OAAA,CAAP,eAAO,EAAP;AACH;AAED;;;;;;;;;;;yCAQa;AACT,mBAAA,OAAA,CAAa,CAAC,KAAd,OAAA;AACH;AAED;;;;;;;;;;;;;;oCAWQiL,I,EAAM;AACV;AACA,kBAAIA,IAAI,KAAK,KAAb,OAAA,EAA2B;AACvB,qBAAA,SAAA,CAAA,MAAA,EAAuB,KAAvB,OAAA;AACA;AACH;;AAED,kBAAA,IAAA,EAAU;AACN;AACA;AACA,qBAAA,WAAA,GAAmB,KAAA,OAAA,CAAnB,SAAmB,EAAnB;AACA,qBAAA,OAAA,CAAA,SAAA,CAAA,CAAA;AACA,qBAAA,OAAA,GAAA,IAAA;AACA,qBAAA,SAAA,CAAA,QAAA,EAAA,CAAA;AANJ,eAAA,MAOO;AACH;AACA;AACA,qBAAA,OAAA,CAAA,SAAA,CAAuB,KAAvB,WAAA;AACA,qBAAA,OAAA,GAAA,KAAA;AACA,qBAAA,SAAA,CAAA,QAAA,EAAyB,KAAzB,WAAA;AACH;;AACD,mBAAA,SAAA,CAAA,MAAA,EAAuB,KAAvB,OAAA;AACH;AAED;;;;;;;;;sCAMU;AACN,qBAAO,KAAP,OAAA;AACH;AAED;;;;;;;;;;yCAOa;AACT,qBAAO,KAAA,OAAA,CAAA,OAAA,IAAP,EAAA;AACH;AAED;;;;;;;;2CAKe;AACX,mBAAA,MAAA,CAAA,YAAA,GAA2B,CAAC,KAAA,MAAA,CAA5B,YAAA;AACA,mBAAA,UAAA;AACH;AAED;;;;;;;;gDAKoB;AAChB,mBAAA,MAAA,CAAA,QAAA,GAAuB,CAAC,KAAA,MAAA,CAAxB,QAAA;AACH;AAED;;;;;;;;2CAKe;AACX,qBAAO,KAAA,MAAA,CAAP,SAAA;AACH;AAED;;;;;;;;;yCAMaC,K,EAAO;AAChB,mBAAA,MAAA,CAAA,SAAA,GAAA,KAAA;AACA,mBAAA,UAAA;AACH;AAED;;;;;;;;+CAKmB;AACf,qBAAO,KAAA,MAAA,CAAP,aAAA;AACH;AAED;;;;;;;;;6CAMiBA,K,EAAO;AACpB,mBAAA,MAAA,CAAA,aAAA,GAAA,KAAA;AACA,mBAAA,UAAA;AACH;AAED;;;;;;;;iDAKqB;AACjB,qBAAO,KAAA,MAAA,CAAP,eAAA;AACH;AAED;;;;;;;;;+CAMmBA,K,EAAO;AACtB,mBAAA,MAAA,CAAA,eAAA,GAAA,KAAA;AACA7M,cAAAA,IAAI,CAAJA,KAAAA,CAAW,KAAXA,SAAAA,EAA2B;AAAE8M,gBAAAA,UAAU,EAAE,KAAA,MAAA,CAAY7C;AAA1B,eAA3BjK;AACH;AAED;;;;;;;;;6CAMiB;AACb,qBAAO,KAAA,MAAA,CAAP,WAAA;AACH;AAED;;;;;;;;;;2CAOe6M,K,EAAO;AAClB,mBAAA,MAAA,CAAA,WAAA,GAAA,KAAA;AACA,mBAAA,MAAA,CAAA,YAAA;AACH;AAED;;;;;;;;wCAKY;AACR,qBAAO,KAAA,MAAA,CAAP,MAAA;AACH;AAED;;;;;;;;;sCAMU5O,M,EAAQ;AACd,mBAAA,MAAA,CAAA,MAAA,GAAA,MAAA;AACA,mBAAA,MAAA,CAAA,SAAA,CAAsBA,MAAM,GAAG,KAAA,MAAA,CAA/B,UAAA;AACA,mBAAA,UAAA;AACH;AAED;;;;;;;;;yCAMa;AACT,kBAAM+C,YAAY,GAAG/B,IAAI,CAAJA,KAAAA,CACjB,KAAA,WAAA,KACI,KAAA,MAAA,CADJ,WAAA,GAEI,KAAA,MAAA,CAHR,UAAqBA,CAArB;AAKA,kBAAMgC,WAAW,GAAG,KAAA,MAAA,CAApB,QAAoB,EAApB;AACA,kBAAIjD,KAAK,GAPA,YAOT,CAPS,CAQT;;AACA,kBAAIa,KAAK,GAAT,CAAA;AACA,kBAAIC,GAAG,GAAGG,IAAI,CAAJA,GAAAA,CAASJ,KAAK,GAAdI,WAAAA,EAVD,KAUCA,CAAV,CAVS,CAWT;;AACA,kBACI,KAAA,MAAA,CAAA,UAAA,KACC,CAAC,KAAA,MAAA,CAAD,YAAA,IAA6B+B,YAAY,GAF9C,WACI,CADJ,EAGE;AACEhD,gBAAAA,KAAK,GAALA,WAAAA;AACAa,gBAAAA,KAAK,GAALA,CAAAA;AACAC,gBAAAA,GAAG,GAAHA,KAAAA;AACH;;AAED,kBAAA,KAAA;;AACA,kBAAI,KAAA,MAAA,CAAJ,aAAA,EAA+B;AAC3B,oBAAMiO,SAAS,GAAG,KAAA,SAAA,CAAA,mBAAA,CAAA,KAAA,EAAA,KAAA,EAAlB,GAAkB,CAAlB;AAKA,oBAAA,CAAA;;AACA,qBAAKvN,CAAC,GAAN,CAAA,EAAYA,CAAC,GAAGuN,SAAS,CAAzB,MAAA,EAAkCvN,CAAlC,EAAA,EAAuC;AACnCf,kBAAAA,KAAK,GAAG,KAAA,OAAA,CAAA,QAAA,CAAA,KAAA,EAEJsO,SAAS,CAATA,CAAS,CAATA,CAFI,CAEJA,CAFI,EAGJA,SAAS,CAATA,CAAS,CAATA,CAHJtO,CAGIsO,CAHI,CAARtO;AAKA,uBAAA,MAAA,CAAA,SAAA,CAAA,KAAA,EAAA,KAAA,EAGIsO,SAAS,CAATA,CAAS,CAATA,CAHJ,CAGIA,CAHJ,EAIIA,SAAS,CAATA,CAAS,CAATA,CAJJ,CAIIA,CAJJ;AAMH;AAnBL,eAAA,MAoBO;AACHtO,gBAAAA,KAAK,GAAG,KAAA,OAAA,CAAA,QAAA,CAAA,KAAA,EAAA,KAAA,EAARA,GAAQ,CAARA;AACA,qBAAA,MAAA,CAAA,SAAA,CAAA,KAAA,EAAA,KAAA,EAAA,KAAA,EAAA,GAAA;AACH;;AACD,mBAAA,SAAA,CAAA,QAAA,EAAA,KAAA,EAAA,KAAA;AACH;AAED;;;;;;;;;;;;;iCAUKuO,Q,EAAU;AACX,kBAAI,CAAJ,QAAA,EAAe;AACX,qBAAA,MAAA,CAAA,WAAA,GAA0B,KAAA,aAAA,CAA1B,WAAA;AACA,qBAAA,MAAA,CAAA,YAAA,GAAA,KAAA;AAFJ,eAAA,MAGO;AACH,qBAAA,MAAA,CAAA,WAAA,GAAA,QAAA;AACA,qBAAA,MAAA,CAAA,YAAA,GAAA,IAAA;AACH;;AAED,mBAAA,UAAA;AACA,mBAAA,MAAA,CAAA,QAAA,CAAqB,KAAA,OAAA,CAArB,iBAAqB,EAArB;AAEA,mBAAA,MAAA,CAAA,QAAA,CAAqB,KAAA,cAAA,KAAwB,KAA7C,WAA6C,EAA7C;AACA,mBAAA,SAAA,CAAA,MAAA,EAAA,QAAA;AACH;AAED;;;;;;;;;4CAMgBC,W,EAAa;AAAA,kBAAA,MAAA,GAAA,IAAA;;AACzB,mBAAA,iBAAA,CAAA,WAAA,EAAoC,UAAA,IAAA,EAAQ;AACxC,oBAAI,CAAC,MAAI,CAAT,WAAA,EAAuB;AACnB,kBAAA,MAAI,CAAJ,iBAAA,CAAA,IAAA;AACH;AAHL,eAAA;AAKH;AAED;;;;;;;;;;8CAOkBC,M,EAAQ;AACtB,mBAAA,OAAA,CAAA,IAAA,CAAA,MAAA;AACA,mBAAA,UAAA;AACA,mBAAA,OAAA,GAAA,IAAA;AACA,mBAAA,SAAA,CAAA,OAAA;AACH;AAED;;;;;;;;;qCAMSC,I,EAAM;AAAA,kBAAA,OAAA,GAAA,IAAA,CAAA,CACX;;;AACA,kBAAMC,MAAM,GAAG,IAAf,UAAe,EAAf;AACAA,cAAAA,MAAM,CAANA,gBAAAA,CAAAA,UAAAA,EAAoC,UAAA,CAAA,EAAC;AAAA,uBAAI,OAAI,CAAJ,UAAA,CAAJ,CAAI,CAAJ;AAArCA,eAAAA;AACAA,cAAAA,MAAM,CAANA,gBAAAA,CAAAA,MAAAA,EAAgC,UAAA,CAAA,EAAC;AAAA,uBAC7B,OAAI,CAAJ,eAAA,CAAqBxM,CAAC,CAADA,MAAAA,CADQ,MAC7B,CAD6B;AAAjCwM,eAAAA;AAGAA,cAAAA,MAAM,CAANA,gBAAAA,CAAAA,OAAAA,EAAiC,YAAA;AAAA,uBAC7B,OAAI,CAAJ,SAAA,CAAA,OAAA,EAD6B,oBAC7B,CAD6B;AAAjCA,eAAAA;AAGAA,cAAAA,MAAM,CAANA,iBAAAA,CAAAA,IAAAA;AACA,mBAAA,KAAA;AACH;AAED;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;iCA2BK/H,G,EAAK5G,K,EAAO8G,O,EAASV,Q,EAAU;AAChC,kBAAI,CAAJ,GAAA,EAAU;AACN,sBAAM,IAAA,KAAA,CAAN,+BAAM,CAAN;AACH;;AACD,mBAAA,KAAA;;AACA,kBAAA,OAAA,EAAa;AACT;AACA;AACA,oBAAMwI,oBAAoB,GAAG;AACzB,iEACI,CAAA,MAAA,EAAA,UAAA,EAAA,MAAA,EAAA,OAAA,CAAA,OAAA,MAAkD,CAF7B,CAAA;AAGzB,4CAA0B,CAHD,KAAA;AAIzB,qFACI,CAAA,cAAA,EAAA,sBAAA,EAAA,OAAA,CACI,KAAA,MAAA,CADJ,OAAA,MAEM,CAPe,CAAA;AAQzB,+CAA6B,OAAA,GAAA,KAAe;AARnB,iBAA7B;AAUA,oBAAMC,aAAa,GAAG,MAAM,CAAN,IAAA,CAAA,oBAAA,EAAA,MAAA,CAClB,UAAA,MAAA,EAAM;AAAA,yBAAID,oBAAoB,CAAxB,MAAwB,CAAxB;AADV,iBAAsB,CAAtB;;AAGA,oBAAIC,aAAa,CAAjB,MAAA,EAA0B;AACtB;AACA1G,kBAAAA,OAAO,CAAPA,IAAAA,CACI,wEACI0G,aAAa,CAAbA,IAAAA,CAJc,QAIdA,CAFR1G,EAFsB,CAMtB;;AACArB,kBAAAA,OAAO,GAAPA,IAAAA;AACH;AACJ;;AAED,sBAAQ,KAAA,MAAA,CAAR,OAAA;AACI,qBAAA,UAAA;AACI,yBAAO,KAAA,UAAA,CAAA,GAAA,EAAA,KAAA,EAAP,QAAO,CAAP;;AACJ,qBAAA,cAAA;AACA,qBAAA,sBAAA;AACI,yBAAO,KAAA,gBAAA,CAAA,GAAA,EAAA,KAAA,EAAA,OAAA,EAAP,QAAO,CAAP;AALR;AAOH;AAED;;;;;;;;;;;;uCASWF,G,EAAK5G,K,EAAOoG,Q,EAAU;AAAA,kBAAA,OAAA,GAAA,IAAA;;AAC7B,kBAAM0I,IAAI,GAAG,SAAPA,IAAO,CAAA,MAAA,EAAU;AACnB,oBAAA,MAAA,EAAY;AACR,kBAAA,OAAI,CAAJ,SAAA,CAAA,IAAA,CAAoB,OAAI,CAAJ,IAAA,CAAA,OAAA,EAApB,MAAoB,CAApB;AACH;;AACD,uBAAO,OAAI,CAAJ,cAAA,CAAA,GAAA,EAAyB,UAAA,IAAA,EAAI;AAAA,yBAAI,OAAI,CAAJ,eAAA,CAAJ,IAAI,CAAJ;AAApC,iBAAO,CAAP;AAJJ,eAAA;;AAOA,kBAAA,KAAA,EAAW;AACP,qBAAA,OAAA,CAAA,QAAA,CAAA,KAAA,EAAA,QAAA;AACA,qBAAA,UAAA;AACA,qBAAA,SAAA,CAAA,IAAA,CAAoB,KAAA,IAAA,CAAA,aAAA,EAApB,IAAoB,CAApB;AAHJ,eAAA,MAIO;AACH,uBAAOA,IAAP,EAAA;AACH;AACJ;AAED;;;;;;;;;;;;;;;6CAYiBC,Q,EAAU/O,K,EAAO8G,O,EAASV,Q,EAAU;AAAA,kBAAA,OAAA,GAAA,IAAA;;AACjD,kBAAIQ,GAAG,GAAP,QAAA;;AAEA,kBAAI,OAAA,QAAA,KAAJ,QAAA,EAAkC;AAC9B,qBAAA,OAAA,CAAA,IAAA,CAAA,GAAA,EAAuB,KAAvB,cAAA,EAAA,KAAA,EAAA,OAAA;AADJ,eAAA,MAEO;AACH,oBAAMI,GAAG,GAAT,QAAA;AACA,qBAAA,OAAA,CAAA,OAAA,CAAA,GAAA,EAFG,KAEH,EAFG,CAIH;AACA;;AACAJ,gBAAAA,GAAG,GAAGI,GAAG,CAATJ,GAAAA;AACH;;AAED,mBAAA,SAAA,CAAA,IAAA,CACI,KAAA,OAAA,CAAA,IAAA,CAAA,SAAA,EAA6B,YAAM;AAC/B;AACA,oBAAI,CAAC,OAAI,CAAJ,OAAA,CAAL,SAAA,EAA6B;AACzB,kBAAA,OAAI,CAAJ,UAAA;;AACA,kBAAA,OAAI,CAAJ,OAAA,GAAA,IAAA;;AACA,kBAAA,OAAI,CAAJ,SAAA,CAAA,OAAA;AACH;AAPT,eACI,CADJ,EASI,KAAA,OAAA,CAAA,IAAA,CAAA,OAAA,EAA2B,UAAA,GAAA,EAAG;AAAA,uBAAI,OAAI,CAAJ,SAAA,CAAA,OAAA,EAAJ,GAAI,CAAJ;AAvBe,eAuB7C,CATJ,EAdiD,CA0BjD;AACA;AACA;;AACA,kBAAA,KAAA,EAAW;AACP,qBAAA,OAAA,CAAA,QAAA,CAAA,KAAA,EAAA,QAAA;AACH;;AAED,kBACI,CAAC,CAAA,KAAA,IAAU,KAAA,MAAA,CAAX,WAAA,KACA,KAAA,OAAA,CAFJ,gBAEI,EAFJ,EAGE;AACE,qBAAA,cAAA,CAAA,GAAA,EAAyB,UAAA,WAAA,EAAe;AACpC,kBAAA,OAAI,CAAJ,iBAAA,CAAA,WAAA,EAAoC,UAAA,MAAA,EAAU;AAC1C,oBAAA,OAAI,CAAJ,OAAA,CAAA,MAAA,GAAA,MAAA;;AACA,oBAAA,OAAI,CAAJ,OAAA,CAAA,QAAA,CAAA,IAAA;;AACA,oBAAA,OAAI,CAAJ,UAAA;;AACA,oBAAA,OAAI,CAAJ,SAAA,CAAA,gBAAA;AAJJ,mBAAA;AADJ,iBAAA;AAQH;AACJ;AAED;;;;;;;;;;8CAOkB4H,W,EAAa/D,Q,EAAU;AAAA,kBAAA,OAAA,GAAA,IAAA;;AACrC,mBAAA,WAAA,GAAA,WAAA;AACA,mBAAA,OAAA,CAAA,iBAAA,CAAA,WAAA,EAEI,UAAA,IAAA,EAAQ;AACJ;AACA;AACA,oBAAI,CAAC,OAAI,CAAL,WAAA,IAAqB,OAAI,CAAJ,WAAA,IAAzB,WAAA,EAA0D;AACtDA,kBAAAA,QAAQ,CAARA,IAAQ,CAARA;AACA,kBAAA,OAAI,CAAJ,WAAA,GAAA,IAAA;AACH;AART,eAAA,EAUI,YAAA;AAAA,uBAAM,OAAI,CAAJ,SAAA,CAAA,OAAA,EAAN,4BAAM,CAAN;AAVJ,eAAA;AAYH;AAED;;;;;;;;;;;2CAQe7D,G,EAAK6D,Q,EAAU;AAAA,kBAAA,OAAA,GAAA,IAAA;;AAC1B,kBAAIzC,OAAO,GAAG,MAAM,CAAN,MAAA,CACV;AACIpB,gBAAAA,GAAG,EADP,GAAA;AAEIqC,gBAAAA,YAAY,EAAE;AAFlB,eADU,EAKV,KAAA,MAAA,CALJ,GAAc,CAAd;AAOA,kBAAM+F,OAAO,GAAGzN,IAAI,CAAJA,SAAAA,CAAhB,OAAgBA,CAAhB;AAEA,mBAAA,cAAA,GAAA,OAAA;AAEA,mBAAA,SAAA,CAAA,IAAA,CACI,OAAO,CAAP,EAAA,CAAA,UAAA,EAAuB,UAAA,CAAA,EAAK;AACxB,gBAAA,OAAI,CAAJ,UAAA,CAAA,CAAA;AAFR,eACI,CADJ,EAII,OAAO,CAAP,EAAA,CAAA,SAAA,EAAsB,UAAA,IAAA,EAAQ;AAC1BkJ,gBAAAA,QAAQ,CAARA,IAAQ,CAARA;AACA,gBAAA,OAAI,CAAJ,cAAA,GAAA,IAAA;AANR,eAII,CAJJ,EAQI,OAAO,CAAP,EAAA,CAAA,OAAA,EAAoB,UAAA,CAAA,EAAK;AACrB,gBAAA,OAAI,CAAJ,SAAA,CAAA,OAAA,EAAA,CAAA;;AACA,gBAAA,OAAI,CAAJ,cAAA,GAAA,IAAA;AAVR,eAQI,CARJ;AAcA,qBAAA,OAAA;AACH;AAED;;;;;;;;;;uCAOWtI,C,EAAG;AACV,kBAAA,eAAA;;AACA,kBAAIA,CAAC,CAAL,gBAAA,EAAwB;AACpB8M,gBAAAA,eAAe,GAAG9M,CAAC,CAADA,MAAAA,GAAWA,CAAC,CAA9B8M,KAAAA;AADJ,eAAA,MAEO;AACH;AACA;AACAA,gBAAAA,eAAe,GAAG9M,CAAC,CAADA,MAAAA,IAAYA,CAAC,CAADA,MAAAA,GAA9B8M,OAAkB9M,CAAlB8M;AACH;;AACD,mBAAA,SAAA,CAAA,SAAA,EAA0BzO,IAAI,CAAJA,KAAAA,CAAWyO,eAAe,GAApD,GAA0BzO,CAA1B,EAA6D2B,CAAC,CAA9D,MAAA;AACH;AAED;;;;;;;;;;;;;;sCAWU7B,M,EAAQ4O,Q,EAAUC,Q,EAAU/O,K,EAAOC,G,EAAK;AAC9CC,cAAAA,MAAM,GAAGA,MAAM,IAAfA,IAAAA;AACAF,cAAAA,KAAK,GAAGA,KAAK,IAAbA,CAAAA;AACA8O,cAAAA,QAAQ,GAAGA,QAAQ,IAAnBA,KAAAA;AACAC,cAAAA,QAAQ,GAAGA,QAAQ,IAAnBA,KAAAA;AACA,kBAAMnP,KAAK,GAAG,KAAA,OAAA,CAAA,QAAA,CAAA,MAAA,EAAA,KAAA,EAAd,GAAc,CAAd;AACA,kBAAMyH,GAAG,GAAG,GAAA,GAAA,CAAA,IAAA,CAAA,KAAA,EAER,UAAA,GAAA,EAAG;AAAA,uBAAIjH,IAAI,CAAJA,KAAAA,CAAWoF,GAAG,GAAdpF,QAAAA,IAAJ,QAAA;AAFP,eAAY,CAAZ;AAIA,qBAAO,IAAA,OAAA,CAAY,UAAA,OAAA,EAAA,MAAA,EAAqB;AACpC,oBAAM4O,IAAI,GAAGC,IAAI,CAAJA,SAAAA,CAAb,GAAaA,CAAb;;AAEA,oBAAI,CAAJ,QAAA,EAAe;AACXxE,kBAAAA,MAAM,CAANA,IAAAA,CACI,yCACIyE,kBAAkB,CAF1BzE,IAE0B,CAF1BA;AAIH;;AACD0E,gBAAAA,OAAO,CAAPA,IAAO,CAAPA;AATJ,eAAO,CAAP;AAWH;AAED;;;;;;;;;;;;;;;;;;;;;wCAkBYpO,M,EAAQC,O,EAASC,I,EAAM;AAC/B,kBAAI,CAAJ,MAAA,EAAa;AACTF,gBAAAA,MAAM,GAANA,WAAAA;AACH;;AACD,kBAAI,CAAJ,OAAA,EAAc;AACVC,gBAAAA,OAAO,GAAPA,CAAAA;AACH;;AACD,kBAAI,CAAJ,IAAA,EAAW;AACPC,gBAAAA,IAAI,GAAJA,SAAAA;AACH;;AAED,qBAAO,KAAA,MAAA,CAAA,QAAA,CAAA,MAAA,EAAA,OAAA,EAAP,IAAO,CAAP;AACH;AAED;;;;;;yCAGa;AACT,kBAAI,KAAA,cAAA,IAAuB,KAAA,cAAA,CAA3B,UAAA,EAA2D;AACvD,qBAAA,cAAA,CAAA,UAAA,CAAA,KAAA;AACA,qBAAA,cAAA,GAAA,IAAA;AACH;AACJ;AAED;;;;;;6CAGiB;AACb,mBAAA,SAAA,CAAA,OAAA,CAAuB,UAAA,CAAA,EAAC;AAAA,uBAAIc,CAAC,CAAL,EAAIA,EAAJ;AAAxB,eAAA;AACH;AAED;;;;;;oCAGQ;AACJ,kBAAI,CAAC,KAAA,OAAA,CAAL,QAAK,EAAL,EAA8B;AAC1B,qBAAA,IAAA;AACA,qBAAA,OAAA,CAAA,gBAAA;AACH;;AACD,mBAAA,OAAA,GAAA,KAAA;AACA,mBAAA,UAAA;AACA,mBAPI,cAOJ,GAPI,CASJ;;AACA,mBAAA,MAAA,CAAA,QAAA,CAAA,CAAA;AACA,mBAAA,MAAA,CAAA,QAAA,CAAA,CAAA;AACA,mBAAA,MAAA,CAAA,SAAA,CAAsB;AAAE7B,gBAAAA,MAAM,EAAE,KAAA,MAAA,CAAA,QAAA;AAAV,eAAtB,EAAA,CAAA;AACH;AAED;;;;;;;;sCAKU;AACN,mBAAA,iBAAA;AACA,mBAAA,SAAA,CAAA,SAAA;AACA,mBAAA,UAAA;AACA,mBAAA,cAAA;AACA,mBAAA,KAAA;;AACA,kBAAI,KAAA,MAAA,CAAA,UAAA,KAAJ,KAAA,EAAsC;AAClCuK,gBAAAA,MAAM,CAANA,mBAAAA,CAAAA,QAAAA,EAAqC,KAArCA,SAAAA,EAAAA,IAAAA;AACAA,gBAAAA,MAAM,CAANA,mBAAAA,CAAAA,mBAAAA,EAEI,KAFJA,SAAAA,EAAAA,IAAAA;AAKH;;AACD,kBAAI,KAAJ,OAAA,EAAkB;AACd,qBAAA,OAAA,CAAA,OAAA;AACH;;AACD,kBAAI,KAAJ,MAAA,EAAiB;AACb,qBAAA,MAAA,CAAA,OAAA;AACH;;AACD,mBAAA,WAAA,GAAA,IAAA;AACA,mBAAA,OAAA,GAAA,KAAA;AACA,mBAAA,WAAA,GAAA,IAAA;AACH;;;;UAr6CmCtJ,IAAI,CAACC,Q;;;AAAxBuJ,QAAAA,U,CAiFVyC,OAjFUzC,GAiFA0C,OAjFA1C;AAAAA,QAAAA,U,CAsGVxJ,IAtGUwJ,GAsGHxJ,IAtGGwJ;;;;;;;;;;;;;;;;;;;;;;ACxNrB,YAAA,IAAA,GAAA,uBAAA,CAAA,mBAAA;AAAA;AAAA,6BAAA,CAAA,CAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;UAEA;;;AACA,YAAMyE,OAAO,GAAb,SAAA;AACA,YAAMC,MAAM,GAAZ,QAAA;AACA,YAAMC,QAAQ,GAAd,UAAA;AAEA;;;;;;YAKqBxJ,Q;;;;;;;;AACjB;;AAEA;;AAEA;;AAEA;;AAwCA;;;;;+CAKmB;AACf,qBAAO,CAAC,EAAE2E,MAAM,CAANA,YAAAA,IAAuBA,MAAM,CAAvC,kBAAQ,CAAR;AACH;AAED;;;;;;;;8CAKkB;AACd,kBAAI,CAACA,MAAM,CAAX,sBAAA,EAAoC;AAChCA,gBAAAA,MAAM,CAANA,sBAAAA,GAAgC,KAAKA,MAAM,CAANA,YAAAA,IACjCA,MAAM,CADVA,kBAAgC,GAAhCA;AAEH;;AACD,qBAAOA,MAAM,CAAb,sBAAA;AACH;AAED;;;;;;;;;;mDAOuBoF,U,EAAY;AAC/B,kBAAI,CAACpF,MAAM,CAAX,6BAAA,EAA2C;AACvCA,gBAAAA,MAAM,CAANA,6BAAAA,GAAuC,KAAKA,MAAM,CAANA,mBAAAA,IACxCA,MAAM,CAD6B,yBAAA,EAAA,CAAA,EAAA,CAAA,EAAvCA,UAAuC,CAAvCA;AAEH;;AACD,qBAAOA,MAAM,CAAb,6BAAA;AACH;AAED;;;;;;;;AAKA,mBAAA,QAAA,CAAA,MAAA,EAAoB;AAAA,gBAAA,oBAAA,EAAA,YAAA;;AAAA,gBAAA,KAAA;;AAAA,YAAA,eAAA,CAAA,IAAA,EAAA,QAAA,CAAA;;AAChB,YAAA,KAAA,GAAA,0BAAA,CAAA,IAAA,EAAA,eAAA,CAAA,QAAA,CAAA,CAAA,IAAA,CAAA,IAAA,CAAA,CAAA;AACA;;AAFgB,YAAA,KAAA,CArFpBI,YAqFoB,GArFL,IAqFK;AAAA,YAAA,KAAA,CAnFpB2E,mBAmFoB,GAnFE,IAmFF;AAAA,YAAA,KAAA,CAjFpBC,cAiFoB,IAAA,oBAAA,GAAA,EAAA,EAAA,eAAA,CAAA,oBAAA,EAhFfL,OAgFe,EAhFL;AACPM,cAAAA,IADO,EAAA,SAAA,IAAA,GACA;AACH,qBAAA,iBAAA;AAFG,eAAA;AAIPC,cAAAA,iBAJO,EAAA,SAAA,iBAAA,GAIa;AAChB,oBAAM3J,QAAQ,GAAG,KAAjB,WAAiB,EAAjB;AACA,uBAAO,KAAA,cAAA,KAAA,QAAA,IAAP,CAAA;AANG,eAAA;AAQP4J,cAAAA,cARO,EAAA,SAAA,cAAA,GAQU;AACb,uBAAO,KAAA,aAAA,GAAqB,KAA5B,aAA4B,EAA5B;AACH;AAVM,aAgFK,CAAA,EAAA,eAAA,CAAA,oBAAA,EApEfP,MAoEe,EApEN;AACNK,cAAAA,IADM,EAAA,SAAA,IAAA,GACC;AACH,qBAAA,oBAAA;AAFE,eAAA;AAINC,cAAAA,iBAJM,EAAA,SAAA,iBAAA,GAIc;AAChB,oBAAM3J,QAAQ,GAAG,KAAjB,WAAiB,EAAjB;AACA,uBAAO,KAAA,cAAA,KAAA,QAAA,IAAP,CAAA;AANE,eAAA;AAQN4J,cAAAA,cARM,EAAA,SAAA,cAAA,GAQW;AACb,uBAAO,KAAP,aAAA;AACH;AAVK,aAoEM,CAAA,EAAA,eAAA,CAAA,oBAAA,EAxDfN,QAwDe,EAxDJ;AACRI,cAAAA,IADQ,EAAA,SAAA,IAAA,GACD;AACH,qBAAA,oBAAA;AACA,qBAAA,SAAA,CAAA,QAAA;AAHI,eAAA;AAKRC,cAAAA,iBALQ,EAAA,SAAA,iBAAA,GAKY;AAChB,uBAAA,CAAA;AANI,eAAA;AAQRC,cAAAA,cARQ,EAAA,SAAA,cAAA,GAQS;AACb,uBAAO,KAAP,WAAO,EAAP;AACH;AAVO,aAwDI,CAAA,EAAA,oBAAA;AAGhB,YAAA,KAAA,CAAA,MAAA,GAAA,MAAA;AACA;;AACA,YAAA,KAAA,CAAA,EAAA,GACIvO,MAAM,CAANA,YAAAA,KACC,KAAA,CAAA,gBAAA,KAA0B,KAAA,CAA1B,eAA0B,EAA1B,GAFL,EACIA,CADJ;AAGA;;AACA,YAAA,KAAA,CAAA,QAAA,GAAgB,KAAA,CAAA,EAAA,CAAhB,WAAA;AACA;;AACA,YAAA,KAAA,CAAA,aAAA,GAAA,CAAA;AACA;;AACA,YAAA,KAAA,CAAA,cAAA,GAAA,IAAA;AACA;;AACA,YAAA,KAAA,CAAA,MAAA,IAAA,YAAA,GAAA,EAAA,EAAA,eAAA,CAAA,YAAA,EAAA,OAAA,EACeiF,MAAM,CAANA,MAAAA,CAAc,KAAA,CAAA,cAAA,CAD7B,OAC6B,CAAdA,CADf,CAAA,EAAA,eAAA,CAAA,YAAA,EAAA,MAAA,EAEcA,MAAM,CAANA,MAAAA,CAAc,KAAA,CAAA,cAAA,CAF5B,MAE4B,CAAdA,CAFd,CAAA,EAAA,eAAA,CAAA,YAAA,EAAA,QAAA,EAGgBA,MAAM,CAANA,MAAAA,CAAc,KAAA,CAAA,cAAA,CAH9B,QAG8B,CAAdA,CAHhB,CAAA,EAAA,YAAA;AAKA;;AACA,YAAA,KAAA,CAAA,MAAA,GAAA,IAAA;AACA;;AACA,YAAA,KAAA,CAAA,OAAA,GAAA,EAAA;AACA;;AACA,YAAA,KAAA,CAAA,QAAA,GAAA,IAAA;AACA;;AACA,YAAA,KAAA,CAAA,WAAA,GAAA,IAAA;AACA;;AACA,YAAA,KAAA,CAAA,SAAA,GAAA,IAAA;AACA;;AACA,YAAA,KAAA,CAAA,KAAA,GAAA,IAAA;AACA;;AACA,YAAA,KAAA,CAAA,YAAA,GAAA,CAAA;AACA;;AACA,YAAA,KAAA,CAAA,QAAA,GAAA,IAAA;AACA;;AACA,YAAA,KAAA,CAAA,UAAA,GAAA,IAAA;AACA;;AACA,YAAA,KAAA,CAAA,MAAA,GAAA,IAAA;AACA;;AACA,YAAA,KAAA,CAAA,UAAA,GAAA,EAAA;AACA;;AACA,YAAA,KAAA,CAAA,KAAA,GAAA,IAAA;AACA;;AACA,YAAA,KAAA,CAAA,gBAAA,GAAwBjF,MAAM,CAA9B,QAAA;AACA;;;;AAGA,YAAA,KAAA,CAAA,SAAA,GAAA,KAAA;AAjDgB,mBAAA,KAAA;AAkDnB;AAED;;;;;;;mCAGO;AACH,mBAAA,gBAAA;AACA,mBAAA,gBAAA;AACA,mBAAA,kBAAA;AAEA,mBAAA,QAAA,CAAA,MAAA;AACA,mBAAA,eAAA,CAAqB,KAAA,MAAA,CAArB,SAAA;AACA,mBAAA,SAAA,CAAA,CAAA;AACH;AAED;;;;gDACoB;AAChB,kBAAI,KAAJ,OAAA,EAAkB;AACd,qBAAA,OAAA,CAAA,OAAA,CAAqB,UAAA,MAAA,EAAU;AAC3ByO,kBAAAA,MAAM,IAAIA,MAAM,CAAhBA,UAAUA,EAAVA;AADJ,iBAAA;AAGA,qBAAA,OAAA,GAJc,IAId,CAJc,CAKd;;AACA,qBAAA,QAAA,CAAA,OAAA,CAAsB,KAAtB,QAAA;AACH;AACJ;AAED;;;;;;;;qCAKSC,K,EAAO;AACZ,kBAAI,KAAA,KAAA,KAAe,KAAA,MAAA,CAAnB,KAAmB,CAAnB,EAAuC;AACnC,qBAAA,KAAA,GAAa,KAAA,MAAA,CAAb,KAAa,CAAb;AACA,qBAAA,KAAA,CAAA,IAAA,CAAA,IAAA,CAAA,IAAA;AACH;AACJ;AAED;;;;;;;;wCAKsB;AAAA,mBAAA,IAAA,IAAA,GAAA,SAAA,CAAA,MAAA,EAATC,OAAS,GAAA,IAAA,KAAA,CAAA,IAAA,CAAA,EAAA,IAAA,GAAA,CAAA,EAAA,IAAA,GAAA,IAAA,EAAA,IAAA,EAAA,EAAA;AAATA,gBAAAA,OAAS,CAAA,IAAA,CAATA,GAAS,SAAA,CAAA,IAAA,CAATA;AAAS;;AAClB,mBAAA,UAAA,CAAA,OAAA;AACH;AAED;;;;;;;;;;;uCAQWA,O,EAAS;AAChB;AACA,mBAFgB,iBAEhB,GAFgB,CAIhB;;AACA,kBAAIA,OAAO,IAAIA,OAAO,CAAtB,MAAA,EAA+B;AAC3B,qBAAA,OAAA,GAD2B,OAC3B,CAD2B,CAG3B;;AACA,qBAAA,QAAA,CAJ2B,UAI3B,GAJ2B,CAM3B;;AACAA,gBAAAA,OAAO,CAAPA,MAAAA,CACY,UAAA,IAAA,EAAA,IAAA,EAAgB;AACpBC,kBAAAA,IAAI,CAAJA,OAAAA,CAAAA,IAAAA;AACA,yBAAA,IAAA;AAHRD,iBAAAA,EAIO,KAJPA,QAAAA,EAAAA,OAAAA,CAKa,KALbA,QAAAA;AAMH;AACJ;AACD;;;;+CACmB;AACf,kBAAI,KAAA,MAAA,CAAJ,oBAAA,EAAsC;AAClC,qBAAA,UAAA,GAAkB,KAAA,MAAA,CAAlB,oBAAA;AADJ,eAAA,MAEO;AACH,oBAAI,KAAA,EAAA,CAAJ,qBAAA,EAAmC;AAC/B,uBAAA,UAAA,GAAkB,KAAA,EAAA,CAAA,qBAAA,CACdlK,QAAQ,CADZ,gBAAkB,CAAlB;AADJ,iBAAA,MAIO;AACH,uBAAA,UAAA,GAAkB,KAAA,EAAA,CAAA,oBAAA,CACdA,QAAQ,CADZ,gBAAkB,CAAlB;AAGH;AACJ;;AACD,mBAAA,UAAA,CAAA,OAAA,CAAwB,KAAA,EAAA,CAAxB,WAAA;AACH;AAED;;;;gDACoB;AAAA,kBAAA,MAAA,GAAA,IAAA;;AAChB,mBAAA,UAAA,CAAA,cAAA,GAAiC,YAAM;AACnC,oBAAMiB,IAAI,GAAG,MAAI,CAAjB,cAAa,EAAb;;AAEA,oBAAIA,IAAI,IAAI,MAAI,CAAhB,WAAY,EAAZ,EAAgC;AAC5B,kBAAA,MAAI,CAAJ,QAAA,CAAA,QAAA;;AACA,kBAAA,MAAI,CAAJ,SAAA,CAAA,OAAA;AAFJ,iBAAA,MAGO,IAAIA,IAAI,IAAI,MAAI,CAAhB,cAAA,EAAiC;AACpC,kBAAA,MAAI,CAAJ,KAAA;AADG,iBAAA,MAEA,IAAI,MAAI,CAAJ,KAAA,KAAe,MAAI,CAAJ,MAAA,CAAnB,OAAmB,CAAnB,EAAyC;AAC5C,kBAAA,MAAI,CAAJ,SAAA,CAAA,cAAA,EAAA,IAAA;AACH;AAVL,eAAA;AAYH;AAED;;;;mDACuB;AACnB,mBAAA,UAAA,CAAA,cAAA,GAAiC,YAAM,CAAvC,CAAA;AACH;AACD;;;;iDACqB;AACjB,mBAAA,QAAA,GAAgB,KAAA,EAAA,CAAhB,cAAgB,EAAhB;AACA,mBAAA,QAAA,CAAA,OAAA,CAAsB,KAAtB,QAAA;AACH;AAED;;;;;;;+CAImB;AACf;AACA,kBAAI,KAAA,EAAA,CAAJ,UAAA,EAAwB;AACpB,qBAAA,QAAA,GAAgB,KAAA,EAAA,CAAhB,UAAgB,EAAhB;AADJ,eAAA,MAEO;AACH,qBAAA,QAAA,GAAgB,KAAA,EAAA,CAAhB,cAAgB,EAAhB;AALW,eAAA,CAOf;;;AACA,mBAAA,QAAA,CAAA,OAAA,CAAsB,KAAA,EAAA,CAAtB,WAAA;AACH;AAED;;;;;;;;;;sCAOUC,Q,EAAU;AAChB,kBAAA,QAAA,EAAc;AACV;;;;;AAKA,oBAAIkJ,KAAK,GAAG,IAAIzF,MAAM,CAAtB,KAAY,EAAZ;;AACA,oBAAI,CAACyF,KAAK,CAAV,SAAA,EAAsB;AAClB,yBAAOjJ,OAAO,CAAPA,MAAAA,CACH,IAAA,KAAA,CADJ,4CACI,CADGA,CAAP;AAGH;;AACDiJ,gBAAAA,KAAK,CAALA,QAAAA,GAAAA,IAAAA;AACA,oBAAIlI,IAAI,GAAG,KAAA,EAAA,CAAX,4BAAW,EAAX;AACA,qBAAA,QAAA,CAAA,UAAA;AACA,qBAAA,QAAA,CAAA,OAAA,CAAA,IAAA;AACAkI,gBAAAA,KAAK,CAALA,SAAAA,GAAkBlI,IAAI,CAAtBkI,MAAAA;AAEA,uBAAOA,KAAK,CAALA,SAAAA,CAAP,QAAOA,CAAP;AAlBJ,eAAA,MAmBO;AACH,uBAAOjJ,OAAO,CAAPA,MAAAA,CAAe,IAAA,KAAA,CAAU,uBAAhC,QAAsB,CAAfA,CAAP;AACH;AACJ;AAED;;;;;;;;sCAKUJ,K,EAAO;AACb,mBAAA,QAAA,CAAA,IAAA,CAAA,cAAA,CAAA,KAAA,EAAyC,KAAA,EAAA,CAAzC,WAAA;AACH;AAED;;;;;;;;wCAKY;AACR,qBAAO,KAAA,QAAA,CAAA,IAAA,CAAP,KAAA;AACH;AAED;;;;;;;;;;;8CAQkBuH,W,EAAa/D,Q,EAAU8F,O,EAAS;AAC9C,kBAAI,CAAC,KAAL,SAAA,EAAqB;AACjB,qBAAA,SAAA,GAAiB,KAAA,sBAAA,CACb,KAAA,EAAA,IAAW,KAAA,EAAA,CAAX,UAAA,GAAgC,KAAA,EAAA,CAAhC,UAAA,GADJ,KAAiB,CAAjB;AAGH;;AACD,mBAAA,SAAA,CAAA,eAAA,CAAA,WAAA,EAEI,UAAA,IAAA,EAAI;AAAA,uBAAI9F,QAAQ,CAAZ,IAAY,CAAZ;AAFR,eAAA,EAAA,OAAA;AAKH;AAED;;;;;;;;;qCAMSzK,K,EAAOoG,Q,EAAU;AACtB,kBAAIA,QAAQ,IAAZ,IAAA,EAAsB;AAClB,qBAAA,gBAAA,GAAA,QAAA;AACH;;AACD,mBAAA,KAAA,GAAA,KAAA;AACH;AAED;;;;;;;;sCAKU9F,M,EAAQ;AACd;AACA,kBAAI,KAAA,WAAA,IAAoBA,MAAM,IAAI,IAAI,KAAA,WAAA,CAAJ,MAAA,GAAA,CAAA,GAAlC,CAAA,EAAuE;AACnE;AACH;;AAED,mBAAA,UAAA,GAAA,EAAA;AACA,mBAAA,WAAA,GAPc,EAOd,CAPc,CAQd;AACA;;AACA,kBAAMmF,QAAQ,GAAG,KAAA,MAAA,GAAc,KAAA,MAAA,CAAd,gBAAA,GAAjB,CAAA;AACA,kBAAA,CAAA;;AACA,mBAAK+K,CAAC,GAAN,CAAA,EAAYA,CAAC,GAAb,QAAA,EAA0BA,CAA1B,EAAA,EAA+B;AAC3B,qBAAA,UAAA,CAAA,CAAA,IAAA,EAAA;AACA,qBAAA,UAAA,CAAA,CAAA,EAAmB,KAAKlQ,MAAM,GAA9B,CAAmB,CAAnB,IAAA,CAAA;AACA,qBAAA,UAAA,CAAA,CAAA,EAAmB,KAAKA,MAAM,GAAX,CAAA,IAAnB,CAAA,IAAA,CAAA;AACH;;AACD,mBAAA,WAAA,CAAiB,KAAKA,MAAM,GAA5B,CAAiB,CAAjB,IAAA,CAAA;AACA,mBAAA,WAAA,CAAiB,KAAKA,MAAM,GAAX,CAAA,IAAjB,CAAA,IAAA,CAAA;AACH;AAED;;;;;;;;;;;;qCASSA,M,EAAQC,K,EAAOE,I,EAAM;AAC1B,kBAAI,KAAJ,KAAA,EAAgB;AACZ,uBAAO,KAAP,KAAA;AACH;;AACD,kBAAI,CAAC,KAAL,MAAA,EAAkB;AACd,uBAAA,EAAA;AACH;;AAEDF,cAAAA,KAAK,GAAGA,KAAK,IAAbA,CAAAA;AACAE,cAAAA,IAAI,GAAGA,IAAI,IAAIH,MAAM,GAArBG,CAAAA;AAEA,mBAAA,SAAA,CAAA,MAAA;;AAEA,kBAAI,CAAC,KAAL,MAAA,EAAkB;AACd,uBAAO,KAAA,MAAA,CAAA,aAAA,GACD,KADC,UAAA,GAED,KAFN,WAAA;AAGH;AAED;;;;;;;;;AAOA,kBAAI,CAAC,KAAA,MAAA,CAAL,MAAA,EAAyB;AACrB,oBAAMgQ,SAAS,GAAG,KAAA,YAAA,CAAA,CAAA,EAAA,IAAA,EAA2B,KAA7C,UAAkB,CAAlB;AACA,qBAAA,MAAA,GAAcA,SAAS,CAAvB,MAAA;AACH;;AAED,kBAAMC,UAAU,GAAG,KAAA,MAAA,CAAA,MAAA,GAAnB,MAAA;AACA,kBAAMC,UAAU,GAAG,CAAC,EAAED,UAAU,GAAb,EAAC,CAAD,IAAnB,CAAA;AACA,kBAAMjL,QAAQ,GAAG,KAAA,MAAA,CAAjB,gBAAA;AACA,kBAAA,CAAA;;AAEA,mBAAK+K,CAAC,GAAN,CAAA,EAAYA,CAAC,GAAb,QAAA,EAA0BA,CAA1B,EAAA,EAA+B;AAC3B,oBAAMxQ,KAAK,GAAG,KAAA,UAAA,CAAd,CAAc,CAAd;AACA,oBAAM4Q,IAAI,GAAG,KAAA,MAAA,CAAA,cAAA,CAAb,CAAa,CAAb;AACA,oBAAI7P,CAAC,GAAA,KAAL,CAAA;;AAEA,qBAAKA,CAAC,GAAN,KAAA,EAAgBA,CAAC,IAAjB,IAAA,EAA2BA,CAA3B,EAAA,EAAgC;AAC5B,sBAAMX,KAAK,GAAG,CAAC,EAAEW,CAAC,GAAlB,UAAe,CAAf;AACA,sBAAMV,GAAG,GAAG,CAAC,EAAED,KAAK,GAApB,UAAa,CAAb;AACA,sBAAIuF,GAAG,GAAP,CAAA;AACA,sBAAID,GAAG,GAAP,CAAA;AACA,sBAAIxE,CAAC,GAAA,KAAL,CAAA;;AAEA,uBAAKA,CAAC,GAAN,KAAA,EAAgBA,CAAC,GAAjB,GAAA,EAAyBA,CAAC,IAA1B,UAAA,EAA0C;AACtC,wBAAM+F,KAAK,GAAG2J,IAAI,CAAlB,CAAkB,CAAlB;;AAEA,wBAAI3J,KAAK,GAAT,GAAA,EAAiB;AACbvB,sBAAAA,GAAG,GAAHA,KAAAA;AACH;;AAED,wBAAIuB,KAAK,GAAT,GAAA,EAAiB;AACbtB,sBAAAA,GAAG,GAAHA,KAAAA;AACH;AACJ;;AAED3F,kBAAAA,KAAK,CAAC,IAANA,CAAK,CAALA,GAAAA,GAAAA;AACAA,kBAAAA,KAAK,CAAC,IAAA,CAAA,GAANA,CAAK,CAALA,GAAAA,GAAAA;;AAEA,sBAAIwQ,CAAC,IAADA,CAAAA,IAAU9K,GAAG,GAAG,KAAA,WAAA,CAAiB,IAArC,CAAoB,CAApB,EAA6C;AACzC,yBAAA,WAAA,CAAiB,IAAjB,CAAA,IAAA,GAAA;AACH;;AAED,sBAAI8K,CAAC,IAADA,CAAAA,IAAU7K,GAAG,GAAG,KAAA,WAAA,CAAiB,IAAA,CAAA,GAArC,CAAoB,CAApB,EAAiD;AAC7C,yBAAA,WAAA,CAAiB,IAAA,CAAA,GAAjB,CAAA,IAAA,GAAA;AACH;AACJ;AACJ;;AAED,qBAAO,KAAA,MAAA,CAAA,aAAA,GAA4B,KAA5B,UAAA,GAA8C,KAArD,WAAA;AACH;AAED;;;;;;;;gDAKoB;AAChB,qBAAO,KAAA,KAAA,CAAA,iBAAA,CAAA,IAAA,CAAP,IAAO,CAAP;AACH;AAED;;;;+CACmB;AACf,kBAAI,KAAJ,MAAA,EAAiB;AACb,qBAAA,MAAA,CAAA,UAAA;AACH;AACJ;AAED;;;;;;sCAGU;AACN,kBAAI,CAAC,KAAL,QAAK,EAAL,EAAsB;AAClB,qBAAA,KAAA;AACH;;AACD,mBAAA,KAAA;AACA,mBAAA,MAAA,GAAA,IAAA;AACA,mBAAA,SAAA,GAAA,IAAA;AACA,mBAAA,iBAAA;AACA,mBAAA,gBAAA;AACA,mBAAA,QAAA,CAAA,UAAA;AACA,mBAAA,UAAA,CAAA,UAAA;AACA,mBAAA,QAAA,CAXM,UAWN,GAXM,CAaN;;AACA,kBAAI,KAAA,MAAA,CAAJ,iBAAA,EAAmC;AAC/B;AACA,oBACI,OAAO,KAAA,EAAA,CAAP,KAAA,KAAA,UAAA,IACA,KAAA,EAAA,CAAA,KAAA,IAFJ,QAAA,EAGE;AACE,uBAAA,EAAA,CAAA,KAAA;AAN2B,iBAAA,CAQ/B;;;AACA,qBAAA,EAAA,GAT+B,IAS/B,CAT+B,CAU/B;AACA;;AACA,oBAAI,CAAC,KAAA,MAAA,CAAL,YAAA,EAA+B;AAC3BkF,kBAAAA,MAAM,CAANA,sBAAAA,GAAAA,IAAAA;AADJ,iBAAA,MAEO;AACH,uBAAA,MAAA,CAAA,YAAA,GAAA,IAAA;AAf2B,iBAAA,CAiB/B;;;AACAA,gBAAAA,MAAM,CAANA,6BAAAA,GAAAA,IAAAA;AACH;AACJ;AAED;;;;;;;;iCAKK4D,M,EAAQ;AACT,mBAAA,aAAA,GAAA,CAAA;AACA,mBAAA,QAAA,GAAgB,KAAA,EAAA,CAAhB,WAAA;AACA,mBAAA,MAAA,GAAA,MAAA;AACA,mBAAA,YAAA;AACH;AAED;;;;2CACe;AACX,mBAAA,gBAAA;AACA,mBAAA,MAAA,GAAc,KAAA,EAAA,CAFH,kBAEG,EAAd,CAFW,CAIX;;AACA,mBAAA,MAAA,CAAA,KAAA,GAAoB,KAAA,MAAA,CAAA,KAAA,IAAqB,KAAA,MAAA,CAAzC,WAAA;AACA,mBAAA,MAAA,CAAA,IAAA,GAAmB,KAAA,MAAA,CAAA,IAAA,IAAoB,KAAA,MAAA,CAAvC,OAAA;AAEA,mBAAA,MAAA,CAAA,YAAA,CAAA,cAAA,CACI,KADJ,YAAA,EAEI,KAAA,EAAA,CAFJ,WAAA;AAIA,mBAAA,MAAA,CAAA,MAAA,GAAqB,KAArB,MAAA;AACA,mBAAA,MAAA,CAAA,OAAA,CAAoB,KAApB,QAAA;AACH;AAED;;;;;;;;uCAKW;AACP,qBAAO,KAAA,KAAA,KAAe,KAAA,MAAA,CAAtB,OAAsB,CAAtB;AACH;AAED;;;;;;;;0CAKc;AACV,kBAAI,KAAJ,gBAAA,EAA2B;AACvB,uBAAO,KAAP,gBAAA;AACH;;AACD,kBAAI,CAAC,KAAL,MAAA,EAAkB;AACd,uBAAA,CAAA;AACH;;AACD,qBAAO,KAAA,MAAA,CAAP,QAAA;AACH;AAED;;;;;;;;;;;mCAQOrO,K,EAAOC,G,EAAK;AACf,kBAAI,CAAC,KAAL,MAAA,EAAkB;AACd;AACH;;AAED,mBAAA,cAAA,GAAA,IAAA;;AAEA,kBAAID,KAAK,IAAT,IAAA,EAAmB;AACfA,gBAAAA,KAAK,GAAG,KAARA,cAAQ,EAARA;;AACA,oBAAIA,KAAK,IAAI,KAAb,WAAa,EAAb,EAAiC;AAC7BA,kBAAAA,KAAK,GAALA,CAAAA;AACH;AACJ;;AACD,kBAAIC,GAAG,IAAP,IAAA,EAAiB;AACbA,gBAAAA,GAAG,GAAG,KAANA,WAAM,EAANA;AACH;;AAED,mBAAA,aAAA,GAAA,KAAA;AACA,mBAAA,QAAA,GAAgB,KAAA,EAAA,CAAhB,WAAA;;AAEA,kBAAI,KAAA,KAAA,KAAe,KAAA,MAAA,CAAnB,QAAmB,CAAnB,EAA0C;AACtC,qBAAA,QAAA,CAAA,MAAA;AACH;;AAED,qBAAO;AACHD,gBAAAA,KAAK,EADF,KAAA;AAEHC,gBAAAA,GAAG,EAAEA;AAFF,eAAP;AAIH;AAED;;;;;;;;4CAKgB;AACZ,qBAAO,CAAC,KAAA,EAAA,CAAA,WAAA,GAAsB,KAAvB,QAAA,IAAwC,KAA/C,YAAA;AACH;AAED;;;;;;;;;;iCAOKD,K,EAAOC,G,EAAK;AACb,kBAAI,CAAC,KAAL,MAAA,EAAkB;AACd;AAFS,eAAA,CAKb;;;AACA,mBAAA,YAAA;AAEA,kBAAMwQ,YAAY,GAAG,KAAA,MAAA,CAAA,KAAA,EAArB,GAAqB,CAArB;AAEAzQ,cAAAA,KAAK,GAAGyQ,YAAY,CAApBzQ,KAAAA;AACAC,cAAAA,GAAG,GAAGwQ,YAAY,CAAlBxQ,GAAAA;AAEA,mBAAA,cAAA,GAAA,GAAA;AAEA,mBAAA,MAAA,CAAA,KAAA,CAAA,CAAA,EAAA,KAAA;;AAEA,kBAAI,KAAA,EAAA,CAAA,KAAA,IAAJ,WAAA,EAAkC;AAC9B,qBAAA,EAAA,CAAA,MAAA,IAAkB,KAAA,EAAA,CAAlB,MAAkB,EAAlB;AACH;;AAED,mBAAA,QAAA,CAAA,OAAA;AAEA,mBAAA,SAAA,CAAA,MAAA;AACH;AAED;;;;;;oCAGQ;AACJ,mBAAA,cAAA,GAAA,IAAA;AAEA,mBAAA,aAAA,IAAsB,KAAtB,aAAsB,EAAtB;AACA,mBAAA,MAAA,IAAe,KAAA,MAAA,CAAA,IAAA,CAAf,CAAe,CAAf;AAEA,mBAAA,QAAA,CAAA,MAAA;AAEA,mBAAA,SAAA,CAAA,OAAA;AACH;AAED;;;;;;;;;6CAMiB;AACb,qBAAO,KAAA,KAAA,CAAA,cAAA,CAAA,IAAA,CAAP,IAAO,CAAP;AACH;AAED;;;;;;;;8CAKkB;AACd,qBAAO,KAAP,YAAA;AACH;AAED;;;;;;;;4CAKgB4G,K,EAAO;AACnBA,cAAAA,KAAK,GAAGA,KAAK,IAAbA,CAAAA;;AACA,kBAAI,KAAJ,QAAI,EAAJ,EAAqB;AACjB,qBAAA,YAAA,GAAA,KAAA;AADJ,eAAA,MAEO;AACH,qBAAA,KAAA;AACA,qBAAA,YAAA,GAAA,KAAA;AACA,qBAAA,IAAA;AACH;AACJ;AAED;;;;;;;;;uCAMW5G,G,EAAK;AACZ,mBAAA,cAAA,GAAA,GAAA;AACH;;;;UA1sBiCkB,IAAI,CAACC,Q;;;AAAtB0E,QAAAA,Q,CAEVyJ,gBAFUzJ,GAES,GAFTA;;;;;;;AtBFrB;CAVA","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"WaveSurfer\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"WaveSurfer\"] = factory();\n\telse\n\t\troot[\"WaveSurfer\"] = factory();\n})(window, function() {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = \"./src/wavesurfer.js\");\n","/**\n * Returns a function, that, as long as it continues to be invoked, will not\n * be triggered. The function will be called after it stops being called for\n * N milliseconds. If `immediate` is passed, trigger the function on the\n * leading edge, instead of the trailing. The function also has a property 'clear' \n * that is a function which will clear the timer to prevent previously scheduled executions. \n *\n * @source underscore.js\n * @see http://unscriptable.com/2009/03/20/debouncing-javascript-methods/\n * @param {Function} function to wrap\n * @param {Number} timeout in ms (`100`)\n * @param {Boolean} whether to execute at the beginning (`false`)\n * @api public\n */\nfunction debounce(func, wait, immediate){\n  var timeout, args, context, timestamp, result;\n  if (null == wait) wait = 100;\n\n  function later() {\n    var last = Date.now() - timestamp;\n\n    if (last < wait && last >= 0) {\n      timeout = setTimeout(later, wait - last);\n    } else {\n      timeout = null;\n      if (!immediate) {\n        result = func.apply(context, args);\n        context = args = null;\n      }\n    }\n  };\n\n  var debounced = function(){\n    context = this;\n    args = arguments;\n    timestamp = Date.now();\n    var callNow = immediate && !timeout;\n    if (!timeout) timeout = setTimeout(later, wait);\n    if (callNow) {\n      result = func.apply(context, args);\n      context = args = null;\n    }\n\n    return result;\n  };\n\n  debounced.clear = function() {\n    if (timeout) {\n      clearTimeout(timeout);\n      timeout = null;\n    }\n  };\n  \n  debounced.flush = function() {\n    if (timeout) {\n      result = func.apply(context, args);\n      context = args = null;\n      \n      clearTimeout(timeout);\n      timeout = null;\n    }\n  };\n\n  return debounced;\n};\n\n// Adds compatibility for ES modules\ndebounce.debounce = debounce;\n\nmodule.exports = debounce;\n","/**\n * @since 3.0.0\n */\n\nimport style from './util/style';\nimport getId from './util/get-id';\n\n/**\n * The `CanvasEntry` class represents an element consisting of a wave `canvas`\n * and an (optional) progress wave `canvas`.\n *\n * The `MultiCanvas` renderer uses one or more `CanvasEntry` instances to\n * render a waveform, depending on the zoom level.\n */\nexport default class CanvasEntry {\n    constructor() {\n        /**\n         * The wave node\n         *\n         * @type {HTMLCanvasElement}\n         */\n        this.wave = null;\n        /**\n         * The wave canvas rendering context\n         *\n         * @type {CanvasRenderingContext2D}\n         */\n        this.waveCtx = null;\n        /**\n         * The (optional) progress wave node\n         *\n         * @type {HTMLCanvasElement}\n         */\n        this.progress = null;\n        /**\n         * The (optional) progress wave canvas rendering context\n         *\n         * @type {CanvasRenderingContext2D}\n         */\n        this.progressCtx = null;\n        /**\n         * Start of the area the canvas should render, between 0 and 1\n         *\n         * @type {number}\n         * @private\n         */\n        this.start = 0;\n        /**\n         * End of the area the canvas should render, between 0 and 1\n         *\n         * @type {number}\n         * @private\n         */\n        this.end = 1;\n        /**\n         * Unique identifier for this entry\n         *\n         * @type {string}\n         */\n        this.id = getId(this.constructor.name.toLowerCase() + '_');\n        /**\n         * Canvas 2d context attributes\n         *\n         * @type {object}\n         */\n        this.canvasContextAttributes = {};\n    }\n\n    /**\n     * Store the wave canvas element and create the 2D rendering context\n     *\n     * @param {HTMLCanvasElement} element The wave `canvas` element.\n     */\n    initWave(element) {\n        this.wave = element;\n        this.waveCtx = this.wave.getContext('2d', this.canvasContextAttributes);\n    }\n\n    /**\n     * Store the progress wave canvas element and create the 2D rendering\n     * context\n     *\n     * @param {HTMLCanvasElement} element The progress wave `canvas` element.\n     */\n    initProgress(element) {\n        this.progress = element;\n        this.progressCtx = this.progress.getContext(\n            '2d',\n            this.canvasContextAttributes\n        );\n    }\n\n    /**\n     * Update the dimensions\n     *\n     * @param {number} elementWidth Width of the entry\n     * @param {number} totalWidth Total width of the multi canvas renderer\n     * @param {number} width The new width of the element\n     * @param {number} height The new height of the element\n     */\n    updateDimensions(elementWidth, totalWidth, width, height) {\n        // where the canvas starts and ends in the waveform, represented as a\n        // decimal between 0 and 1\n        this.start = this.wave.offsetLeft / totalWidth || 0;\n        this.end = this.start + elementWidth / totalWidth;\n\n        // set wave canvas dimensions\n        this.wave.width = width;\n        this.wave.height = height;\n        let elementSize = { width: elementWidth + 'px' };\n        style(this.wave, elementSize);\n\n        if (this.hasProgressCanvas) {\n            // set progress canvas dimensions\n            this.progress.width = width;\n            this.progress.height = height;\n            style(this.progress, elementSize);\n        }\n    }\n\n    /**\n     * Clear the wave and progress rendering contexts\n     */\n    clearWave() {\n        // wave\n        this.waveCtx.clearRect(\n            0,\n            0,\n            this.waveCtx.canvas.width,\n            this.waveCtx.canvas.height\n        );\n\n        // progress\n        if (this.hasProgressCanvas) {\n            this.progressCtx.clearRect(\n                0,\n                0,\n                this.progressCtx.canvas.width,\n                this.progressCtx.canvas.height\n            );\n        }\n    }\n\n    /**\n     * Set the fill styles for wave and progress\n     *\n     * @param {string} waveColor Fill color for the wave canvas\n     * @param {?string} progressColor Fill color for the progress canvas\n     */\n    setFillStyles(waveColor, progressColor) {\n        this.waveCtx.fillStyle = waveColor;\n\n        if (this.hasProgressCanvas) {\n            this.progressCtx.fillStyle = progressColor;\n        }\n    }\n\n    /**\n     * Draw a rectangle for wave and progress\n     *\n     * @param {number} x X start position\n     * @param {number} y Y start position\n     * @param {number} width Width of the rectangle\n     * @param {number} height Height of the rectangle\n     * @param {number} radius Radius of the rectangle\n     */\n    fillRects(x, y, width, height, radius) {\n        this.fillRectToContext(this.waveCtx, x, y, width, height, radius);\n\n        if (this.hasProgressCanvas) {\n            this.fillRectToContext(\n                this.progressCtx,\n                x,\n                y,\n                width,\n                height,\n                radius\n            );\n        }\n    }\n\n    /**\n     * Draw the actual rectangle on a `canvas` element\n     *\n     * @private\n     * @param {CanvasRenderingContext2D} ctx Rendering context of target canvas\n     * @param {number} x X start position\n     * @param {number} y Y start position\n     * @param {number} width Width of the rectangle\n     * @param {number} height Height of the rectangle\n     * @param {number} radius Radius of the rectangle\n     */\n    fillRectToContext(ctx, x, y, width, height, radius) {\n        if (!ctx) {\n            return;\n        }\n\n        if (radius) {\n            this.drawRoundedRect(ctx, x, y, width, height, radius);\n        } else {\n            ctx.fillRect(x, y, width, height);\n        }\n    }\n\n    /**\n     * Draw a rounded rectangle on Canvas\n     *\n     * @private\n     * @param {CanvasRenderingContext2D} ctx Canvas context\n     * @param {number} x X-position of the rectangle\n     * @param {number} y Y-position of the rectangle\n     * @param {number} width Width of the rectangle\n     * @param {number} height Height of the rectangle\n     * @param {number} radius Radius of the rectangle\n     *\n     * @return {void}\n     * @example drawRoundedRect(ctx, 50, 50, 5, 10, 3)\n     */\n    drawRoundedRect(ctx, x, y, width, height, radius) {\n        if (height === 0) {\n            return;\n        }\n        // peaks are float values from -1 to 1. Use absolute height values in\n        // order to correctly calculate rounded rectangle coordinates\n        if (height < 0) {\n            height *= -1;\n            y -= height;\n        }\n        ctx.beginPath();\n        ctx.moveTo(x + radius, y);\n        ctx.lineTo(x + width - radius, y);\n        ctx.quadraticCurveTo(x + width, y, x + width, y + radius);\n        ctx.lineTo(x + width, y + height - radius);\n        ctx.quadraticCurveTo(\n            x + width,\n            y + height,\n            x + width - radius,\n            y + height\n        );\n        ctx.lineTo(x + radius, y + height);\n        ctx.quadraticCurveTo(x, y + height, x, y + height - radius);\n        ctx.lineTo(x, y + radius);\n        ctx.quadraticCurveTo(x, y, x + radius, y);\n        ctx.closePath();\n        ctx.fill();\n    }\n\n    /**\n     * Render the actual wave and progress lines\n     *\n     * @param {number[]} peaks Array with peaks data\n     * @param {number} absmax Maximum peak value (absolute)\n     * @param {number} halfH Half the height of the waveform\n     * @param {number} offsetY Offset to the top\n     * @param {number} start The x-offset of the beginning of the area that\n     * should be rendered\n     * @param {number} end The x-offset of the end of the area that\n     * should be rendered\n     */\n    drawLines(peaks, absmax, halfH, offsetY, start, end) {\n        this.drawLineToContext(\n            this.waveCtx,\n            peaks,\n            absmax,\n            halfH,\n            offsetY,\n            start,\n            end\n        );\n\n        if (this.hasProgressCanvas) {\n            this.drawLineToContext(\n                this.progressCtx,\n                peaks,\n                absmax,\n                halfH,\n                offsetY,\n                start,\n                end\n            );\n        }\n    }\n\n    /**\n     * Render the actual waveform line on a `canvas` element\n     *\n     * @private\n     * @param {CanvasRenderingContext2D} ctx Rendering context of target canvas\n     * @param {number[]} peaks Array with peaks data\n     * @param {number} absmax Maximum peak value (absolute)\n     * @param {number} halfH Half the height of the waveform\n     * @param {number} offsetY Offset to the top\n     * @param {number} start The x-offset of the beginning of the area that\n     * should be rendered\n     * @param {number} end The x-offset of the end of the area that\n     * should be rendered\n     */\n    drawLineToContext(ctx, peaks, absmax, halfH, offsetY, start, end) {\n        if (!ctx) {\n            return;\n        }\n\n        const length = peaks.length / 2;\n        const first = Math.round(length * this.start);\n\n        // use one more peak value to make sure we join peaks at ends -- unless,\n        // of course, this is the last canvas\n        const last = Math.round(length * this.end) + 1;\n\n        const canvasStart = first;\n        const canvasEnd = last;\n        const scale = this.wave.width / (canvasEnd - canvasStart - 1);\n\n        // optimization\n        const halfOffset = halfH + offsetY;\n        const absmaxHalf = absmax / halfH;\n\n        ctx.beginPath();\n        ctx.moveTo((canvasStart - first) * scale, halfOffset);\n\n        ctx.lineTo(\n            (canvasStart - first) * scale,\n            halfOffset - Math.round((peaks[2 * canvasStart] || 0) / absmaxHalf)\n        );\n\n        let i, peak, h;\n        for (i = canvasStart; i < canvasEnd; i++) {\n            peak = peaks[2 * i] || 0;\n            h = Math.round(peak / absmaxHalf);\n            ctx.lineTo((i - first) * scale + this.halfPixel, halfOffset - h);\n        }\n\n        // draw the bottom edge going backwards, to make a single\n        // closed hull to fill\n        let j = canvasEnd - 1;\n        for (j; j >= canvasStart; j--) {\n            peak = peaks[2 * j + 1] || 0;\n            h = Math.round(peak / absmaxHalf);\n            ctx.lineTo((j - first) * scale + this.halfPixel, halfOffset - h);\n        }\n\n        ctx.lineTo(\n            (canvasStart - first) * scale,\n            halfOffset -\n                Math.round((peaks[2 * canvasStart + 1] || 0) / absmaxHalf)\n        );\n\n        ctx.closePath();\n        ctx.fill();\n    }\n\n    /**\n     * Destroys this entry\n     */\n    destroy() {\n        this.waveCtx = null;\n        this.wave = null;\n\n        this.progressCtx = null;\n        this.progress = null;\n    }\n\n    /**\n     * Return image data of the wave `canvas` element\n     *\n     * When using a `type` of `'blob'`, this will return a `Promise` that\n     * resolves with a `Blob` instance.\n     *\n     * @param {string} format='image/png' An optional value of a format type.\n     * @param {number} quality=0.92 An optional value between 0 and 1.\n     * @param {string} type='dataURL' Either 'dataURL' or 'blob'.\n     * @return {string|Promise} When using the default `'dataURL'` `type` this\n     * returns a data URL. When using the `'blob'` `type` this returns a\n     * `Promise` that resolves with a `Blob` instance.\n     */\n    getImage(format, quality, type) {\n        if (type === 'blob') {\n            return new Promise(resolve => {\n                this.wave.toBlob(resolve, format, quality);\n            });\n        } else if (type === 'dataURL') {\n            return this.wave.toDataURL(format, quality);\n        }\n    }\n}\n","import * as util from './util';\n\n/**\n * Parent class for renderers\n *\n * @extends {Observer}\n */\nexport default class Drawer extends util.Observer {\n    /**\n     * @param {HTMLElement} container The container node of the wavesurfer instance\n     * @param {WavesurferParams} params The wavesurfer initialisation options\n     */\n    constructor(container, params) {\n        super();\n        /** @private */\n        this.container = container;\n        /**\n         * @type {WavesurferParams}\n         * @private\n         */\n        this.params = params;\n        /**\n         * The width of the renderer\n         * @type {number}\n         */\n        this.width = 0;\n        /**\n         * The height of the renderer\n         * @type {number}\n         */\n        this.height = params.height * this.params.pixelRatio;\n        /** @private */\n        this.lastPos = 0;\n        /**\n         * The `<wave>` element which is added to the container\n         * @type {HTMLElement}\n         */\n        this.wrapper = null;\n    }\n\n    /**\n     * Alias of `util.style`\n     *\n     * @param {HTMLElement} el The element that the styles will be applied to\n     * @param {Object} styles The map of propName: attribute, both are used as-is\n     * @return {HTMLElement} el\n     */\n    style(el, styles) {\n        return util.style(el, styles);\n    }\n\n    /**\n     * Create the wrapper `<wave>` element, style it and set up the events for\n     * interaction\n     */\n    createWrapper() {\n        this.wrapper = this.container.appendChild(\n            document.createElement('wave')\n        );\n\n        this.style(this.wrapper, {\n            display: 'block',\n            position: 'relative',\n            userSelect: 'none',\n            webkitUserSelect: 'none',\n            height: this.params.height + 'px'\n        });\n\n        if (this.params.fillParent || this.params.scrollParent) {\n            this.style(this.wrapper, {\n                width: '100%',\n                overflowX: this.params.hideScrollbar ? 'hidden' : 'auto',\n                overflowY: 'hidden'\n            });\n        }\n\n        this.setupWrapperEvents();\n    }\n\n    /**\n     * Handle click event\n     *\n     * @param {Event} e Click event\n     * @param {?boolean} noPrevent Set to true to not call `e.preventDefault()`\n     * @return {number} Playback position from 0 to 1\n     */\n    handleEvent(e, noPrevent) {\n        !noPrevent && e.preventDefault();\n\n        const clientX = e.targetTouches\n            ? e.targetTouches[0].clientX\n            : e.clientX;\n        const bbox = this.wrapper.getBoundingClientRect();\n\n        const nominalWidth = this.width;\n        const parentWidth = this.getWidth();\n\n        let progress;\n        if (!this.params.fillParent && nominalWidth < parentWidth) {\n            progress =\n                (this.params.rtl ? bbox.right - clientX : clientX - bbox.left) *\n                    (this.params.pixelRatio / nominalWidth) || 0;\n\n            if (progress > 1) {\n                progress = 1;\n            }\n        } else {\n            progress =\n                ((this.params.rtl\n                    ? bbox.right - clientX\n                    : clientX - bbox.left) +\n                    this.wrapper.scrollLeft) /\n                    this.wrapper.scrollWidth || 0;\n        }\n\n        return progress;\n    }\n\n    /**\n     * @private\n     */\n    setupWrapperEvents() {\n        this.wrapper.addEventListener('click', e => {\n            const scrollbarHeight =\n                this.wrapper.offsetHeight - this.wrapper.clientHeight;\n            if (scrollbarHeight !== 0) {\n                // scrollbar is visible.  Check if click was on it\n                const bbox = this.wrapper.getBoundingClientRect();\n                if (e.clientY >= bbox.bottom - scrollbarHeight) {\n                    // ignore mousedown as it was on the scrollbar\n                    return;\n                }\n            }\n\n            if (this.params.interact) {\n                this.fireEvent('click', e, this.handleEvent(e));\n            }\n        });\n\n        this.wrapper.addEventListener('dblclick', e => {\n            if (this.params.interact) {\n                this.fireEvent('dblclick', e, this.handleEvent(e));\n            }\n        });\n\n        this.wrapper.addEventListener('scroll', e =>\n            this.fireEvent('scroll', e)\n        );\n    }\n\n    /**\n     * Draw peaks on the canvas\n     *\n     * @param {number[]|Number.<Array[]>} peaks Can also be an array of arrays\n     * for split channel rendering\n     * @param {number} length The width of the area that should be drawn\n     * @param {number} start The x-offset of the beginning of the area that\n     * should be rendered\n     * @param {number} end The x-offset of the end of the area that should be\n     * rendered\n     */\n    drawPeaks(peaks, length, start, end) {\n        if (!this.setWidth(length)) {\n            this.clearWave();\n        }\n\n        this.params.barWidth\n            ? this.drawBars(peaks, 0, start, end)\n            : this.drawWave(peaks, 0, start, end);\n    }\n\n    /**\n     * Scroll to the beginning\n     */\n    resetScroll() {\n        if (this.wrapper !== null) {\n            this.wrapper.scrollLeft = 0;\n        }\n    }\n\n    /**\n     * Recenter the view-port at a certain percent of the waveform\n     *\n     * @param {number} percent Value from 0 to 1 on the waveform\n     */\n    recenter(percent) {\n        const position = this.wrapper.scrollWidth * percent;\n        this.recenterOnPosition(position, true);\n    }\n\n    /**\n     * Recenter the view-port on a position, either scroll there immediately or\n     * in steps of 5 pixels\n     *\n     * @param {number} position X-offset in pixels\n     * @param {boolean} immediate Set to true to immediately scroll somewhere\n     */\n    recenterOnPosition(position, immediate) {\n        const scrollLeft = this.wrapper.scrollLeft;\n        const half = ~~(this.wrapper.clientWidth / 2);\n        const maxScroll = this.wrapper.scrollWidth - this.wrapper.clientWidth;\n        let target = position - half;\n        let offset = target - scrollLeft;\n\n        if (maxScroll == 0) {\n            // no need to continue if scrollbar is not there\n            return;\n        }\n\n        // if the cursor is currently visible...\n        if (!immediate && -half <= offset && offset < half) {\n            // set rate at which waveform is centered\n            let rate = this.params.autoCenterRate;\n\n            // make rate depend on width of view and length of waveform\n            rate /= half;\n            rate *= maxScroll;\n\n            offset = Math.max(-rate, Math.min(rate, offset));\n            target = scrollLeft + offset;\n        }\n\n        // limit target to valid range (0 to maxScroll)\n        target = Math.max(0, Math.min(maxScroll, target));\n        // no use attempting to scroll if we're not moving\n        if (target != scrollLeft) {\n            this.wrapper.scrollLeft = target;\n        }\n    }\n\n    /**\n     * Get the current scroll position in pixels\n     *\n     * @return {number} Horizontal scroll position in pixels\n     */\n    getScrollX() {\n        let x = 0;\n        if (this.wrapper) {\n            const pixelRatio = this.params.pixelRatio;\n            x = Math.round(this.wrapper.scrollLeft * pixelRatio);\n\n            // In cases of elastic scroll (safari with mouse wheel) you can\n            // scroll beyond the limits of the container\n            // Calculate and floor the scrollable extent to make sure an out\n            // of bounds value is not returned\n            // Ticket #1312\n            if (this.params.scrollParent) {\n                const maxScroll = ~~(\n                    this.wrapper.scrollWidth * pixelRatio -\n                    this.getWidth()\n                );\n                x = Math.min(maxScroll, Math.max(0, x));\n            }\n        }\n        return x;\n    }\n\n    /**\n     * Get the width of the container\n     *\n     * @return {number} The width of the container\n     */\n    getWidth() {\n        return Math.round(this.container.clientWidth * this.params.pixelRatio);\n    }\n\n    /**\n     * Set the width of the container\n     *\n     * @param {number} width The new width of the container\n     * @return {boolean} Whether the width of the container was updated or not\n     */\n    setWidth(width) {\n        if (this.width == width) {\n            return false;\n        }\n\n        this.width = width;\n\n        if (this.params.fillParent || this.params.scrollParent) {\n            this.style(this.wrapper, {\n                width: ''\n            });\n        } else {\n            this.style(this.wrapper, {\n                width: ~~(this.width / this.params.pixelRatio) + 'px'\n            });\n        }\n\n        this.updateSize();\n        return true;\n    }\n\n    /**\n     * Set the height of the container\n     *\n     * @param {number} height The new height of the container.\n     * @return {boolean} Whether the height of the container was updated or not\n     */\n    setHeight(height) {\n        if (height == this.height) {\n            return false;\n        }\n        this.height = height;\n\n        this.style(this.wrapper, {\n            height: ~~(this.height / this.params.pixelRatio) + 'px'\n        });\n\n        this.updateSize();\n        return true;\n    }\n\n    /**\n     * Called by wavesurfer when progress should be rendered\n     *\n     * @param {number} progress From 0 to 1\n     */\n    progress(progress) {\n        const minPxDelta = 1 / this.params.pixelRatio;\n        const pos = Math.round(progress * this.width) * minPxDelta;\n\n        if (pos < this.lastPos || pos - this.lastPos >= minPxDelta) {\n            this.lastPos = pos;\n\n            if (this.params.scrollParent && this.params.autoCenter) {\n                const newPos = ~~(this.wrapper.scrollWidth * progress);\n                this.recenterOnPosition(\n                    newPos,\n                    this.params.autoCenterImmediately\n                );\n            }\n\n            this.updateProgress(pos);\n        }\n    }\n\n    /**\n     * This is called when wavesurfer is destroyed\n     */\n    destroy() {\n        this.unAll();\n        if (this.wrapper) {\n            if (this.wrapper.parentNode == this.container) {\n                this.container.removeChild(this.wrapper);\n            }\n            this.wrapper = null;\n        }\n    }\n\n    /* Renderer-specific methods */\n\n    /**\n     * Called after cursor related params have changed.\n     *\n     * @abstract\n     */\n    updateCursor() {}\n\n    /**\n     * Called when the size of the container changes so the renderer can adjust\n     *\n     * @abstract\n     */\n    updateSize() {}\n\n    /**\n     * Draw a waveform with bars\n     *\n     * @abstract\n     * @param {number[]|Number.<Array[]>} peaks Can also be an array of arrays for split channel\n     * rendering\n     * @param {number} channelIndex The index of the current channel. Normally\n     * should be 0\n     * @param {number} start The x-offset of the beginning of the area that\n     * should be rendered\n     * @param {number} end The x-offset of the end of the area that should be\n     * rendered\n     */\n    drawBars(peaks, channelIndex, start, end) {}\n\n    /**\n     * Draw a waveform\n     *\n     * @abstract\n     * @param {number[]|Number.<Array[]>} peaks Can also be an array of arrays for split channel\n     * rendering\n     * @param {number} channelIndex The index of the current channel. Normally\n     * should be 0\n     * @param {number} start The x-offset of the beginning of the area that\n     * should be rendered\n     * @param {number} end The x-offset of the end of the area that should be\n     * rendered\n     */\n    drawWave(peaks, channelIndex, start, end) {}\n\n    /**\n     * Clear the waveform\n     *\n     * @abstract\n     */\n    clearWave() {}\n\n    /**\n     * Render the new progress\n     *\n     * @abstract\n     * @param {number} position X-Offset of progress position in pixels\n     */\n    updateProgress(position) {}\n}\n","import Drawer from './drawer';\nimport * as util from './util';\nimport CanvasEntry from './drawer.canvasentry';\n\n/**\n * MultiCanvas renderer for wavesurfer. Is currently the default and sole\n * builtin renderer.\n *\n * A `MultiCanvas` consists of one or more `CanvasEntry` instances, depending\n * on the zoom level.\n */\nexport default class MultiCanvas extends Drawer {\n    /**\n     * @param {HTMLElement} container The container node of the wavesurfer instance\n     * @param {WavesurferParams} params The wavesurfer initialisation options\n     */\n    constructor(container, params) {\n        super(container, params);\n\n        /**\n         * @type {number}\n         * @private\n         */\n        this.maxCanvasWidth = params.maxCanvasWidth;\n\n        /**\n         * @private\n         * @type {number}\n         */\n        this.maxCanvasElementWidth = Math.round(\n            params.maxCanvasWidth / params.pixelRatio\n        );\n\n        /**\n         * Whether or not the progress wave is rendered. If the `waveColor`\n         * and `progressColor` are the same color it is not.\n         *\n         * @type {boolean}\n         */\n        this.hasProgressCanvas = params.waveColor != params.progressColor;\n\n        /**\n         * @private\n         * @type {number}\n         */\n        this.halfPixel = 0.5 / params.pixelRatio;\n\n        /**\n         * List of `CanvasEntry` instances.\n         *\n         * @private\n         * @type {Array}\n         */\n        this.canvases = [];\n\n        /**\n         * @private\n         * @type {HTMLElement}\n         */\n        this.progressWave = null;\n\n        /**\n         * Class used to generate entries.\n         *\n         * @private\n         * @type {function}\n         */\n        this.EntryClass = CanvasEntry;\n\n        /**\n         * Canvas 2d context attributes.\n         *\n         * @private\n         * @type {object}\n         */\n        this.canvasContextAttributes = params.drawingContextAttributes;\n\n        /**\n         * Overlap added between entries to prevent vertical white stripes\n         * between `canvas` elements.\n         *\n         * @type {number}\n         */\n        this.overlap = 2 * Math.ceil(params.pixelRatio / 2);\n\n        /**\n         * The radius of the wave bars. Makes bars rounded\n         *\n         * @private\n         * @type {number}\n         */\n        this.barRadius = params.barRadius || 0;\n    }\n\n    /**\n     * Initialize the drawer\n     */\n    init() {\n        this.createWrapper();\n        this.createElements();\n    }\n\n    /**\n     * Create the canvas elements and style them\n     *\n     * @private\n     */\n    createElements() {\n        this.progressWave = this.wrapper.appendChild(\n            this.style(document.createElement('wave'), {\n                position: 'absolute',\n                zIndex: 3,\n                left: 0,\n                top: 0,\n                bottom: 0,\n                overflow: 'hidden',\n                width: '0',\n                display: 'none',\n                boxSizing: 'border-box',\n                borderRightStyle: 'solid',\n                pointerEvents: 'none'\n            })\n        );\n\n        this.addCanvas();\n        this.updateCursor();\n    }\n\n    /**\n     * Update cursor style\n     */\n    updateCursor() {\n        this.style(this.progressWave, {\n            borderRightWidth: this.params.cursorWidth + 'px',\n            borderRightColor: this.params.cursorColor\n        });\n    }\n\n    /**\n     * Adjust to the updated size by adding or removing canvases\n     */\n    updateSize() {\n        const totalWidth = Math.round(this.width / this.params.pixelRatio);\n        const requiredCanvases = Math.ceil(\n            totalWidth / (this.maxCanvasElementWidth + this.overlap)\n        );\n\n        // add required canvases\n        while (this.canvases.length < requiredCanvases) {\n            this.addCanvas();\n        }\n\n        // remove older existing canvases, if any\n        while (this.canvases.length > requiredCanvases) {\n            this.removeCanvas();\n        }\n\n        let canvasWidth = this.maxCanvasWidth + this.overlap;\n        const lastCanvas = this.canvases.length - 1;\n        this.canvases.forEach((entry, i) => {\n            if (i == lastCanvas) {\n                canvasWidth = this.width - this.maxCanvasWidth * lastCanvas;\n            }\n            this.updateDimensions(entry, canvasWidth, this.height);\n\n            entry.clearWave();\n        });\n    }\n\n    /**\n     * Add a canvas to the canvas list\n     *\n     * @private\n     */\n    addCanvas() {\n        const entry = new this.EntryClass();\n        entry.canvasContextAttributes = this.canvasContextAttributes;\n        entry.hasProgressCanvas = this.hasProgressCanvas;\n        entry.halfPixel = this.halfPixel;\n        const leftOffset = this.maxCanvasElementWidth * this.canvases.length;\n\n        // wave\n        entry.initWave(\n            this.wrapper.appendChild(\n                this.style(document.createElement('canvas'), {\n                    position: 'absolute',\n                    zIndex: 2,\n                    left: leftOffset + 'px',\n                    top: 0,\n                    bottom: 0,\n                    height: '100%',\n                    pointerEvents: 'none'\n                })\n            )\n        );\n\n        // progress\n        if (this.hasProgressCanvas) {\n            entry.initProgress(\n                this.progressWave.appendChild(\n                    this.style(document.createElement('canvas'), {\n                        position: 'absolute',\n                        left: leftOffset + 'px',\n                        top: 0,\n                        bottom: 0,\n                        height: '100%'\n                    })\n                )\n            );\n        }\n\n        this.canvases.push(entry);\n    }\n\n    /**\n     * Pop single canvas from the list\n     *\n     * @private\n     */\n    removeCanvas() {\n        let lastEntry = this.canvases[this.canvases.length - 1];\n\n        // wave\n        lastEntry.wave.parentElement.removeChild(lastEntry.wave);\n\n        // progress\n        if (this.hasProgressCanvas) {\n            lastEntry.progress.parentElement.removeChild(lastEntry.progress);\n        }\n\n        // cleanup\n        if (lastEntry) {\n            lastEntry.destroy();\n            lastEntry = null;\n        }\n\n        this.canvases.pop();\n    }\n\n    /**\n     * Update the dimensions of a canvas element\n     *\n     * @private\n     * @param {CanvasEntry} entry Target entry\n     * @param {number} width The new width of the element\n     * @param {number} height The new height of the element\n     */\n    updateDimensions(entry, width, height) {\n        const elementWidth = Math.round(width / this.params.pixelRatio);\n        const totalWidth = Math.round(this.width / this.params.pixelRatio);\n\n        // update canvas dimensions\n        entry.updateDimensions(elementWidth, totalWidth, width, height);\n\n        // style element\n        this.style(this.progressWave, { display: 'block' });\n    }\n\n    /**\n     * Clear the whole multi-canvas\n     */\n    clearWave() {\n        this.canvases.forEach(entry => entry.clearWave());\n    }\n\n    /**\n     * Draw a waveform with bars\n     *\n     * @param {number[]|Number.<Array[]>} peaks Can also be an array of arrays\n     * for split channel rendering\n     * @param {number} channelIndex The index of the current channel. Normally\n     * should be 0. Must be an integer.\n     * @param {number} start The x-offset of the beginning of the area that\n     * should be rendered\n     * @param {number} end The x-offset of the end of the area that should be\n     * rendered\n     * @returns {void}\n     */\n    drawBars(peaks, channelIndex, start, end) {\n        return this.prepareDraw(\n            peaks,\n            channelIndex,\n            start,\n            end,\n            ({ absmax, hasMinVals, height, offsetY, halfH, peaks }) => {\n                // if drawBars was called within ws.empty we don't pass a start and\n                // don't want anything to happen\n                if (start === undefined) {\n                    return;\n                }\n                // Skip every other value if there are negatives.\n                const peakIndexScale = hasMinVals ? 2 : 1;\n                const length = peaks.length / peakIndexScale;\n                const bar = this.params.barWidth * this.params.pixelRatio;\n                const gap =\n                    this.params.barGap === null\n                        ? Math.max(this.params.pixelRatio, ~~(bar / 2))\n                        : Math.max(\n                              this.params.pixelRatio,\n                              this.params.barGap * this.params.pixelRatio\n                          );\n                const step = bar + gap;\n\n                const scale = length / this.width;\n                const first = start;\n                const last = end;\n                let i = first;\n\n                for (i; i < last; i += step) {\n                    const peak =\n                        peaks[Math.floor(i * scale * peakIndexScale)] || 0;\n                    let h = Math.round((peak / absmax) * halfH);\n\n                    /* in case of silences, allow the user to specify that we\n                     * always draw *something* (normally a 1px high bar) */\n                    if (h == 0 && this.params.barMinHeight)\n                        h = this.params.barMinHeight;\n\n                    this.fillRect(\n                        i + this.halfPixel,\n                        halfH - h + offsetY,\n                        bar + this.halfPixel,\n                        h * 2,\n                        this.barRadius\n                    );\n                }\n            }\n        );\n    }\n\n    /**\n     * Draw a waveform\n     *\n     * @param {number[]|Number.<Array[]>} peaks Can also be an array of arrays\n     * for split channel rendering\n     * @param {number} channelIndex The index of the current channel. Normally\n     * should be 0\n     * @param {number?} start The x-offset of the beginning of the area that\n     * should be rendered (If this isn't set only a flat line is rendered)\n     * @param {number?} end The x-offset of the end of the area that should be\n     * rendered\n     * @returns {void}\n     */\n    drawWave(peaks, channelIndex, start, end) {\n        return this.prepareDraw(\n            peaks,\n            channelIndex,\n            start,\n            end,\n            ({ absmax, hasMinVals, height, offsetY, halfH, peaks }) => {\n                if (!hasMinVals) {\n                    const reflectedPeaks = [];\n                    const len = peaks.length;\n                    let i = 0;\n                    for (i; i < len; i++) {\n                        reflectedPeaks[2 * i] = peaks[i];\n                        reflectedPeaks[2 * i + 1] = -peaks[i];\n                    }\n                    peaks = reflectedPeaks;\n                }\n\n                // if drawWave was called within ws.empty we don't pass a start and\n                // end and simply want a flat line\n                if (start !== undefined) {\n                    this.drawLine(peaks, absmax, halfH, offsetY, start, end);\n                }\n\n                // always draw a median line\n                this.fillRect(\n                    0,\n                    halfH + offsetY - this.halfPixel,\n                    this.width,\n                    this.halfPixel,\n                    this.barRadius\n                );\n            }\n        );\n    }\n\n    /**\n     * Tell the canvas entries to render their portion of the waveform\n     *\n     * @private\n     * @param {number[]} peaks Peaks data\n     * @param {number} absmax Maximum peak value (absolute)\n     * @param {number} halfH Half the height of the waveform\n     * @param {number} offsetY Offset to the top\n     * @param {number} start The x-offset of the beginning of the area that\n     * should be rendered\n     * @param {number} end The x-offset of the end of the area that\n     * should be rendered\n     */\n    drawLine(peaks, absmax, halfH, offsetY, start, end) {\n        this.canvases.forEach(entry => {\n            this.setFillStyles(entry);\n            entry.drawLines(peaks, absmax, halfH, offsetY, start, end);\n        });\n    }\n\n    /**\n     * Draw a rectangle on the multi-canvas\n     *\n     * @param {number} x X-position of the rectangle\n     * @param {number} y Y-position of the rectangle\n     * @param {number} width Width of the rectangle\n     * @param {number} height Height of the rectangle\n     * @param {number} radius Radius of the rectangle\n     */\n    fillRect(x, y, width, height, radius) {\n        const startCanvas = Math.floor(x / this.maxCanvasWidth);\n        const endCanvas = Math.min(\n            Math.ceil((x + width) / this.maxCanvasWidth) + 1,\n            this.canvases.length\n        );\n        let i = startCanvas;\n        for (i; i < endCanvas; i++) {\n            const entry = this.canvases[i];\n            const leftOffset = i * this.maxCanvasWidth;\n\n            const intersection = {\n                x1: Math.max(x, i * this.maxCanvasWidth),\n                y1: y,\n                x2: Math.min(\n                    x + width,\n                    i * this.maxCanvasWidth + entry.wave.width\n                ),\n                y2: y + height\n            };\n\n            if (intersection.x1 < intersection.x2) {\n                this.setFillStyles(entry);\n\n                entry.fillRects(\n                    intersection.x1 - leftOffset,\n                    intersection.y1,\n                    intersection.x2 - intersection.x1,\n                    intersection.y2 - intersection.y1,\n                    radius\n                );\n            }\n        }\n    }\n\n    /**\n     * Performs preparation tasks and calculations which are shared by `drawBars`\n     * and `drawWave`\n     *\n     * @private\n     * @param {number[]|Number.<Array[]>} peaks Can also be an array of arrays for\n     * split channel rendering\n     * @param {number} channelIndex The index of the current channel. Normally\n     * should be 0\n     * @param {number?} start The x-offset of the beginning of the area that\n     * should be rendered. If this isn't set only a flat line is rendered\n     * @param {number?} end The x-offset of the end of the area that should be\n     * rendered\n     * @param {function} fn The render function to call, e.g. `drawWave`\n     * @returns {void}\n     */\n    prepareDraw(peaks, channelIndex, start, end, fn) {\n        return util.frame(() => {\n            // Split channels and call this function with the channelIndex set\n            if (peaks[0] instanceof Array) {\n                const channels = peaks;\n                if (this.params.splitChannels) {\n                    this.setHeight(\n                        channels.length *\n                            this.params.height *\n                            this.params.pixelRatio\n                    );\n                    return channels.forEach((channelPeaks, i) =>\n                        this.prepareDraw(channelPeaks, i, start, end, fn)\n                    );\n                }\n                peaks = channels[0];\n            }\n            // calculate maximum modulation value, either from the barHeight\n            // parameter or if normalize=true from the largest value in the peak\n            // set\n            let absmax = 1 / this.params.barHeight;\n            if (this.params.normalize) {\n                const max = util.max(peaks);\n                const min = util.min(peaks);\n                absmax = -min > max ? -min : max;\n            }\n\n            // Bar wave draws the bottom only as a reflection of the top,\n            // so we don't need negative values\n            const hasMinVals = [].some.call(peaks, val => val < 0);\n            const height = this.params.height * this.params.pixelRatio;\n            const offsetY = height * channelIndex || 0;\n            const halfH = height / 2;\n\n            return fn({\n                absmax: absmax,\n                hasMinVals: hasMinVals,\n                height: height,\n                offsetY: offsetY,\n                halfH: halfH,\n                peaks: peaks\n            });\n        })();\n    }\n\n    /**\n     * Set the fill styles for a certain entry (wave and progress)\n     *\n     * @private\n     * @param {CanvasEntry} entry Target entry\n     */\n    setFillStyles(entry) {\n        entry.setFillStyles(this.params.waveColor, this.params.progressColor);\n    }\n\n    /**\n     * Return image data of the multi-canvas\n     *\n     * When using a `type` of `'blob'`, this will return a `Promise`.\n     *\n     * @param {string} format='image/png' An optional value of a format type.\n     * @param {number} quality=0.92 An optional value between 0 and 1.\n     * @param {string} type='dataURL' Either 'dataURL' or 'blob'.\n     * @return {string|string[]|Promise} When using the default `'dataURL'`\n     * `type` this returns a single data URL or an array of data URLs,\n     * one for each canvas. When using the `'blob'` `type` this returns a\n     * `Promise` that resolves with an array of `Blob` instances, one for each\n     * canvas.\n     */\n    getImage(format, quality, type) {\n        if (type === 'blob') {\n            return Promise.all(\n                this.canvases.map(entry => {\n                    return entry.getImage(format, quality, type);\n                })\n            );\n        } else if (type === 'dataURL') {\n            let images = this.canvases.map(entry =>\n                entry.getImage(format, quality, type)\n            );\n            return images.length > 1 ? images : images[0];\n        }\n    }\n\n    /**\n     * Render the new progress\n     *\n     * @param {number} position X-offset of progress position in pixels\n     */\n    updateProgress(position) {\n        this.style(this.progressWave, { width: position + 'px' });\n    }\n}\n","import MediaElement from './mediaelement';\n\n/**\n * MediaElementWebAudio backend: allows to load audio as HTML5 audio tag and use it with WebAudio API.\n * Setting the MediaElementWebAudio backend, there is the possibility to load audio of big dimensions, using the WebAudio API features.\n * The audio to load is an HTML5 audio tag, so you have to use the same methods of MediaElement backend for loading and playback.\n * In this way, the audio resource is not loaded entirely from server, but in ranges, since you load an HTML5 audio tag.\n * In this way, filters and other functionalities can be performed like with WebAudio backend, but without decoding\n * internally audio data, that caused crashing of the browser. You have to give also peaks, so the audio data are not decoded.\n *\n * @since 3.2.0\n */\nexport default class MediaElementWebAudio extends MediaElement {\n    /**\n     * Construct the backend\n     *\n     * @param {WavesurferParams} params Wavesurfer parameters\n     */\n    constructor(params) {\n        super(params);\n        /** @private */\n        this.params = params;\n        /** @private */\n        this.sourceMediaElement = null;\n    }\n\n    /**\n     * Initialise the backend, called in `wavesurfer.createBackend()`\n     */\n    init() {\n        this.setPlaybackRate(this.params.audioRate);\n        this.createTimer();\n        this.createVolumeNode();\n        this.createScriptNode();\n        this.createAnalyserNode();\n    }\n    /**\n     * Private method called by both `load` (from url)\n     * and `loadElt` (existing media element) methods.\n     *\n     * @param {HTMLMediaElement} media HTML5 Audio or Video element\n     * @param {number[]|Number.<Array[]>} peaks Array of peak data\n     * @private\n     */\n    _load(media, peaks) {\n        super._load(media, peaks);\n        this.createMediaElementSource(media);\n    }\n\n    /**\n     * Create MediaElementSource node\n     *\n     * @since 3.2.0\n     * @param {HTMLMediaElement} mediaElement HTML5 Audio to load\n     */\n    createMediaElementSource(mediaElement) {\n        this.sourceMediaElement = this.ac.createMediaElementSource(\n            mediaElement\n        );\n        this.sourceMediaElement.connect(this.analyser);\n    }\n}\n","import WebAudio from './webaudio';\nimport * as util from './util';\n\n/**\n * MediaElement backend\n */\nexport default class MediaElement extends WebAudio {\n    /**\n     * Construct the backend\n     *\n     * @param {WavesurferParams} params Wavesurfer parameters\n     */\n    constructor(params) {\n        super(params);\n        /** @private */\n        this.params = params;\n\n        /**\n         * Initially a dummy media element to catch errors. Once `_load` is\n         * called, this will contain the actual `HTMLMediaElement`.\n         * @private\n         */\n        this.media = {\n            currentTime: 0,\n            duration: 0,\n            paused: true,\n            playbackRate: 1,\n            play() {},\n            pause() {},\n            volume: 0\n        };\n\n        /** @private */\n        this.mediaType = params.mediaType.toLowerCase();\n        /** @private */\n        this.elementPosition = params.elementPosition;\n        /** @private */\n        this.peaks = null;\n        /** @private */\n        this.playbackRate = 1;\n        /** @private */\n        this.volume = 1;\n        /** @private */\n        this.isMuted = false;\n        /** @private */\n        this.buffer = null;\n        /** @private */\n        this.onPlayEnd = null;\n        /** @private */\n        this.mediaListeners = {};\n    }\n\n    /**\n     * Initialise the backend, called in `wavesurfer.createBackend()`\n     */\n    init() {\n        this.setPlaybackRate(this.params.audioRate);\n        this.createTimer();\n    }\n\n    /**\n     * Attach event listeners to media element.\n     */\n    _setupMediaListeners() {\n        this.mediaListeners.error = () => {\n            this.fireEvent('error', 'Error loading media element');\n        };\n        this.mediaListeners.canplay = () => {\n            this.fireEvent('canplay');\n        };\n        this.mediaListeners.ended = () => {\n            this.fireEvent('finish');\n        };\n        // listen to and relay play, pause and seeked events to enable\n        // playback control from the external media element\n        this.mediaListeners.play = () => {\n            this.fireEvent('play');\n        };\n        this.mediaListeners.pause = () => {\n            this.fireEvent('pause');\n        };\n        this.mediaListeners.seeked = event => {\n            this.fireEvent('seek');\n        };\n        this.mediaListeners.volumechange = event => {\n            this.isMuted = this.media.muted;\n            if (this.isMuted) {\n                this.volume = 0;\n            } else {\n                this.volume = this.media.volume;\n            }\n            this.fireEvent('volume');\n        };\n\n        // reset event listeners\n        Object.keys(this.mediaListeners).forEach(id => {\n            this.media.removeEventListener(id, this.mediaListeners[id]);\n            this.media.addEventListener(id, this.mediaListeners[id]);\n        });\n    }\n\n    /**\n     * Create a timer to provide a more precise `audioprocess` event.\n     */\n    createTimer() {\n        const onAudioProcess = () => {\n            if (this.isPaused()) {\n                return;\n            }\n            this.fireEvent('audioprocess', this.getCurrentTime());\n\n            // Call again in the next frame\n            util.frame(onAudioProcess)();\n        };\n\n        this.on('play', onAudioProcess);\n\n        // Update the progress one more time to prevent it from being stuck in\n        // case of lower framerates\n        this.on('pause', () => {\n            this.fireEvent('audioprocess', this.getCurrentTime());\n        });\n    }\n\n    /**\n     * Create media element with url as its source,\n     * and append to container element.\n     *\n     * @param {string} url Path to media file\n     * @param {HTMLElement} container HTML element\n     * @param {number[]|Number.<Array[]>} peaks Array of peak data\n     * @param {string} preload HTML 5 preload attribute value\n     * @throws Will throw an error if the `url` argument is not a valid media\n     * element.\n     */\n    load(url, container, peaks, preload) {\n        const media = document.createElement(this.mediaType);\n        media.controls = this.params.mediaControls;\n        media.autoplay = this.params.autoplay || false;\n        media.preload = preload == null ? 'auto' : preload;\n        media.src = url;\n        media.style.width = '100%';\n\n        const prevMedia = container.querySelector(this.mediaType);\n        if (prevMedia) {\n            container.removeChild(prevMedia);\n        }\n        container.appendChild(media);\n\n        this._load(media, peaks);\n    }\n\n    /**\n     * Load existing media element.\n     *\n     * @param {HTMLMediaElement} elt HTML5 Audio or Video element\n     * @param {number[]|Number.<Array[]>} peaks Array of peak data\n     */\n    loadElt(elt, peaks) {\n        elt.controls = this.params.mediaControls;\n        elt.autoplay = this.params.autoplay || false;\n\n        this._load(elt, peaks);\n    }\n\n    /**\n     * Method called by both `load` (from url)\n     * and `loadElt` (existing media element) methods.\n     *\n     * @param {HTMLMediaElement} media HTML5 Audio or Video element\n     * @param {number[]|Number.<Array[]>} peaks Array of peak data\n     * @throws Will throw an error if the `media` argument is not a valid media\n     * element.\n     * @private\n     */\n    _load(media, peaks) {\n        // verify media element is valid\n        if (\n            !(media instanceof HTMLMediaElement) ||\n            typeof media.addEventListener === 'undefined'\n        ) {\n            throw new Error('media parameter is not a valid media element');\n        }\n\n        // load must be called manually on iOS, otherwise peaks won't draw\n        // until a user interaction triggers load --> 'ready' event\n        if (typeof media.load == 'function') {\n            // Resets the media element and restarts the media resource. Any\n            // pending events are discarded. How much media data is fetched is\n            // still affected by the preload attribute.\n            media.load();\n        }\n\n        this.media = media;\n        this._setupMediaListeners();\n        this.peaks = peaks;\n        this.onPlayEnd = null;\n        this.buffer = null;\n        this.isMuted = media.muted;\n        this.setPlaybackRate(this.playbackRate);\n        this.setVolume(this.volume);\n    }\n\n    /**\n     * Used by `wavesurfer.isPlaying()` and `wavesurfer.playPause()`\n     *\n     * @return {boolean} Media paused or not\n     */\n    isPaused() {\n        return !this.media || this.media.paused;\n    }\n\n    /**\n     * Used by `wavesurfer.getDuration()`\n     *\n     * @return {number} Duration\n     */\n    getDuration() {\n        if (this.explicitDuration) {\n            return this.explicitDuration;\n        }\n        let duration = (this.buffer || this.media).duration;\n        if (duration >= Infinity) {\n            // streaming audio\n            duration = this.media.seekable.end(0);\n        }\n        return duration;\n    }\n\n    /**\n     * Returns the current time in seconds relative to the audio-clip's\n     * duration.\n     *\n     * @return {number} Current time\n     */\n    getCurrentTime() {\n        return this.media && this.media.currentTime;\n    }\n\n    /**\n     * Get the position from 0 to 1\n     *\n     * @return {number} Current position\n     */\n    getPlayedPercents() {\n        return this.getCurrentTime() / this.getDuration() || 0;\n    }\n\n    /**\n     * Get the audio source playback rate.\n     *\n     * @return {number} Playback rate\n     */\n    getPlaybackRate() {\n        return this.playbackRate || this.media.playbackRate;\n    }\n\n    /**\n     * Set the audio source playback rate.\n     *\n     * @param {number} value Playback rate\n     */\n    setPlaybackRate(value) {\n        this.playbackRate = value || 1;\n        this.media.playbackRate = this.playbackRate;\n    }\n\n    /**\n     * Used by `wavesurfer.seekTo()`\n     *\n     * @param {number} start Position to start at in seconds\n     */\n    seekTo(start) {\n        if (start != null) {\n            this.media.currentTime = start;\n        }\n        this.clearPlayEnd();\n    }\n\n    /**\n     * Plays the loaded audio region.\n     *\n     * @param {number} start Start offset in seconds, relative to the beginning\n     * of a clip.\n     * @param {number} end When to stop, relative to the beginning of a clip.\n     * @emits MediaElement#play\n     * @return {Promise} Result\n     */\n    play(start, end) {\n        this.seekTo(start);\n        const promise = this.media.play();\n        end && this.setPlayEnd(end);\n\n        return promise;\n    }\n\n    /**\n     * Pauses the loaded audio.\n     *\n     * @emits MediaElement#pause\n     * @return {Promise} Result\n     */\n    pause() {\n        let promise;\n\n        if (this.media) {\n            promise = this.media.pause();\n        }\n        this.clearPlayEnd();\n\n        return promise;\n    }\n\n    /**\n     * Set the play end\n     *\n     * @param {number} end Where to end\n     */\n    setPlayEnd(end) {\n        this.clearPlayEnd();\n\n        this._onPlayEnd = time => {\n            if (time >= end) {\n                this.pause();\n                this.seekTo(end);\n            }\n        };\n        this.on('audioprocess', this._onPlayEnd);\n    }\n\n    /** @private */\n    clearPlayEnd() {\n        if (this._onPlayEnd) {\n            this.un('audioprocess', this._onPlayEnd);\n            this._onPlayEnd = null;\n        }\n    }\n\n    /**\n     * Compute the max and min value of the waveform when broken into\n     * <length> subranges.\n     *\n     * @param {number} length How many subranges to break the waveform into.\n     * @param {number} first First sample in the required range.\n     * @param {number} last Last sample in the required range.\n     * @return {number[]|Number.<Array[]>} Array of 2*<length> peaks or array of\n     * arrays of peaks consisting of (max, min) values for each subrange.\n     */\n    getPeaks(length, first, last) {\n        if (this.buffer) {\n            return super.getPeaks(length, first, last);\n        }\n        return this.peaks || [];\n    }\n\n    /**\n     * Set the sink id for the media player\n     *\n     * @param {string} deviceId String value representing audio device id.\n     * @returns {Promise} A Promise that resolves to `undefined` when there\n     * are no errors.\n     */\n    setSinkId(deviceId) {\n        if (deviceId) {\n            if (!this.media.setSinkId) {\n                return Promise.reject(\n                    new Error('setSinkId is not supported in your browser')\n                );\n            }\n            return this.media.setSinkId(deviceId);\n        }\n\n        return Promise.reject(new Error('Invalid deviceId: ' + deviceId));\n    }\n\n    /**\n     * Get the current volume\n     *\n     * @return {number} value A floating point value between 0 and 1.\n     */\n    getVolume() {\n        return this.volume;\n    }\n\n    /**\n     * Set the audio volume\n     *\n     * @param {number} value A floating point value between 0 and 1.\n     */\n    setVolume(value) {\n        this.volume = value;\n        // no need to change when it's already at that volume\n        if (this.media.volume !== this.volume) {\n            this.media.volume = this.volume;\n        }\n    }\n\n    /**\n     * This is called when wavesurfer is destroyed\n     *\n     */\n    destroy() {\n        this.pause();\n        this.unAll();\n        this.destroyed = true;\n\n        // cleanup media event listeners\n        Object.keys(this.mediaListeners).forEach(id => {\n            if (this.media) {\n                this.media.removeEventListener(id, this.mediaListeners[id]);\n            }\n        });\n\n        if (\n            this.params.removeMediaElementOnDestroy &&\n            this.media &&\n            this.media.parentNode\n        ) {\n            this.media.parentNode.removeChild(this.media);\n        }\n\n        this.media = null;\n    }\n}\n","/**\n * Caches the decoded peaks data to improve rendering speed for large audio\n *\n * Is used if the option parameter `partialRender` is set to `true`\n */\nexport default class PeakCache {\n    /**\n     * Instantiate cache\n     */\n    constructor() {\n        this.clearPeakCache();\n    }\n\n    /**\n     * Empty the cache\n     */\n    clearPeakCache() {\n        /**\n         * Flat array with entries that are always in pairs to mark the\n         * beginning and end of each subrange.  This is a convenience so we can\n         * iterate over the pairs for easy set difference operations.\n         * @private\n         */\n        this.peakCacheRanges = [];\n        /**\n         * Length of the entire cachable region, used for resetting the cache\n         * when this changes (zoom events, for instance).\n         * @private\n         */\n        this.peakCacheLength = -1;\n    }\n\n    /**\n     * Add a range of peaks to the cache\n     *\n     * @param {number} length The length of the range\n     * @param {number} start The x offset of the start of the range\n     * @param {number} end The x offset of the end of the range\n     * @return {Number.<Array[]>} Array with arrays of numbers\n     */\n    addRangeToPeakCache(length, start, end) {\n        if (length != this.peakCacheLength) {\n            this.clearPeakCache();\n            this.peakCacheLength = length;\n        }\n\n        // Return ranges that weren't in the cache before the call.\n        let uncachedRanges = [];\n        let i = 0;\n        // Skip ranges before the current start.\n        while (\n            i < this.peakCacheRanges.length &&\n            this.peakCacheRanges[i] < start\n        ) {\n            i++;\n        }\n        // If |i| is even, |start| falls after an existing range.  Otherwise,\n        // |start| falls between an existing range, and the uncached region\n        // starts when we encounter the next node in |peakCacheRanges| or\n        // |end|, whichever comes first.\n        if (i % 2 == 0) {\n            uncachedRanges.push(start);\n        }\n        while (\n            i < this.peakCacheRanges.length &&\n            this.peakCacheRanges[i] <= end\n        ) {\n            uncachedRanges.push(this.peakCacheRanges[i]);\n            i++;\n        }\n        // If |i| is even, |end| is after all existing ranges.\n        if (i % 2 == 0) {\n            uncachedRanges.push(end);\n        }\n\n        // Filter out the 0-length ranges.\n        uncachedRanges = uncachedRanges.filter((item, pos, arr) => {\n            if (pos == 0) {\n                return item != arr[pos + 1];\n            } else if (pos == arr.length - 1) {\n                return item != arr[pos - 1];\n            }\n            return item != arr[pos - 1] && item != arr[pos + 1];\n        });\n\n        // Merge the two ranges together, uncachedRanges will either contain\n        // wholly new points, or duplicates of points in peakCacheRanges.  If\n        // duplicates are detected, remove both and extend the range.\n        this.peakCacheRanges = this.peakCacheRanges.concat(uncachedRanges);\n        this.peakCacheRanges = this.peakCacheRanges\n            .sort((a, b) => a - b)\n            .filter((item, pos, arr) => {\n                if (pos == 0) {\n                    return item != arr[pos + 1];\n                } else if (pos == arr.length - 1) {\n                    return item != arr[pos - 1];\n                }\n                return item != arr[pos - 1] && item != arr[pos + 1];\n            });\n\n        // Push the uncached ranges into an array of arrays for ease of\n        // iteration in the functions that call this.\n        const uncachedRangePairs = [];\n        for (i = 0; i < uncachedRanges.length; i += 2) {\n            uncachedRangePairs.push([uncachedRanges[i], uncachedRanges[i + 1]]);\n        }\n\n        return uncachedRangePairs;\n    }\n\n    /**\n     * For testing\n     *\n     * @return {Number.<Array[]>} Array with arrays of numbers\n     */\n    getCacheRanges() {\n        const peakCacheRangePairs = [];\n        let i;\n        for (i = 0; i < this.peakCacheRanges.length; i += 2) {\n            peakCacheRangePairs.push([\n                this.peakCacheRanges[i],\n                this.peakCacheRanges[i + 1]\n            ]);\n        }\n        return peakCacheRangePairs;\n    }\n}\n","import Observer from './observer';\n\n/**\n * Perform an ajax request using `XMLHttpRequest`.\n *\n * @deprecated Use `util.fetchFile` instead.\n *\n * @param {Object} options AJAX options to use. See example below for options.\n * @returns {Observer} Observer instance\n * @example\n * // default options\n * let options = {\n *     method: 'GET',\n *     url: undefined,\n *     responseType: 'json',\n *     xhr: {}\n * };\n *\n * // override default options\n * options.url = '../media/demo.wav';\n * options.responseType = 'arraybuffer';\n * options.xhr = {\n *     requestHeaders: [\n *         {\n *             key: 'Authorization',\n *             value: 'my-token'\n *         }\n *     ],\n *     withCredentials: true\n * };\n *\n * // make ajax call\n * let ajaxCall = util.ajax(options);\n * ajaxCall.on('progress', e => {\n *     console.log('progress', e);\n * });\n * ajaxCall.on('success', (data, e) => {\n *     console.log('success!', data);\n * });\n * ajaxCall.on('error', e => {\n *     console.warn('ajax error: ' + e.target.statusText);\n * });\n */\nexport default function ajax(options) {\n    const instance = new Observer();\n    const xhr = new XMLHttpRequest();\n    let fired100 = false;\n    xhr.open(options.method || 'GET', options.url, true);\n    xhr.responseType = options.responseType || 'json';\n\n    if (options.xhr) {\n        if (options.xhr.requestHeaders) {\n            // add custom request headers\n            options.xhr.requestHeaders.forEach(header => {\n                xhr.setRequestHeader(header.key, header.value);\n            });\n        }\n        if (options.xhr.withCredentials) {\n            // use credentials\n            xhr.withCredentials = true;\n        }\n    }\n\n    xhr.addEventListener('progress', e => {\n        instance.fireEvent('progress', e);\n        if (e.lengthComputable && e.loaded == e.total) {\n            fired100 = true;\n        }\n    });\n    xhr.addEventListener('load', e => {\n        if (!fired100) {\n            instance.fireEvent('progress', e);\n        }\n        instance.fireEvent('load', e);\n        if (200 == xhr.status || 206 == xhr.status) {\n            instance.fireEvent('success', xhr.response, e);\n        } else {\n            instance.fireEvent('error', e);\n        }\n    });\n    xhr.addEventListener('error', e => instance.fireEvent('error', e));\n    xhr.send();\n    instance.xhr = xhr;\n    return instance;\n}\n","/**\n * Extend an object shallowly with others\n *\n * @param {Object} dest The target object\n * @param {Object[]} sources The objects to use for extending\n *\n * @return {Object} Merged object\n * @deprecated since version 3.3.0\n */\nexport default function extend(dest, ...sources) {\n    console.warn('util.extend is deprecated; use Object.assign instead');\n    sources.forEach(source => {\n        Object.keys(source).forEach(key => {\n            dest[key] = source[key];\n        });\n    });\n    return dest;\n}\n","/**\n * @since 3.0.0\n */\n\nimport Observer from './observer';\n\nclass ProgressHandler {\n    /**\n     * Instantiate ProgressHandler\n     *\n     * @param {Observer} instance The `fetchFile` observer instance.\n     * @param {Number} contentLength Content length.\n     * @param {Response} response Response object.\n     */\n    constructor(instance, contentLength, response) {\n        this.instance = instance;\n        this.instance._reader = response.body.getReader();\n\n        this.total = parseInt(contentLength, 10);\n        this.loaded = 0;\n    }\n\n    /**\n     * A method that is called once, immediately after the `ReadableStream``\n     * is constructed.\n     *\n     * @param {ReadableStreamDefaultController} controller Controller instance\n     *     used to control the stream.\n     */\n    start(controller) {\n        const read = () => {\n            // instance._reader.read() returns a promise that resolves\n            // when a value has been received\n            this.instance._reader\n                .read()\n                .then(({ done, value }) => {\n                    // result objects contain two properties:\n                    // done  - true if the stream has already given you all its data.\n                    // value - some data. Always undefined when done is true.\n                    if (done) {\n                        // ensure onProgress called when content-length=0\n                        if (this.total === 0) {\n                            this.instance.onProgress.call(this.instance, {\n                                loaded: this.loaded,\n                                total: this.total,\n                                lengthComputable: false\n                            });\n                        }\n                        // no more data needs to be consumed, close the stream\n                        controller.close();\n                        return;\n                    }\n\n                    this.loaded += value.byteLength;\n                    this.instance.onProgress.call(this.instance, {\n                        loaded: this.loaded,\n                        total: this.total,\n                        lengthComputable: !(this.total === 0)\n                    });\n                    // enqueue the next data chunk into our target stream\n                    controller.enqueue(value);\n                    read();\n                })\n                .catch(error => {\n                    controller.error(error);\n                });\n        };\n\n        read();\n    }\n}\n\n/**\n * Load a file using `fetch`.\n *\n * @param {object} options Request options to use. See example below.\n * @returns {Observer} Observer instance\n * @example\n * // default options\n * let options = {\n *     url: undefined,\n *     method: 'GET',\n *     mode: 'cors',\n *     credentials: 'same-origin',\n *     cache: 'default',\n *     responseType: 'json',\n *     requestHeaders: [],\n *     redirect: 'follow',\n *     referrer: 'client'\n * };\n *\n * // override some options\n * options.url = '../media/demo.wav';\n\n * // available types: 'arraybuffer', 'blob', 'json' or 'text'\n * options.responseType = 'arraybuffer';\n *\n * // make fetch call\n * let request = util.fetchFile(options);\n *\n * // listen for events\n * request.on('progress', e => {\n *     console.log('progress', e);\n * });\n *\n * request.on('success', data => {\n *     console.log('success!', data);\n * });\n *\n * request.on('error', e => {\n *     console.warn('fetchFile error: ', e);\n * });\n */\nexport default function fetchFile(options) {\n    if (!options) {\n        throw new Error('fetch options missing');\n    } else if (!options.url) {\n        throw new Error('fetch url missing');\n    }\n    const instance = new Observer();\n    const fetchHeaders = new Headers();\n    const fetchRequest = new Request(options.url);\n\n    // add ability to abort\n    instance.controller = new AbortController();\n\n    // check if headers have to be added\n    if (options && options.requestHeaders) {\n        // add custom request headers\n        options.requestHeaders.forEach(header => {\n            fetchHeaders.append(header.key, header.value);\n        });\n    }\n\n    // parse fetch options\n    const responseType = options.responseType || 'json';\n    const fetchOptions = {\n        method: options.method || 'GET',\n        headers: fetchHeaders,\n        mode: options.mode || 'cors',\n        credentials: options.credentials || 'same-origin',\n        cache: options.cache || 'default',\n        redirect: options.redirect || 'follow',\n        referrer: options.referrer || 'client',\n        signal: instance.controller.signal\n    };\n\n    fetch(fetchRequest, fetchOptions)\n        .then(response => {\n            // store response reference\n            instance.response = response;\n\n            let progressAvailable = true;\n            if (!response.body) {\n                // ReadableStream is not yet supported in this browser\n                // see https://developer.mozilla.org/en-US/docs/Web/API/ReadableStream\n                progressAvailable = false;\n            }\n\n            // Server must send CORS header \"Access-Control-Expose-Headers: content-length\"\n            const contentLength = response.headers.get('content-length');\n            if (contentLength === null) {\n                // Content-Length server response header missing.\n                // Don't evaluate download progress if we can't compare against a total size\n                // see https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS#Access-Control-Expose-Headers\n                progressAvailable = false;\n            }\n\n            if (!progressAvailable) {\n                // not able to check download progress so skip it\n                return response;\n            }\n\n            // fire progress event when during load\n            instance.onProgress = e => {\n                instance.fireEvent('progress', e);\n            };\n\n            return new Response(\n                new ReadableStream(\n                    new ProgressHandler(instance, contentLength, response)\n                ),\n                fetchOptions\n            );\n        })\n        .then(response => {\n            let errMsg;\n            if (response.ok) {\n                switch (responseType) {\n                    case 'arraybuffer':\n                        return response.arrayBuffer();\n\n                    case 'json':\n                        return response.json();\n\n                    case 'blob':\n                        return response.blob();\n\n                    case 'text':\n                        return response.text();\n\n                    default:\n                        errMsg = 'Unknown responseType: ' + responseType;\n                        break;\n                }\n            }\n            if (!errMsg) {\n                errMsg = 'HTTP error status: ' + response.status;\n            }\n            throw new Error(errMsg);\n        })\n        .then(response => {\n            instance.fireEvent('success', response);\n        })\n        .catch(error => {\n            instance.fireEvent('error', error);\n        });\n\n    // return the fetch request\n    instance.fetchRequest = fetchRequest;\n    return instance;\n}\n","import reqAnimationFrame from './request-animation-frame';\n\n/**\n * Create a function which will be called at the next requestAnimationFrame\n * cycle\n *\n * @param {function} func The function to call\n *\n * @return {func} The function wrapped within a requestAnimationFrame\n */\nexport default function frame(func) {\n    return (...args) => reqAnimationFrame(() => func(...args));\n}\n","/**\n * Get a random prefixed ID\n *\n * @param {String} prefix Prefix to use. Default is `'wavesurfer_'`.\n * @returns {String} Random prefixed ID\n * @example\n * console.log(getId()); // logs 'wavesurfer_b5pors4ru6g'\n *\n * let prefix = 'foo-';\n * console.log(getId(prefix)); // logs 'foo-b5pors4ru6g'\n */\nexport default function getId(prefix) {\n    if (prefix === undefined) {\n        prefix = 'wavesurfer_';\n    }\n    return (\n        prefix +\n        Math.random()\n            .toString(32)\n            .substring(2)\n    );\n}\n","export { default as ajax } from './ajax';\nexport { default as getId } from './get-id';\nexport { default as max } from './max';\nexport { default as min } from './min';\nexport { default as Observer } from './observer';\nexport { default as extend } from './extend';\nexport { default as style } from './style';\nexport { default as requestAnimationFrame } from './request-animation-frame';\nexport { default as frame } from './frame';\nexport { default as debounce } from 'debounce';\nexport { default as preventClick } from './prevent-click';\nexport { default as fetchFile } from './fetch';\n","/**\n * Get the largest value\n *\n * @param   {Array} values Array of numbers\n * @returns {Number} Largest number found\n * @example console.log(max([1, 2, 3])); // logs 3\n */\nexport default function max(values) {\n    let largest = -Infinity;\n    Object.keys(values).forEach(i => {\n        if (values[i] > largest) {\n            largest = values[i];\n        }\n    });\n    return largest;\n}\n","/**\n * Get the smallest value\n *\n * @param   {Array} values Array of numbers\n * @returns {Number} Smallest number found\n * @example console.log(min([1, 2, 3])); // logs 1\n */\nexport default function min(values) {\n    let smallest = Number(Infinity);\n    Object.keys(values).forEach(i => {\n        if (values[i] < smallest) {\n            smallest = values[i];\n        }\n    });\n    return smallest;\n}\n","/**\n * @typedef {Object} ListenerDescriptor\n * @property {string} name The name of the event\n * @property {function} callback The callback\n * @property {function} un The function to call to remove the listener\n */\n\n/**\n * Observer class\n */\nexport default class Observer {\n    /**\n     * Instantiate Observer\n     */\n    constructor() {\n        /**\n         * @private\n         * @todo Initialise the handlers here already and remove the conditional\n         * assignment in `on()`\n         */\n        this.handlers = null;\n    }\n    /**\n     * Attach a handler function for an event.\n     *\n     * @param {string} event Name of the event to listen to\n     * @param {function} fn The callback to trigger when the event is fired\n     * @return {ListenerDescriptor} The event descriptor\n     */\n    on(event, fn) {\n        if (!this.handlers) {\n            this.handlers = {};\n        }\n\n        let handlers = this.handlers[event];\n        if (!handlers) {\n            handlers = this.handlers[event] = [];\n        }\n        handlers.push(fn);\n\n        // Return an event descriptor\n        return {\n            name: event,\n            callback: fn,\n            un: (e, fn) => this.un(e, fn)\n        };\n    }\n\n    /**\n     * Remove an event handler.\n     *\n     * @param {string} event Name of the event the listener that should be\n     * removed listens to\n     * @param {function} fn The callback that should be removed\n     */\n    un(event, fn) {\n        if (!this.handlers) {\n            return;\n        }\n\n        const handlers = this.handlers[event];\n        let i;\n        if (handlers) {\n            if (fn) {\n                for (i = handlers.length - 1; i >= 0; i--) {\n                    if (handlers[i] == fn) {\n                        handlers.splice(i, 1);\n                    }\n                }\n            } else {\n                handlers.length = 0;\n            }\n        }\n    }\n\n    /**\n     * Remove all event handlers.\n     */\n    unAll() {\n        this.handlers = null;\n    }\n\n    /**\n     * Attach a handler to an event. The handler is executed at most once per\n     * event type.\n     *\n     * @param {string} event The event to listen to\n     * @param {function} handler The callback that is only to be called once\n     * @return {ListenerDescriptor} The event descriptor\n     */\n    once(event, handler) {\n        const fn = (...args) => {\n            /*  eslint-disable no-invalid-this */\n            handler.apply(this, args);\n            /*  eslint-enable no-invalid-this */\n            setTimeout(() => {\n                this.un(event, fn);\n            }, 0);\n        };\n        return this.on(event, fn);\n    }\n\n    /**\n     * Manually fire an event\n     *\n     * @param {string} event The event to fire manually\n     * @param {...any} args The arguments with which to call the listeners\n     */\n    fireEvent(event, ...args) {\n        if (!this.handlers) {\n            return;\n        }\n        const handlers = this.handlers[event];\n        handlers &&\n            handlers.forEach(fn => {\n                fn(...args);\n            });\n    }\n}\n","/**\n * Stops propagation of click event and removes event listener\n *\n * @private\n * @param {object} event The click event\n */\nfunction preventClickHandler(event) {\n    event.stopPropagation();\n    document.body.removeEventListener('click', preventClickHandler, true);\n}\n\n/**\n * Starts listening for click event and prevent propagation\n *\n * @param {object} values Values\n */\nexport default function preventClick(values) {\n    document.body.addEventListener('click', preventClickHandler, true);\n}\n","/* eslint-disable valid-jsdoc */\n/**\n * Returns the `requestAnimationFrame` function for the browser, or a shim with\n * `setTimeout` if the function is not found\n *\n * @return {function} Available `requestAnimationFrame` function for the browser\n */\nexport default (\n    window.requestAnimationFrame ||\n    window.webkitRequestAnimationFrame ||\n    window.mozRequestAnimationFrame ||\n    window.oRequestAnimationFrame ||\n    window.msRequestAnimationFrame ||\n    ((callback, element) => setTimeout(callback, 1000 / 60))\n).bind(window);\n","/**\n * Apply a map of styles to an element\n *\n * @param {HTMLElement} el The element that the styles will be applied to\n * @param {Object} styles The map of propName: attribute, both are used as-is\n *\n * @return {HTMLElement} el\n */\nexport default function style(el, styles) {\n    Object.keys(styles).forEach(prop => {\n        if (el.style[prop] !== styles[prop]) {\n            el.style[prop] = styles[prop];\n        }\n    });\n    return el;\n}\n","import * as util from './util';\nimport MultiCanvas from './drawer.multicanvas';\nimport WebAudio from './webaudio';\nimport MediaElement from './mediaelement';\nimport PeakCache from './peakcache';\nimport MediaElementWebAudio from './mediaelement-webaudio';\n\n/*\n * This work is licensed under a BSD-3-Clause License.\n */\n\n/** @external {HTMLElement} https://developer.mozilla.org/en/docs/Web/API/HTMLElement */\n/** @external {OfflineAudioContext} https://developer.mozilla.org/en-US/docs/Web/API/OfflineAudioContext */\n/** @external {File} https://developer.mozilla.org/en-US/docs/Web/API/File */\n/** @external {Blob} https://developer.mozilla.org/en-US/docs/Web/API/Blob */\n/** @external {CanvasRenderingContext2D} https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D */\n/** @external {MediaStreamConstraints} https://developer.mozilla.org/en-US/docs/Web/API/MediaStreamConstraints */\n/** @external {AudioNode} https://developer.mozilla.org/de/docs/Web/API/AudioNode */\n\n/**\n * @typedef {Object} WavesurferParams\n * @property {AudioContext} audioContext=null Use your own previously\n * initialized AudioContext or leave blank.\n * @property {number} audioRate=1 Speed at which to play audio. Lower number is\n * slower.\n * @property {ScriptProcessorNode} audioScriptProcessor=null Use your own previously\n * initialized ScriptProcessorNode or leave blank.\n * @property {boolean} autoCenter=true If a scrollbar is present, center the\n * waveform on current progress\n * @property {number} autoCenterRate=5 If autoCenter is active, rate at which the\n * waveform is centered\n * @property {boolean} autoCenterImmediately=false If autoCenter is active, immediately\n * center waveform on current progress\n * @property {string} backend='WebAudio' `'WebAudio'|'MediaElement'|'MediaElementWebAudio'` In most cases\n * you don't have to set this manually. MediaElement is a fallback for unsupported browsers.\n * MediaElementWebAudio allows to use WebAudio API also with big audio files, loading audio like with\n * MediaElement backend (HTML5 audio tag). You have to use the same methods of MediaElement backend for loading and\n * playback, giving also peaks, so the audio data are not decoded. In this way you can use WebAudio features, like filters,\n * also with audio with big duration. For example:\n * ` wavesurfer.load(url | HTMLMediaElement, peaks, preload, duration);\n *   wavesurfer.play();\n *   wavesurfer.setFilter(customFilter);\n * `\n * @property {string} backgroundColor=null Change background color of the\n * waveform container.\n * @property {number} barHeight=1 The height of the wave bars.\n * @property {number} barRadius=0 The radius of the wave bars. Makes bars rounded\n * @property {number} barGap=null The optional spacing between bars of the wave,\n * if not provided will be calculated in legacy format.\n * @property {number} barWidth=null Draw the waveform using bars.\n * @property {number} barMinHeight=null If specified, draw at least a bar of this height,\n * eliminating waveform gaps\n * @property {boolean} closeAudioContext=false Close and nullify all audio\n * contexts when the destroy method is called.\n * @property {!string|HTMLElement} container CSS selector or HTML element where\n * the waveform should be drawn. This is the only required parameter.\n * @property {string} cursorColor='#333' The fill color of the cursor indicating\n * the playhead position.\n * @property {number} cursorWidth=1 Measured in pixels.\n * @property {object} drawingContextAttributes={desynchronized: true} Drawing context\n * attributes.\n * @property {number} duration=null Optional audio length so pre-rendered peaks\n * can be display immediately for example.\n * @property {boolean} fillParent=true Whether to fill the entire container or\n * draw only according to `minPxPerSec`.\n * @property {boolean} forceDecode=false Force decoding of audio using web audio\n * when zooming to get a more detailed waveform.\n * @property {number} height=128 The height of the waveform. Measured in\n * pixels.\n * @property {boolean} hideScrollbar=false Whether to hide the horizontal\n * scrollbar when one would normally be shown.\n * @property {boolean} interact=true Whether the mouse interaction will be\n * enabled at initialization. You can switch this parameter at any time later\n * on.\n * @property {boolean} loopSelection=true (Use with regions plugin) Enable\n * looping of selected regions\n * @property {number} maxCanvasWidth=4000 Maximum width of a single canvas in\n * pixels, excluding a small overlap (2 * `pixelRatio`, rounded up to the next\n * even integer). If the waveform is longer than this value, additional canvases\n * will be used to render the waveform, which is useful for very large waveforms\n * that may be too wide for browsers to draw on a single canvas.\n * @property {boolean} mediaControls=false (Use with backend `MediaElement` or `MediaElementWebAudio`)\n * this enables the native controls for the media element\n * @property {string} mediaType='audio' (Use with backend `MediaElement` or `MediaElementWebAudio`)\n * `'audio'|'video'` ('video' only for `MediaElement`)\n * @property {number} minPxPerSec=20 Minimum number of pixels per second of\n * audio.\n * @property {boolean} normalize=false If true, normalize by the maximum peak\n * instead of 1.0.\n * @property {boolean} partialRender=false Use the PeakCache to improve\n * rendering speed of large waveforms\n * @property {number} pixelRatio=window.devicePixelRatio The pixel ratio used to\n * calculate display\n * @property {PluginDefinition[]} plugins=[] An array of plugin definitions to\n * register during instantiation, they will be directly initialised unless they\n * are added with the `deferInit` property set to true.\n * @property {string} progressColor='#555' The fill color of the part of the\n * waveform behind the cursor. When `progressColor` and `waveColor` are the same\n * the progress wave is not rendered at all.\n * @property {boolean} removeMediaElementOnDestroy=true Set to false to keep the\n * media element in the DOM when the player is destroyed. This is useful when\n * reusing an existing media element via the `loadMediaElement` method.\n * @property {Object} renderer=MultiCanvas Can be used to inject a custom\n * renderer.\n * @property {boolean|number} responsive=false If set to `true` resize the\n * waveform, when the window is resized. This is debounced with a `100ms`\n * timeout by default. If this parameter is a number it represents that timeout.\n * @property {boolean} rtl=false If set to `true`, renders waveform from\n * right-to-left.\n * @property {boolean} scrollParent=false Whether to scroll the container with a\n * lengthy waveform. Otherwise the waveform is shrunk to the container width\n * (see fillParent).\n * @property {number} skipLength=2 Number of seconds to skip with the\n * skipForward() and skipBackward() methods.\n * @property {boolean} splitChannels=false Render with separate waveforms for\n * the channels of the audio\n * @property {string} waveColor='#999' The fill color of the waveform after the\n * cursor.\n * @property {object} xhr={} XHR options. For example:\n * `let xhr = {\n *     cache: 'default',\n *     mode: 'cors',\n *     method: 'GET',\n *     credentials: 'same-origin',\n *     redirect: 'follow',\n *     referrer: 'client',\n *     headers: [\n *         {\n *             key: 'Authorization',\n *             value: 'my-token'\n *         }\n *     ]\n * };`\n */\n\n/**\n * @typedef {Object} PluginDefinition\n * @desc The Object used to describe a plugin\n * @example wavesurfer.addPlugin(pluginDefinition);\n * @property {string} name The name of the plugin, the plugin instance will be\n * added as a property to the wavesurfer instance under this name\n * @property {?Object} staticProps The properties that should be added to the\n * wavesurfer instance as static properties\n * @property {?boolean} deferInit Don't initialise plugin\n * automatically\n * @property {Object} params={} The plugin parameters, they are the first parameter\n * passed to the plugin class constructor function\n * @property {PluginClass} instance The plugin instance factory, is called with\n * the dependency specified in extends. Returns the plugin class.\n */\n\n/**\n * @interface PluginClass\n *\n * @desc This is the interface which is implemented by all plugin classes. Note\n * that this only turns into an observer after being passed through\n * `wavesurfer.addPlugin`.\n *\n * @extends {Observer}\n */\nclass PluginClass {\n    /**\n     * Plugin definition factory\n     *\n     * This function must be used to create a plugin definition which can be\n     * used by wavesurfer to correctly instantiate the plugin.\n     *\n     * It returns a `PluginDefinition` object representing the plugin.\n     *\n     * @param {Object} params={} The plugin params (specific to the plugin)\n     */\n    create(params) {}\n    /**\n     * Construct the plugin\n     *\n     * @param {Object} params={} The plugin params (specific to the plugin)\n     * @param {Object} ws The wavesurfer instance\n     */\n    constructor(params, ws) {}\n    /**\n     * Initialise the plugin\n     *\n     * Start doing something. This is called by\n     * `wavesurfer.initPlugin(pluginName)`\n     */\n    init() {}\n    /**\n     * Destroy the plugin instance\n     *\n     * Stop doing something. This is called by\n     * `wavesurfer.destroyPlugin(pluginName)`\n     */\n    destroy() {}\n}\n\n/**\n * WaveSurfer core library class\n *\n * @extends {Observer}\n * @example\n * const params = {\n *   container: '#waveform',\n *   waveColor: 'violet',\n *   progressColor: 'purple'\n * };\n *\n * // initialise like this\n * const wavesurfer = WaveSurfer.create(params);\n *\n * // or like this ...\n * const wavesurfer = new WaveSurfer(params);\n * wavesurfer.init();\n *\n * // load audio file\n * wavesurfer.load('example/media/demo.wav');\n */\nexport default class WaveSurfer extends util.Observer {\n    /** @private */\n    defaultParams = {\n        audioContext: null,\n        audioScriptProcessor: null,\n        audioRate: 1,\n        autoCenter: true,\n        autoCenterRate: 5,\n        autoCenterImmediately: false,\n        backend: 'WebAudio',\n        backgroundColor: null,\n        barHeight: 1,\n        barRadius: 0,\n        barGap: null,\n        barMinHeight: null,\n        container: null,\n        cursorColor: '#333',\n        cursorWidth: 1,\n        dragSelection: true,\n        drawingContextAttributes: {\n            // Boolean that hints the user agent to reduce the latency\n            // by desynchronizing the canvas paint cycle from the event\n            // loop\n            desynchronized: true\n        },\n        duration: null,\n        fillParent: true,\n        forceDecode: false,\n        height: 128,\n        hideScrollbar: false,\n        interact: true,\n        loopSelection: true,\n        maxCanvasWidth: 4000,\n        mediaContainer: null,\n        mediaControls: false,\n        mediaType: 'audio',\n        minPxPerSec: 20,\n        normalize: false,\n        partialRender: false,\n        pixelRatio:\n            window.devicePixelRatio || screen.deviceXDPI / screen.logicalXDPI,\n        plugins: [],\n        progressColor: '#555',\n        removeMediaElementOnDestroy: true,\n        renderer: MultiCanvas,\n        responsive: false,\n        rtl: false,\n        scrollParent: false,\n        skipLength: 2,\n        splitChannels: false,\n        waveColor: '#999',\n        xhr: {}\n    };\n\n    /** @private */\n    backends = {\n        MediaElement,\n        WebAudio,\n        MediaElementWebAudio\n    };\n\n    /**\n     * Instantiate this class, call its `init` function and returns it\n     *\n     * @param {WavesurferParams} params The wavesurfer parameters\n     * @return {Object} WaveSurfer instance\n     * @example const wavesurfer = WaveSurfer.create(params);\n     */\n    static create(params) {\n        const wavesurfer = new WaveSurfer(params);\n        return wavesurfer.init();\n    }\n\n    /**\n     * The library version number is available as a static property of the\n     * WaveSurfer class\n     *\n     * @type {String}\n     * @example\n     * console.log('Using wavesurfer.js ' + WaveSurfer.VERSION);\n     */\n    static VERSION = __VERSION__;\n\n    /**\n     * Functions in the `util` property are available as a prototype property to\n     * all instances\n     *\n     * @type {Object}\n     * @example\n     * const wavesurfer = WaveSurfer.create(params);\n     * wavesurfer.util.style(myElement, { background: 'blue' });\n     */\n    util = util;\n\n    /**\n     * Functions in the `util` property are available as a static property of the\n     * WaveSurfer class\n     *\n     * @type {Object}\n     * @example\n     * WaveSurfer.util.style(myElement, { background: 'blue' });\n     */\n    static util = util;\n\n    /**\n     * Initialise wavesurfer instance\n     *\n     * @param {WavesurferParams} params Instantiation options for wavesurfer\n     * @example\n     * const wavesurfer = new WaveSurfer(params);\n     * @returns {this} Wavesurfer instance\n     */\n    constructor(params) {\n        super();\n        /**\n         * Extract relevant parameters (or defaults)\n         * @private\n         */\n        this.params = Object.assign({}, this.defaultParams, params);\n\n        /** @private */\n        this.container =\n            'string' == typeof params.container\n                ? document.querySelector(this.params.container)\n                : this.params.container;\n\n        if (!this.container) {\n            throw new Error('Container element not found');\n        }\n\n        if (this.params.mediaContainer == null) {\n            /** @private */\n            this.mediaContainer = this.container;\n        } else if (typeof this.params.mediaContainer == 'string') {\n            /** @private */\n            this.mediaContainer = document.querySelector(\n                this.params.mediaContainer\n            );\n        } else {\n            /** @private */\n            this.mediaContainer = this.params.mediaContainer;\n        }\n\n        if (!this.mediaContainer) {\n            throw new Error('Media Container element not found');\n        }\n\n        if (this.params.maxCanvasWidth <= 1) {\n            throw new Error('maxCanvasWidth must be greater than 1');\n        } else if (this.params.maxCanvasWidth % 2 == 1) {\n            throw new Error('maxCanvasWidth must be an even number');\n        }\n\n        if (this.params.rtl === true) {\n            util.style(this.container, { transform: 'rotateY(180deg)' });\n        }\n\n        if (this.params.backgroundColor) {\n            this.setBackgroundColor(this.params.backgroundColor);\n        }\n\n        /**\n         * @private Used to save the current volume when muting so we can\n         * restore once unmuted\n         * @type {number}\n         */\n        this.savedVolume = 0;\n\n        /**\n         * @private The current muted state\n         * @type {boolean}\n         */\n        this.isMuted = false;\n\n        /**\n         * @private Will hold a list of event descriptors that need to be\n         * canceled on subsequent loads of audio\n         * @type {Object[]}\n         */\n        this.tmpEvents = [];\n\n        /**\n         * @private Holds any running audio downloads\n         * @type {Observer}\n         */\n        this.currentRequest = null;\n        /** @private */\n        this.arraybuffer = null;\n        /** @private */\n        this.drawer = null;\n        /** @private */\n        this.backend = null;\n        /** @private */\n        this.peakCache = null;\n\n        // cache constructor objects\n        if (typeof this.params.renderer !== 'function') {\n            throw new Error('Renderer parameter is invalid');\n        }\n        /**\n         * @private The uninitialised Drawer class\n         */\n        this.Drawer = this.params.renderer;\n        /**\n         * @private The uninitialised Backend class\n         */\n        // Back compat\n        if (this.params.backend == 'AudioElement') {\n            this.params.backend = 'MediaElement';\n        }\n\n        if (\n            (this.params.backend == 'WebAudio' ||\n                this.params.backend === 'MediaElementWebAudio') &&\n            !WebAudio.prototype.supportsWebAudio.call(null)\n        ) {\n            this.params.backend = 'MediaElement';\n        }\n        this.Backend = this.backends[this.params.backend];\n\n        /**\n         * @private map of plugin names that are currently initialised\n         */\n        this.initialisedPluginList = {};\n        /** @private */\n        this.isDestroyed = false;\n\n        /**\n         * Get the current ready status.\n         *\n         * @example const isReady = wavesurfer.isReady;\n         * @return {boolean}\n         */\n        this.isReady = false;\n\n        // responsive debounced event listener. If this.params.responsive is not\n        // set, this is never called. Use 100ms or this.params.responsive as\n        // timeout for the debounce function.\n        let prevWidth = 0;\n        this._onResize = util.debounce(\n            () => {\n                if (\n                    prevWidth != this.drawer.wrapper.clientWidth &&\n                    !this.params.scrollParent\n                ) {\n                    prevWidth = this.drawer.wrapper.clientWidth;\n                    this.drawer.fireEvent('redraw');\n                }\n            },\n            typeof this.params.responsive === 'number'\n                ? this.params.responsive\n                : 100\n        );\n\n        return this;\n    }\n\n    /**\n     * Initialise the wave\n     *\n     * @example\n     * var wavesurfer = new WaveSurfer(params);\n     * wavesurfer.init();\n     * @return {this} The wavesurfer instance\n     */\n    init() {\n        this.registerPlugins(this.params.plugins);\n        this.createDrawer();\n        this.createBackend();\n        this.createPeakCache();\n        return this;\n    }\n\n    /**\n     * Add and initialise array of plugins (if `plugin.deferInit` is falsey),\n     * this function is called in the init function of wavesurfer\n     *\n     * @param {PluginDefinition[]} plugins An array of plugin definitions\n     * @emits {WaveSurfer#plugins-registered} Called with the array of plugin definitions\n     * @return {this} The wavesurfer instance\n     */\n    registerPlugins(plugins) {\n        // first instantiate all the plugins\n        plugins.forEach(plugin => this.addPlugin(plugin));\n\n        // now run the init functions\n        plugins.forEach(plugin => {\n            // call init function of the plugin if deferInit is falsey\n            // in that case you would manually use initPlugins()\n            if (!plugin.deferInit) {\n                this.initPlugin(plugin.name);\n            }\n        });\n        this.fireEvent('plugins-registered', plugins);\n        return this;\n    }\n\n    /**\n     * Get a map of plugin names that are currently initialised\n     *\n     * @example wavesurfer.getPlugins();\n     * @return {Object} Object with plugin names\n     */\n    getActivePlugins() {\n        return this.initialisedPluginList;\n    }\n\n    /**\n     * Add a plugin object to wavesurfer\n     *\n     * @param {PluginDefinition} plugin A plugin definition\n     * @emits {WaveSurfer#plugin-added} Called with the name of the plugin that was added\n     * @example wavesurfer.addPlugin(WaveSurfer.minimap());\n     * @return {this} The wavesurfer instance\n     */\n    addPlugin(plugin) {\n        if (!plugin.name) {\n            throw new Error('Plugin does not have a name!');\n        }\n        if (!plugin.instance) {\n            throw new Error(\n                `Plugin ${plugin.name} does not have an instance property!`\n            );\n        }\n\n        // staticProps properties are applied to wavesurfer instance\n        if (plugin.staticProps) {\n            Object.keys(plugin.staticProps).forEach(pluginStaticProp => {\n                /**\n                 * Properties defined in a plugin definition's `staticProps` property are added as\n                 * staticProps properties of the WaveSurfer instance\n                 */\n                this[pluginStaticProp] = plugin.staticProps[pluginStaticProp];\n            });\n        }\n\n        const Instance = plugin.instance;\n\n        // turn the plugin instance into an observer\n        const observerPrototypeKeys = Object.getOwnPropertyNames(\n            util.Observer.prototype\n        );\n        observerPrototypeKeys.forEach(key => {\n            Instance.prototype[key] = util.Observer.prototype[key];\n        });\n\n        /**\n         * Instantiated plugin classes are added as a property of the wavesurfer\n         * instance\n         * @type {Object}\n         */\n        this[plugin.name] = new Instance(plugin.params || {}, this);\n        this.fireEvent('plugin-added', plugin.name);\n        return this;\n    }\n\n    /**\n     * Initialise a plugin\n     *\n     * @param {string} name A plugin name\n     * @emits WaveSurfer#plugin-initialised\n     * @example wavesurfer.initPlugin('minimap');\n     * @return {this} The wavesurfer instance\n     */\n    initPlugin(name) {\n        if (!this[name]) {\n            throw new Error(`Plugin ${name} has not been added yet!`);\n        }\n        if (this.initialisedPluginList[name]) {\n            // destroy any already initialised plugins\n            this.destroyPlugin(name);\n        }\n        this[name].init();\n        this.initialisedPluginList[name] = true;\n        this.fireEvent('plugin-initialised', name);\n        return this;\n    }\n\n    /**\n     * Destroy a plugin\n     *\n     * @param {string} name A plugin name\n     * @emits WaveSurfer#plugin-destroyed\n     * @example wavesurfer.destroyPlugin('minimap');\n     * @returns {this} The wavesurfer instance\n     */\n    destroyPlugin(name) {\n        if (!this[name]) {\n            throw new Error(\n                `Plugin ${name} has not been added yet and cannot be destroyed!`\n            );\n        }\n        if (!this.initialisedPluginList[name]) {\n            throw new Error(\n                `Plugin ${name} is not active and cannot be destroyed!`\n            );\n        }\n        if (typeof this[name].destroy !== 'function') {\n            throw new Error(`Plugin ${name} does not have a destroy function!`);\n        }\n\n        this[name].destroy();\n        delete this.initialisedPluginList[name];\n        this.fireEvent('plugin-destroyed', name);\n        return this;\n    }\n\n    /**\n     * Destroy all initialised plugins. Convenience function to use when\n     * wavesurfer is removed\n     *\n     * @private\n     */\n    destroyAllPlugins() {\n        Object.keys(this.initialisedPluginList).forEach(name =>\n            this.destroyPlugin(name)\n        );\n    }\n\n    /**\n     * Create the drawer and draw the waveform\n     *\n     * @private\n     * @emits WaveSurfer#drawer-created\n     */\n    createDrawer() {\n        this.drawer = new this.Drawer(this.container, this.params);\n        this.drawer.init();\n        this.fireEvent('drawer-created', this.drawer);\n\n        if (this.params.responsive !== false) {\n            window.addEventListener('resize', this._onResize, true);\n            window.addEventListener('orientationchange', this._onResize, true);\n        }\n\n        this.drawer.on('redraw', () => {\n            this.drawBuffer();\n            this.drawer.progress(this.backend.getPlayedPercents());\n        });\n\n        // Click-to-seek\n        this.drawer.on('click', (e, progress) => {\n            setTimeout(() => this.seekTo(progress), 0);\n        });\n\n        // Relay the scroll event from the drawer\n        this.drawer.on('scroll', e => {\n            if (this.params.partialRender) {\n                this.drawBuffer();\n            }\n            this.fireEvent('scroll', e);\n        });\n    }\n\n    /**\n     * Create the backend\n     *\n     * @private\n     * @emits WaveSurfer#backend-created\n     */\n    createBackend() {\n        if (this.backend) {\n            this.backend.destroy();\n        }\n\n        this.backend = new this.Backend(this.params);\n        this.backend.init();\n        this.fireEvent('backend-created', this.backend);\n\n        this.backend.on('finish', () => {\n            this.drawer.progress(this.backend.getPlayedPercents());\n            this.fireEvent('finish');\n        });\n        this.backend.on('play', () => this.fireEvent('play'));\n        this.backend.on('pause', () => this.fireEvent('pause'));\n\n        this.backend.on('audioprocess', time => {\n            this.drawer.progress(this.backend.getPlayedPercents());\n            this.fireEvent('audioprocess', time);\n        });\n\n        // only needed for MediaElement and MediaElementWebAudio backend\n        if (\n            this.params.backend === 'MediaElement' ||\n            this.params.backend === 'MediaElementWebAudio'\n        ) {\n            this.backend.on('seek', () => {\n                this.drawer.progress(this.backend.getPlayedPercents());\n            });\n\n            this.backend.on('volume', () => {\n                let newVolume = this.getVolume();\n                this.fireEvent('volume', newVolume);\n\n                if (this.backend.isMuted !== this.isMuted) {\n                    this.isMuted = this.backend.isMuted;\n                    this.fireEvent('mute', this.isMuted);\n                }\n            });\n        }\n    }\n\n    /**\n     * Create the peak cache\n     *\n     * @private\n     */\n    createPeakCache() {\n        if (this.params.partialRender) {\n            this.peakCache = new PeakCache();\n        }\n    }\n\n    /**\n     * Get the duration of the audio clip\n     *\n     * @example const duration = wavesurfer.getDuration();\n     * @return {number} Duration in seconds\n     */\n    getDuration() {\n        return this.backend.getDuration();\n    }\n\n    /**\n     * Get the current playback position\n     *\n     * @example const currentTime = wavesurfer.getCurrentTime();\n     * @return {number} Playback position in seconds\n     */\n    getCurrentTime() {\n        return this.backend.getCurrentTime();\n    }\n\n    /**\n     * Set the current play time in seconds.\n     *\n     * @param {number} seconds A positive number in seconds. E.g. 10 means 10\n     * seconds, 60 means 1 minute\n     */\n    setCurrentTime(seconds) {\n        if (seconds >= this.getDuration()) {\n            this.seekTo(1);\n        } else {\n            this.seekTo(seconds / this.getDuration());\n        }\n    }\n\n    /**\n     * Starts playback from the current position. Optional start and end\n     * measured in seconds can be used to set the range of audio to play.\n     *\n     * @param {?number} start Position to start at\n     * @param {?number} end Position to end at\n     * @emits WaveSurfer#interaction\n     * @return {Promise} Result of the backend play method\n     * @example\n     * // play from second 1 to 5\n     * wavesurfer.play(1, 5);\n     */\n    play(start, end) {\n        this.fireEvent('interaction', () => this.play(start, end));\n        return this.backend.play(start, end);\n    }\n\n    /**\n     * Set a point in seconds for playback to stop at.\n     *\n     * @param {number} position Position (in seconds) to stop at\n     * @version 3.3.0\n     */\n    setPlayEnd(position) {\n        this.backend.setPlayEnd(position);\n    }\n\n    /**\n     * Stops and pauses playback\n     *\n     * @example wavesurfer.pause();\n     * @return {Promise} Result of the backend pause method\n     */\n    pause() {\n        if (!this.backend.isPaused()) {\n            return this.backend.pause();\n        }\n    }\n\n    /**\n     * Toggle playback\n     *\n     * @example wavesurfer.playPause();\n     * @return {Promise} Result of the backend play or pause method\n     */\n    playPause() {\n        return this.backend.isPaused() ? this.play() : this.pause();\n    }\n\n    /**\n     * Get the current playback state\n     *\n     * @example const isPlaying = wavesurfer.isPlaying();\n     * @return {boolean} False if paused, true if playing\n     */\n    isPlaying() {\n        return !this.backend.isPaused();\n    }\n\n    /**\n     * Skip backward\n     *\n     * @param {?number} seconds Amount to skip back, if not specified `skipLength`\n     * is used\n     * @example wavesurfer.skipBackward();\n     */\n    skipBackward(seconds) {\n        this.skip(-seconds || -this.params.skipLength);\n    }\n\n    /**\n     * Skip forward\n     *\n     * @param {?number} seconds Amount to skip back, if not specified `skipLength`\n     * is used\n     * @example wavesurfer.skipForward();\n     */\n    skipForward(seconds) {\n        this.skip(seconds || this.params.skipLength);\n    }\n\n    /**\n     * Skip a number of seconds from the current position (use a negative value\n     * to go backwards).\n     *\n     * @param {number} offset Amount to skip back or forwards\n     * @example\n     * // go back 2 seconds\n     * wavesurfer.skip(-2);\n     */\n    skip(offset) {\n        const duration = this.getDuration() || 1;\n        let position = this.getCurrentTime() || 0;\n        position = Math.max(0, Math.min(duration, position + (offset || 0)));\n        this.seekAndCenter(position / duration);\n    }\n\n    /**\n     * Seeks to a position and centers the view\n     *\n     * @param {number} progress Between 0 (=beginning) and 1 (=end)\n     * @example\n     * // seek and go to the middle of the audio\n     * wavesurfer.seekTo(0.5);\n     */\n    seekAndCenter(progress) {\n        this.seekTo(progress);\n        this.drawer.recenter(progress);\n    }\n\n    /**\n     * Seeks to a position\n     *\n     * @param {number} progress Between 0 (=beginning) and 1 (=end)\n     * @emits WaveSurfer#interaction\n     * @emits WaveSurfer#seek\n     * @example\n     * // seek to the middle of the audio\n     * wavesurfer.seekTo(0.5);\n     */\n    seekTo(progress) {\n        // return an error if progress is not a number between 0 and 1\n        if (\n            typeof progress !== 'number' ||\n            !isFinite(progress) ||\n            progress < 0 ||\n            progress > 1\n        ) {\n            throw new Error(\n                'Error calling wavesurfer.seekTo, parameter must be a number between 0 and 1!'\n            );\n        }\n        this.fireEvent('interaction', () => this.seekTo(progress));\n\n        const paused = this.backend.isPaused();\n        // avoid draw wrong position while playing backward seeking\n        if (!paused) {\n            this.backend.pause();\n        }\n        // avoid small scrolls while paused seeking\n        const oldScrollParent = this.params.scrollParent;\n        this.params.scrollParent = false;\n        this.backend.seekTo(progress * this.getDuration());\n        this.drawer.progress(progress);\n\n        if (!paused) {\n            this.backend.play();\n        }\n        this.params.scrollParent = oldScrollParent;\n        this.fireEvent('seek', progress);\n    }\n\n    /**\n     * Stops and goes to the beginning.\n     *\n     * @example wavesurfer.stop();\n     */\n    stop() {\n        this.pause();\n        this.seekTo(0);\n        this.drawer.progress(0);\n    }\n\n    /**\n     * Sets the ID of the audio device to use for output and returns a Promise.\n     *\n     * @param {string} deviceId String value representing underlying output\n     * device\n     * @returns {Promise} `Promise` that resolves to `undefined` when there are\n     * no errors detected.\n     */\n    setSinkId(deviceId) {\n        return this.backend.setSinkId(deviceId);\n    }\n\n    /**\n     * Set the playback volume.\n     *\n     * @param {number} newVolume A value between 0 and 1, 0 being no\n     * volume and 1 being full volume.\n     * @emits WaveSurfer#volume\n     */\n    setVolume(newVolume) {\n        this.backend.setVolume(newVolume);\n        this.fireEvent('volume', newVolume);\n    }\n\n    /**\n     * Get the playback volume.\n     *\n     * @return {number} A value between 0 and 1, 0 being no\n     * volume and 1 being full volume.\n     */\n    getVolume() {\n        return this.backend.getVolume();\n    }\n\n    /**\n     * Set the playback rate.\n     *\n     * @param {number} rate A positive number. E.g. 0.5 means half the normal\n     * speed, 2 means double speed and so on.\n     * @example wavesurfer.setPlaybackRate(2);\n     */\n    setPlaybackRate(rate) {\n        this.backend.setPlaybackRate(rate);\n    }\n\n    /**\n     * Get the playback rate.\n     *\n     * @return {number} The current playback rate.\n     */\n    getPlaybackRate() {\n        return this.backend.getPlaybackRate();\n    }\n\n    /**\n     * Toggle the volume on and off. If not currently muted it will save the\n     * current volume value and turn the volume off. If currently muted then it\n     * will restore the volume to the saved value, and then rest the saved\n     * value.\n     *\n     * @example wavesurfer.toggleMute();\n     */\n    toggleMute() {\n        this.setMute(!this.isMuted);\n    }\n\n    /**\n     * Enable or disable muted audio\n     *\n     * @param {boolean} mute Specify `true` to mute audio.\n     * @emits WaveSurfer#volume\n     * @emits WaveSurfer#mute\n     * @example\n     * // unmute\n     * wavesurfer.setMute(false);\n     * console.log(wavesurfer.getMute()) // logs false\n     */\n    setMute(mute) {\n        // ignore all muting requests if the audio is already in that state\n        if (mute === this.isMuted) {\n            this.fireEvent('mute', this.isMuted);\n            return;\n        }\n\n        if (mute) {\n            // If currently not muted then save current volume,\n            // turn off the volume and update the mute properties\n            this.savedVolume = this.backend.getVolume();\n            this.backend.setVolume(0);\n            this.isMuted = true;\n            this.fireEvent('volume', 0);\n        } else {\n            // If currently muted then restore to the saved volume\n            // and update the mute properties\n            this.backend.setVolume(this.savedVolume);\n            this.isMuted = false;\n            this.fireEvent('volume', this.savedVolume);\n        }\n        this.fireEvent('mute', this.isMuted);\n    }\n\n    /**\n     * Get the current mute status.\n     *\n     * @example const isMuted = wavesurfer.getMute();\n     * @return {boolean} Current mute status\n     */\n    getMute() {\n        return this.isMuted;\n    }\n\n    /**\n     * Get the list of current set filters as an array.\n     *\n     * Filters must be set with setFilters method first\n     *\n     * @return {array} List of enabled filters\n     */\n    getFilters() {\n        return this.backend.filters || [];\n    }\n\n    /**\n     * Toggles `scrollParent` and redraws\n     *\n     * @example wavesurfer.toggleScroll();\n     */\n    toggleScroll() {\n        this.params.scrollParent = !this.params.scrollParent;\n        this.drawBuffer();\n    }\n\n    /**\n     * Toggle mouse interaction\n     *\n     * @example wavesurfer.toggleInteraction();\n     */\n    toggleInteraction() {\n        this.params.interact = !this.params.interact;\n    }\n\n    /**\n     * Get the fill color of the waveform after the cursor.\n     *\n     * @return {string} A CSS color string.\n     */\n    getWaveColor() {\n        return this.params.waveColor;\n    }\n\n    /**\n     * Set the fill color of the waveform after the cursor.\n     *\n     * @param {string} color A CSS color string.\n     * @example wavesurfer.setWaveColor('#ddd');\n     */\n    setWaveColor(color) {\n        this.params.waveColor = color;\n        this.drawBuffer();\n    }\n\n    /**\n     * Get the fill color of the waveform behind the cursor.\n     *\n     * @return {string} A CSS color string.\n     */\n    getProgressColor() {\n        return this.params.progressColor;\n    }\n\n    /**\n     * Set the fill color of the waveform behind the cursor.\n     *\n     * @param {string} color A CSS color string.\n     * @example wavesurfer.setProgressColor('#400');\n     */\n    setProgressColor(color) {\n        this.params.progressColor = color;\n        this.drawBuffer();\n    }\n\n    /**\n     * Get the background color of the waveform container.\n     *\n     * @return {string} A CSS color string.\n     */\n    getBackgroundColor() {\n        return this.params.backgroundColor;\n    }\n\n    /**\n     * Set the background color of the waveform container.\n     *\n     * @param {string} color A CSS color string.\n     * @example wavesurfer.setBackgroundColor('#FF00FF');\n     */\n    setBackgroundColor(color) {\n        this.params.backgroundColor = color;\n        util.style(this.container, { background: this.params.backgroundColor });\n    }\n\n    /**\n     * Get the fill color of the cursor indicating the playhead\n     * position.\n     *\n     * @return {string} A CSS color string.\n     */\n    getCursorColor() {\n        return this.params.cursorColor;\n    }\n\n    /**\n     * Set the fill color of the cursor indicating the playhead\n     * position.\n     *\n     * @param {string} color A CSS color string.\n     * @example wavesurfer.setCursorColor('#222');\n     */\n    setCursorColor(color) {\n        this.params.cursorColor = color;\n        this.drawer.updateCursor();\n    }\n\n    /**\n     * Get the height of the waveform.\n     *\n     * @return {number} Height measured in pixels.\n     */\n    getHeight() {\n        return this.params.height;\n    }\n\n    /**\n     * Set the height of the waveform.\n     *\n     * @param {number} height Height measured in pixels.\n     * @example wavesurfer.setHeight(200);\n     */\n    setHeight(height) {\n        this.params.height = height;\n        this.drawer.setHeight(height * this.params.pixelRatio);\n        this.drawBuffer();\n    }\n\n    /**\n     * Get the correct peaks for current wave view-port and render wave\n     *\n     * @private\n     * @emits WaveSurfer#redraw\n     */\n    drawBuffer() {\n        const nominalWidth = Math.round(\n            this.getDuration() *\n                this.params.minPxPerSec *\n                this.params.pixelRatio\n        );\n        const parentWidth = this.drawer.getWidth();\n        let width = nominalWidth;\n        // always start at 0 after zooming for scrolling : issue redraw left part\n        let start = 0;\n        let end = Math.max(start + parentWidth, width);\n        // Fill container\n        if (\n            this.params.fillParent &&\n            (!this.params.scrollParent || nominalWidth < parentWidth)\n        ) {\n            width = parentWidth;\n            start = 0;\n            end = width;\n        }\n\n        let peaks;\n        if (this.params.partialRender) {\n            const newRanges = this.peakCache.addRangeToPeakCache(\n                width,\n                start,\n                end\n            );\n            let i;\n            for (i = 0; i < newRanges.length; i++) {\n                peaks = this.backend.getPeaks(\n                    width,\n                    newRanges[i][0],\n                    newRanges[i][1]\n                );\n                this.drawer.drawPeaks(\n                    peaks,\n                    width,\n                    newRanges[i][0],\n                    newRanges[i][1]\n                );\n            }\n        } else {\n            peaks = this.backend.getPeaks(width, start, end);\n            this.drawer.drawPeaks(peaks, width, start, end);\n        }\n        this.fireEvent('redraw', peaks, width);\n    }\n\n    /**\n     * Horizontally zooms the waveform in and out. It also changes the parameter\n     * `minPxPerSec` and enables the `scrollParent` option. Calling the function\n     * with a falsey parameter will reset the zoom state.\n     *\n     * @param {?number} pxPerSec Number of horizontal pixels per second of\n     * audio, if none is set the waveform returns to unzoomed state\n     * @emits WaveSurfer#zoom\n     * @example wavesurfer.zoom(20);\n     */\n    zoom(pxPerSec) {\n        if (!pxPerSec) {\n            this.params.minPxPerSec = this.defaultParams.minPxPerSec;\n            this.params.scrollParent = false;\n        } else {\n            this.params.minPxPerSec = pxPerSec;\n            this.params.scrollParent = true;\n        }\n\n        this.drawBuffer();\n        this.drawer.progress(this.backend.getPlayedPercents());\n\n        this.drawer.recenter(this.getCurrentTime() / this.getDuration());\n        this.fireEvent('zoom', pxPerSec);\n    }\n\n    /**\n     * Decode buffer and load\n     *\n     * @private\n     * @param {ArrayBuffer} arraybuffer Buffer to process\n     */\n    loadArrayBuffer(arraybuffer) {\n        this.decodeArrayBuffer(arraybuffer, data => {\n            if (!this.isDestroyed) {\n                this.loadDecodedBuffer(data);\n            }\n        });\n    }\n\n    /**\n     * Directly load an externally decoded AudioBuffer\n     *\n     * @private\n     * @param {AudioBuffer} buffer Buffer to process\n     * @emits WaveSurfer#ready\n     */\n    loadDecodedBuffer(buffer) {\n        this.backend.load(buffer);\n        this.drawBuffer();\n        this.isReady = true;\n        this.fireEvent('ready');\n    }\n\n    /**\n     * Loads audio data from a Blob or File object\n     *\n     * @param {Blob|File} blob Audio data\n     * @example\n     */\n    loadBlob(blob) {\n        // Create file reader\n        const reader = new FileReader();\n        reader.addEventListener('progress', e => this.onProgress(e));\n        reader.addEventListener('load', e =>\n            this.loadArrayBuffer(e.target.result)\n        );\n        reader.addEventListener('error', () =>\n            this.fireEvent('error', 'Error reading file')\n        );\n        reader.readAsArrayBuffer(blob);\n        this.empty();\n    }\n\n    /**\n     * Loads audio and re-renders the waveform.\n     *\n     * @param {string|HTMLMediaElement} url The url of the audio file or the\n     * audio element with the audio\n     * @param {number[]|Number.<Array[]>} peaks Wavesurfer does not have to decode\n     * the audio to render the waveform if this is specified\n     * @param {?string} preload (Use with backend `MediaElement` and `MediaElementWebAudio`)\n     * `'none'|'metadata'|'auto'` Preload attribute for the media element\n     * @param {?number} duration The duration of the audio. This is used to\n     * render the peaks data in the correct size for the audio duration (as\n     * befits the current `minPxPerSec` and zoom value) without having to decode\n     * the audio.\n     * @returns {void}\n     * @throws Will throw an error if the `url` argument is empty.\n     * @example\n     * // uses fetch or media element to load file (depending on backend)\n     * wavesurfer.load('http://example.com/demo.wav');\n     *\n     * // setting preload attribute with media element backend and supplying\n     * // peaks\n     * wavesurfer.load(\n     *   'http://example.com/demo.wav',\n     *   [0.0218, 0.0183, 0.0165, 0.0198, 0.2137, 0.2888],\n     *   true\n     * );\n     */\n    load(url, peaks, preload, duration) {\n        if (!url) {\n            throw new Error('url parameter cannot be empty');\n        }\n        this.empty();\n        if (preload) {\n            // check whether the preload attribute will be usable and if not log\n            // a warning listing the reasons why not and nullify the variable\n            const preloadIgnoreReasons = {\n                \"Preload is not 'auto', 'none' or 'metadata'\":\n                    ['auto', 'metadata', 'none'].indexOf(preload) === -1,\n                'Peaks are not provided': !peaks,\n                \"Backend is not of type 'MediaElement' or 'MediaElementWebAudio'\":\n                    ['MediaElement', 'MediaElementWebAudio'].indexOf(\n                        this.params.backend\n                    ) === -1,\n                'Url is not of type string': typeof url !== 'string'\n            };\n            const activeReasons = Object.keys(preloadIgnoreReasons).filter(\n                reason => preloadIgnoreReasons[reason]\n            );\n            if (activeReasons.length) {\n                // eslint-disable-next-line no-console\n                console.warn(\n                    'Preload parameter of wavesurfer.load will be ignored because:\\n\\t- ' +\n                        activeReasons.join('\\n\\t- ')\n                );\n                // stop invalid values from being used\n                preload = null;\n            }\n        }\n\n        switch (this.params.backend) {\n            case 'WebAudio':\n                return this.loadBuffer(url, peaks, duration);\n            case 'MediaElement':\n            case 'MediaElementWebAudio':\n                return this.loadMediaElement(url, peaks, preload, duration);\n        }\n    }\n\n    /**\n     * Loads audio using Web Audio buffer backend.\n     *\n     * @private\n     * @param {string} url URL of audio file\n     * @param {number[]|Number.<Array[]>} peaks Peaks data\n     * @param {?number} duration Optional duration of audio file\n     * @returns {void}\n     */\n    loadBuffer(url, peaks, duration) {\n        const load = action => {\n            if (action) {\n                this.tmpEvents.push(this.once('ready', action));\n            }\n            return this.getArrayBuffer(url, data => this.loadArrayBuffer(data));\n        };\n\n        if (peaks) {\n            this.backend.setPeaks(peaks, duration);\n            this.drawBuffer();\n            this.tmpEvents.push(this.once('interaction', load));\n        } else {\n            return load();\n        }\n    }\n\n    /**\n     * Either create a media element, or load an existing media element.\n     *\n     * @private\n     * @param {string|HTMLMediaElement} urlOrElt Either a path to a media file, or an\n     * existing HTML5 Audio/Video Element\n     * @param {number[]|Number.<Array[]>} peaks Array of peaks. Required to bypass web audio\n     * dependency\n     * @param {?boolean} preload Set to true if the preload attribute of the\n     * audio element should be enabled\n     * @param {?number} duration Optional duration of audio file\n     */\n    loadMediaElement(urlOrElt, peaks, preload, duration) {\n        let url = urlOrElt;\n\n        if (typeof urlOrElt === 'string') {\n            this.backend.load(url, this.mediaContainer, peaks, preload);\n        } else {\n            const elt = urlOrElt;\n            this.backend.loadElt(elt, peaks);\n\n            // If peaks are not provided,\n            // url = element.src so we can get peaks with web audio\n            url = elt.src;\n        }\n\n        this.tmpEvents.push(\n            this.backend.once('canplay', () => {\n                // ignore when backend was already destroyed\n                if (!this.backend.destroyed) {\n                    this.drawBuffer();\n                    this.isReady = true;\n                    this.fireEvent('ready');\n                }\n            }),\n            this.backend.once('error', err => this.fireEvent('error', err))\n        );\n\n        // If no pre-decoded peaks provided or pre-decoded peaks are\n        // provided with forceDecode flag, attempt to download the\n        // audio file and decode it with Web Audio.\n        if (peaks) {\n            this.backend.setPeaks(peaks, duration);\n        }\n\n        if (\n            (!peaks || this.params.forceDecode) &&\n            this.backend.supportsWebAudio()\n        ) {\n            this.getArrayBuffer(url, arraybuffer => {\n                this.decodeArrayBuffer(arraybuffer, buffer => {\n                    this.backend.buffer = buffer;\n                    this.backend.setPeaks(null);\n                    this.drawBuffer();\n                    this.fireEvent('waveform-ready');\n                });\n            });\n        }\n    }\n\n    /**\n     * Decode an array buffer and pass data to a callback\n     *\n     * @private\n     * @param {Object} arraybuffer The array buffer to decode\n     * @param {function} callback The function to call on complete\n     */\n    decodeArrayBuffer(arraybuffer, callback) {\n        this.arraybuffer = arraybuffer;\n        this.backend.decodeArrayBuffer(\n            arraybuffer,\n            data => {\n                // Only use the decoded data if we haven't been destroyed or\n                // another decode started in the meantime\n                if (!this.isDestroyed && this.arraybuffer == arraybuffer) {\n                    callback(data);\n                    this.arraybuffer = null;\n                }\n            },\n            () => this.fireEvent('error', 'Error decoding audiobuffer')\n        );\n    }\n\n    /**\n     * Load an array buffer using fetch and pass the result to a callback\n     *\n     * @param {string} url The URL of the file object\n     * @param {function} callback The function to call on complete\n     * @returns {util.fetchFile} fetch call\n     * @private\n     */\n    getArrayBuffer(url, callback) {\n        let options = Object.assign(\n            {\n                url: url,\n                responseType: 'arraybuffer'\n            },\n            this.params.xhr\n        );\n        const request = util.fetchFile(options);\n\n        this.currentRequest = request;\n\n        this.tmpEvents.push(\n            request.on('progress', e => {\n                this.onProgress(e);\n            }),\n            request.on('success', data => {\n                callback(data);\n                this.currentRequest = null;\n            }),\n            request.on('error', e => {\n                this.fireEvent('error', e);\n                this.currentRequest = null;\n            })\n        );\n\n        return request;\n    }\n\n    /**\n     * Called while the audio file is loading\n     *\n     * @private\n     * @param {Event} e Progress event\n     * @emits WaveSurfer#loading\n     */\n    onProgress(e) {\n        let percentComplete;\n        if (e.lengthComputable) {\n            percentComplete = e.loaded / e.total;\n        } else {\n            // Approximate progress with an asymptotic\n            // function, and assume downloads in the 1-3 MB range.\n            percentComplete = e.loaded / (e.loaded + 1000000);\n        }\n        this.fireEvent('loading', Math.round(percentComplete * 100), e.target);\n    }\n\n    /**\n     * Exports PCM data into a JSON array and opens in a new window.\n     *\n     * @param {number} length=1024 The scale in which to export the peaks\n     * @param {number} accuracy=10000\n     * @param {?boolean} noWindow Set to true to disable opening a new\n     * window with the JSON\n     * @param {number} start Start index\n     * @param {number} end End index\n     * @return {Promise} Promise that resolves with array of peaks\n     */\n    exportPCM(length, accuracy, noWindow, start, end) {\n        length = length || 1024;\n        start = start || 0;\n        accuracy = accuracy || 10000;\n        noWindow = noWindow || false;\n        const peaks = this.backend.getPeaks(length, start, end);\n        const arr = [].map.call(\n            peaks,\n            val => Math.round(val * accuracy) / accuracy\n        );\n        return new Promise((resolve, reject) => {\n            const json = JSON.stringify(arr);\n\n            if (!noWindow) {\n                window.open(\n                    'data:application/json;charset=utf-8,' +\n                        encodeURIComponent(json)\n                );\n            }\n            resolve(json);\n        });\n    }\n\n    /**\n     * Save waveform image as data URI.\n     *\n     * The default format is `'image/png'`. Other supported types are\n     * `'image/jpeg'` and `'image/webp'`.\n     *\n     * @param {string} format='image/png' A string indicating the image format.\n     * The default format type is `'image/png'`.\n     * @param {number} quality=1 A number between 0 and 1 indicating the image\n     * quality to use for image formats that use lossy compression such as\n     * `'image/jpeg'`` and `'image/webp'`.\n     * @param {string} type Image data type to return. Either 'dataURL' (default)\n     * or 'blob'.\n     * @return {string|string[]|Promise} When using `'dataURL'` type this returns\n     * a single data URL or an array of data URLs, one for each canvas. When using\n     * `'blob'` type this returns a `Promise` resolving with an array of `Blob`\n     * instances, one for each canvas.\n     */\n    exportImage(format, quality, type) {\n        if (!format) {\n            format = 'image/png';\n        }\n        if (!quality) {\n            quality = 1;\n        }\n        if (!type) {\n            type = 'dataURL';\n        }\n\n        return this.drawer.getImage(format, quality, type);\n    }\n\n    /**\n     * Cancel any fetch request currently in progress\n     */\n    cancelAjax() {\n        if (this.currentRequest && this.currentRequest.controller) {\n            this.currentRequest.controller.abort();\n            this.currentRequest = null;\n        }\n    }\n\n    /**\n     * @private\n     */\n    clearTmpEvents() {\n        this.tmpEvents.forEach(e => e.un());\n    }\n\n    /**\n     * Display empty waveform.\n     */\n    empty() {\n        if (!this.backend.isPaused()) {\n            this.stop();\n            this.backend.disconnectSource();\n        }\n        this.isReady = false;\n        this.cancelAjax();\n        this.clearTmpEvents();\n\n        // empty drawer\n        this.drawer.progress(0);\n        this.drawer.setWidth(0);\n        this.drawer.drawPeaks({ length: this.drawer.getWidth() }, 0);\n    }\n\n    /**\n     * Remove events, elements and disconnect WebAudio nodes.\n     *\n     * @emits WaveSurfer#destroy\n     */\n    destroy() {\n        this.destroyAllPlugins();\n        this.fireEvent('destroy');\n        this.cancelAjax();\n        this.clearTmpEvents();\n        this.unAll();\n        if (this.params.responsive !== false) {\n            window.removeEventListener('resize', this._onResize, true);\n            window.removeEventListener(\n                'orientationchange',\n                this._onResize,\n                true\n            );\n        }\n        if (this.backend) {\n            this.backend.destroy();\n        }\n        if (this.drawer) {\n            this.drawer.destroy();\n        }\n        this.isDestroyed = true;\n        this.isReady = false;\n        this.arraybuffer = null;\n    }\n}\n","import * as util from './util';\n\n// using constants to prevent someone writing the string wrong\nconst PLAYING = 'playing';\nconst PAUSED = 'paused';\nconst FINISHED = 'finished';\n\n/**\n * WebAudio backend\n *\n * @extends {Observer}\n */\nexport default class WebAudio extends util.Observer {\n    /** scriptBufferSize: size of the processing buffer */\n    static scriptBufferSize = 256;\n    /** audioContext: allows to process audio with WebAudio API */\n    audioContext = null;\n    /** @private */\n    offlineAudioContext = null;\n    /** @private */\n    stateBehaviors = {\n        [PLAYING]: {\n            init() {\n                this.addOnAudioProcess();\n            },\n            getPlayedPercents() {\n                const duration = this.getDuration();\n                return this.getCurrentTime() / duration || 0;\n            },\n            getCurrentTime() {\n                return this.startPosition + this.getPlayedTime();\n            }\n        },\n        [PAUSED]: {\n            init() {\n                this.removeOnAudioProcess();\n            },\n            getPlayedPercents() {\n                const duration = this.getDuration();\n                return this.getCurrentTime() / duration || 0;\n            },\n            getCurrentTime() {\n                return this.startPosition;\n            }\n        },\n        [FINISHED]: {\n            init() {\n                this.removeOnAudioProcess();\n                this.fireEvent('finish');\n            },\n            getPlayedPercents() {\n                return 1;\n            },\n            getCurrentTime() {\n                return this.getDuration();\n            }\n        }\n    };\n\n    /**\n     * Does the browser support this backend\n     *\n     * @return {boolean} Whether or not this browser supports this backend\n     */\n    supportsWebAudio() {\n        return !!(window.AudioContext || window.webkitAudioContext);\n    }\n\n    /**\n     * Get the audio context used by this backend or create one\n     *\n     * @return {AudioContext} Existing audio context, or creates a new one\n     */\n    getAudioContext() {\n        if (!window.WaveSurferAudioContext) {\n            window.WaveSurferAudioContext = new (window.AudioContext ||\n                window.webkitAudioContext)();\n        }\n        return window.WaveSurferAudioContext;\n    }\n\n    /**\n     * Get the offline audio context used by this backend or create one\n     *\n     * @param {number} sampleRate The sample rate to use\n     * @return {OfflineAudioContext} Existing offline audio context, or creates\n     * a new one\n     */\n    getOfflineAudioContext(sampleRate) {\n        if (!window.WaveSurferOfflineAudioContext) {\n            window.WaveSurferOfflineAudioContext = new (window.OfflineAudioContext ||\n                window.webkitOfflineAudioContext)(1, 2, sampleRate);\n        }\n        return window.WaveSurferOfflineAudioContext;\n    }\n\n    /**\n     * Construct the backend\n     *\n     * @param {WavesurferParams} params Wavesurfer parameters\n     */\n    constructor(params) {\n        super();\n        /** @private */\n        this.params = params;\n        /** ac: Audio Context instance */\n        this.ac =\n            params.audioContext ||\n            (this.supportsWebAudio() ? this.getAudioContext() : {});\n        /**@private */\n        this.lastPlay = this.ac.currentTime;\n        /** @private */\n        this.startPosition = 0;\n        /** @private */\n        this.scheduledPause = null;\n        /** @private */\n        this.states = {\n            [PLAYING]: Object.create(this.stateBehaviors[PLAYING]),\n            [PAUSED]: Object.create(this.stateBehaviors[PAUSED]),\n            [FINISHED]: Object.create(this.stateBehaviors[FINISHED])\n        };\n        /** @private */\n        this.buffer = null;\n        /** @private */\n        this.filters = [];\n        /** gainNode: allows to control audio volume */\n        this.gainNode = null;\n        /** @private */\n        this.mergedPeaks = null;\n        /** @private */\n        this.offlineAc = null;\n        /** @private */\n        this.peaks = null;\n        /** @private */\n        this.playbackRate = 1;\n        /** analyser: provides audio analysis information */\n        this.analyser = null;\n        /** scriptNode: allows processing audio */\n        this.scriptNode = null;\n        /** @private */\n        this.source = null;\n        /** @private */\n        this.splitPeaks = [];\n        /** @private */\n        this.state = null;\n        /** @private */\n        this.explicitDuration = params.duration;\n        /**\n         * Boolean indicating if the backend was destroyed.\n         */\n        this.destroyed = false;\n    }\n\n    /**\n     * Initialise the backend, called in `wavesurfer.createBackend()`\n     */\n    init() {\n        this.createVolumeNode();\n        this.createScriptNode();\n        this.createAnalyserNode();\n\n        this.setState(PAUSED);\n        this.setPlaybackRate(this.params.audioRate);\n        this.setLength(0);\n    }\n\n    /** @private */\n    disconnectFilters() {\n        if (this.filters) {\n            this.filters.forEach(filter => {\n                filter && filter.disconnect();\n            });\n            this.filters = null;\n            // Reconnect direct path\n            this.analyser.connect(this.gainNode);\n        }\n    }\n\n    /**\n     * @private\n     *\n     * @param {string} state The new state\n     */\n    setState(state) {\n        if (this.state !== this.states[state]) {\n            this.state = this.states[state];\n            this.state.init.call(this);\n        }\n    }\n\n    /**\n     * Unpacked `setFilters()`\n     *\n     * @param {...AudioNode} filters One or more filters to set\n     */\n    setFilter(...filters) {\n        this.setFilters(filters);\n    }\n\n    /**\n     * Insert custom Web Audio nodes into the graph\n     *\n     * @param {AudioNode[]} filters Packed filters array\n     * @example\n     * const lowpass = wavesurfer.backend.ac.createBiquadFilter();\n     * wavesurfer.backend.setFilter(lowpass);\n     */\n    setFilters(filters) {\n        // Remove existing filters\n        this.disconnectFilters();\n\n        // Insert filters if filter array not empty\n        if (filters && filters.length) {\n            this.filters = filters;\n\n            // Disconnect direct path before inserting filters\n            this.analyser.disconnect();\n\n            // Connect each filter in turn\n            filters\n                .reduce((prev, curr) => {\n                    prev.connect(curr);\n                    return curr;\n                }, this.analyser)\n                .connect(this.gainNode);\n        }\n    }\n    /** Create ScriptProcessorNode to process audio */\n    createScriptNode() {\n        if (this.params.audioScriptProcessor) {\n            this.scriptNode = this.params.audioScriptProcessor;\n        } else {\n            if (this.ac.createScriptProcessor) {\n                this.scriptNode = this.ac.createScriptProcessor(\n                    WebAudio.scriptBufferSize\n                );\n            } else {\n                this.scriptNode = this.ac.createJavaScriptNode(\n                    WebAudio.scriptBufferSize\n                );\n            }\n        }\n        this.scriptNode.connect(this.ac.destination);\n    }\n\n    /** @private */\n    addOnAudioProcess() {\n        this.scriptNode.onaudioprocess = () => {\n            const time = this.getCurrentTime();\n\n            if (time >= this.getDuration()) {\n                this.setState(FINISHED);\n                this.fireEvent('pause');\n            } else if (time >= this.scheduledPause) {\n                this.pause();\n            } else if (this.state === this.states[PLAYING]) {\n                this.fireEvent('audioprocess', time);\n            }\n        };\n    }\n\n    /** @private */\n    removeOnAudioProcess() {\n        this.scriptNode.onaudioprocess = () => {};\n    }\n    /** Create analyser node to perform audio analysis */\n    createAnalyserNode() {\n        this.analyser = this.ac.createAnalyser();\n        this.analyser.connect(this.gainNode);\n    }\n\n    /**\n     * Create the gain node needed to control the playback volume.\n     *\n     */\n    createVolumeNode() {\n        // Create gain node using the AudioContext\n        if (this.ac.createGain) {\n            this.gainNode = this.ac.createGain();\n        } else {\n            this.gainNode = this.ac.createGainNode();\n        }\n        // Add the gain node to the graph\n        this.gainNode.connect(this.ac.destination);\n    }\n\n    /**\n     * Set the sink id for the media player\n     *\n     * @param {string} deviceId String value representing audio device id.\n     * @returns {Promise} A Promise that resolves to `undefined` when there\n     * are no errors.\n     */\n    setSinkId(deviceId) {\n        if (deviceId) {\n            /**\n             * The webaudio API doesn't currently support setting the device\n             * output. Here we create an HTMLAudioElement, connect the\n             * webaudio stream to that element and setSinkId there.\n             */\n            let audio = new window.Audio();\n            if (!audio.setSinkId) {\n                return Promise.reject(\n                    new Error('setSinkId is not supported in your browser')\n                );\n            }\n            audio.autoplay = true;\n            var dest = this.ac.createMediaStreamDestination();\n            this.gainNode.disconnect();\n            this.gainNode.connect(dest);\n            audio.srcObject = dest.stream;\n\n            return audio.setSinkId(deviceId);\n        } else {\n            return Promise.reject(new Error('Invalid deviceId: ' + deviceId));\n        }\n    }\n\n    /**\n     * Set the audio volume\n     *\n     * @param {number} value A floating point value between 0 and 1.\n     */\n    setVolume(value) {\n        this.gainNode.gain.setValueAtTime(value, this.ac.currentTime);\n    }\n\n    /**\n     * Get the current volume\n     *\n     * @return {number} value A floating point value between 0 and 1.\n     */\n    getVolume() {\n        return this.gainNode.gain.value;\n    }\n\n    /**\n     * Decode an array buffer and pass data to a callback\n     *\n     * @private\n     * @param {ArrayBuffer} arraybuffer The array buffer to decode\n     * @param {function} callback The function to call on complete.\n     * @param {function} errback The function to call on error.\n     */\n    decodeArrayBuffer(arraybuffer, callback, errback) {\n        if (!this.offlineAc) {\n            this.offlineAc = this.getOfflineAudioContext(\n                this.ac && this.ac.sampleRate ? this.ac.sampleRate : 44100\n            );\n        }\n        this.offlineAc.decodeAudioData(\n            arraybuffer,\n            data => callback(data),\n            errback\n        );\n    }\n\n    /**\n     * Set pre-decoded peaks\n     *\n     * @param {number[]|Number.<Array[]>} peaks Peaks data\n     * @param {?number} duration Explicit duration\n     */\n    setPeaks(peaks, duration) {\n        if (duration != null) {\n            this.explicitDuration = duration;\n        }\n        this.peaks = peaks;\n    }\n\n    /**\n     * Set the rendered length (different from the length of the audio)\n     *\n     * @param {number} length The rendered length\n     */\n    setLength(length) {\n        // No resize, we can preserve the cached peaks.\n        if (this.mergedPeaks && length == 2 * this.mergedPeaks.length - 1 + 2) {\n            return;\n        }\n\n        this.splitPeaks = [];\n        this.mergedPeaks = [];\n        // Set the last element of the sparse array so the peak arrays are\n        // appropriately sized for other calculations.\n        const channels = this.buffer ? this.buffer.numberOfChannels : 1;\n        let c;\n        for (c = 0; c < channels; c++) {\n            this.splitPeaks[c] = [];\n            this.splitPeaks[c][2 * (length - 1)] = 0;\n            this.splitPeaks[c][2 * (length - 1) + 1] = 0;\n        }\n        this.mergedPeaks[2 * (length - 1)] = 0;\n        this.mergedPeaks[2 * (length - 1) + 1] = 0;\n    }\n\n    /**\n     * Compute the max and min value of the waveform when broken into <length> subranges.\n     *\n     * @param {number} length How many subranges to break the waveform into.\n     * @param {number} first First sample in the required range.\n     * @param {number} last Last sample in the required range.\n     * @return {number[]|Number.<Array[]>} Array of 2*<length> peaks or array of arrays of\n     * peaks consisting of (max, min) values for each subrange.\n     */\n    getPeaks(length, first, last) {\n        if (this.peaks) {\n            return this.peaks;\n        }\n        if (!this.buffer) {\n            return [];\n        }\n\n        first = first || 0;\n        last = last || length - 1;\n\n        this.setLength(length);\n\n        if (!this.buffer) {\n            return this.params.splitChannels\n                ? this.splitPeaks\n                : this.mergedPeaks;\n        }\n\n        /**\n         * The following snippet fixes a buffering data issue on the Safari\n         * browser which returned undefined It creates the missing buffer based\n         * on 1 channel, 4096 samples and the sampleRate from the current\n         * webaudio context 4096 samples seemed to be the best fit for rendering\n         * will review this code once a stable version of Safari TP is out\n         */\n        if (!this.buffer.length) {\n            const newBuffer = this.createBuffer(1, 4096, this.sampleRate);\n            this.buffer = newBuffer.buffer;\n        }\n\n        const sampleSize = this.buffer.length / length;\n        const sampleStep = ~~(sampleSize / 10) || 1;\n        const channels = this.buffer.numberOfChannels;\n        let c;\n\n        for (c = 0; c < channels; c++) {\n            const peaks = this.splitPeaks[c];\n            const chan = this.buffer.getChannelData(c);\n            let i;\n\n            for (i = first; i <= last; i++) {\n                const start = ~~(i * sampleSize);\n                const end = ~~(start + sampleSize);\n                let min = 0;\n                let max = 0;\n                let j;\n\n                for (j = start; j < end; j += sampleStep) {\n                    const value = chan[j];\n\n                    if (value > max) {\n                        max = value;\n                    }\n\n                    if (value < min) {\n                        min = value;\n                    }\n                }\n\n                peaks[2 * i] = max;\n                peaks[2 * i + 1] = min;\n\n                if (c == 0 || max > this.mergedPeaks[2 * i]) {\n                    this.mergedPeaks[2 * i] = max;\n                }\n\n                if (c == 0 || min < this.mergedPeaks[2 * i + 1]) {\n                    this.mergedPeaks[2 * i + 1] = min;\n                }\n            }\n        }\n\n        return this.params.splitChannels ? this.splitPeaks : this.mergedPeaks;\n    }\n\n    /**\n     * Get the position from 0 to 1\n     *\n     * @return {number} Position\n     */\n    getPlayedPercents() {\n        return this.state.getPlayedPercents.call(this);\n    }\n\n    /** @private */\n    disconnectSource() {\n        if (this.source) {\n            this.source.disconnect();\n        }\n    }\n\n    /**\n     * This is called when wavesurfer is destroyed\n     */\n    destroy() {\n        if (!this.isPaused()) {\n            this.pause();\n        }\n        this.unAll();\n        this.buffer = null;\n        this.destroyed = true;\n        this.disconnectFilters();\n        this.disconnectSource();\n        this.gainNode.disconnect();\n        this.scriptNode.disconnect();\n        this.analyser.disconnect();\n\n        // close the audioContext if closeAudioContext option is set to true\n        if (this.params.closeAudioContext) {\n            // check if browser supports AudioContext.close()\n            if (\n                typeof this.ac.close === 'function' &&\n                this.ac.state != 'closed'\n            ) {\n                this.ac.close();\n            }\n            // clear the reference to the audiocontext\n            this.ac = null;\n            // clear the actual audiocontext, either passed as param or the\n            // global singleton\n            if (!this.params.audioContext) {\n                window.WaveSurferAudioContext = null;\n            } else {\n                this.params.audioContext = null;\n            }\n            // clear the offlineAudioContext\n            window.WaveSurferOfflineAudioContext = null;\n        }\n    }\n\n    /**\n     * Loaded a decoded audio buffer\n     *\n     * @param {Object} buffer Decoded audio buffer to load\n     */\n    load(buffer) {\n        this.startPosition = 0;\n        this.lastPlay = this.ac.currentTime;\n        this.buffer = buffer;\n        this.createSource();\n    }\n\n    /** @private */\n    createSource() {\n        this.disconnectSource();\n        this.source = this.ac.createBufferSource();\n\n        // adjust for old browsers\n        this.source.start = this.source.start || this.source.noteGrainOn;\n        this.source.stop = this.source.stop || this.source.noteOff;\n\n        this.source.playbackRate.setValueAtTime(\n            this.playbackRate,\n            this.ac.currentTime\n        );\n        this.source.buffer = this.buffer;\n        this.source.connect(this.analyser);\n    }\n\n    /**\n     * Used by `wavesurfer.isPlaying()` and `wavesurfer.playPause()`\n     *\n     * @return {boolean} Whether or not this backend is currently paused\n     */\n    isPaused() {\n        return this.state !== this.states[PLAYING];\n    }\n\n    /**\n     * Used by `wavesurfer.getDuration()`\n     *\n     * @return {number} Duration of loaded buffer\n     */\n    getDuration() {\n        if (this.explicitDuration) {\n            return this.explicitDuration;\n        }\n        if (!this.buffer) {\n            return 0;\n        }\n        return this.buffer.duration;\n    }\n\n    /**\n     * Used by `wavesurfer.seekTo()`\n     *\n     * @param {number} start Position to start at in seconds\n     * @param {number} end Position to end at in seconds\n     * @return {{start: number, end: number}} Object containing start and end\n     * positions\n     */\n    seekTo(start, end) {\n        if (!this.buffer) {\n            return;\n        }\n\n        this.scheduledPause = null;\n\n        if (start == null) {\n            start = this.getCurrentTime();\n            if (start >= this.getDuration()) {\n                start = 0;\n            }\n        }\n        if (end == null) {\n            end = this.getDuration();\n        }\n\n        this.startPosition = start;\n        this.lastPlay = this.ac.currentTime;\n\n        if (this.state === this.states[FINISHED]) {\n            this.setState(PAUSED);\n        }\n\n        return {\n            start: start,\n            end: end\n        };\n    }\n\n    /**\n     * Get the playback position in seconds\n     *\n     * @return {number} The playback position in seconds\n     */\n    getPlayedTime() {\n        return (this.ac.currentTime - this.lastPlay) * this.playbackRate;\n    }\n\n    /**\n     * Plays the loaded audio region.\n     *\n     * @param {number} start Start offset in seconds, relative to the beginning\n     * of a clip.\n     * @param {number} end When to stop relative to the beginning of a clip.\n     */\n    play(start, end) {\n        if (!this.buffer) {\n            return;\n        }\n\n        // need to re-create source on each playback\n        this.createSource();\n\n        const adjustedTime = this.seekTo(start, end);\n\n        start = adjustedTime.start;\n        end = adjustedTime.end;\n\n        this.scheduledPause = end;\n\n        this.source.start(0, start);\n\n        if (this.ac.state == 'suspended') {\n            this.ac.resume && this.ac.resume();\n        }\n\n        this.setState(PLAYING);\n\n        this.fireEvent('play');\n    }\n\n    /**\n     * Pauses the loaded audio.\n     */\n    pause() {\n        this.scheduledPause = null;\n\n        this.startPosition += this.getPlayedTime();\n        this.source && this.source.stop(0);\n\n        this.setState(PAUSED);\n\n        this.fireEvent('pause');\n    }\n\n    /**\n     * Returns the current time in seconds relative to the audio-clip's\n     * duration.\n     *\n     * @return {number} The current time in seconds\n     */\n    getCurrentTime() {\n        return this.state.getCurrentTime.call(this);\n    }\n\n    /**\n     * Returns the current playback rate. (0=no playback, 1=normal playback)\n     *\n     * @return {number} The current playback rate\n     */\n    getPlaybackRate() {\n        return this.playbackRate;\n    }\n\n    /**\n     * Set the audio source playback rate.\n     *\n     * @param {number} value The playback rate to use\n     */\n    setPlaybackRate(value) {\n        value = value || 1;\n        if (this.isPaused()) {\n            this.playbackRate = value;\n        } else {\n            this.pause();\n            this.playbackRate = value;\n            this.play();\n        }\n    }\n\n    /**\n     * Set a point in seconds for playback to stop at.\n     *\n     * @param {number} end Position to end at\n     * @version 3.3.0\n     */\n    setPlayEnd(end) {\n        this.scheduledPause = end;\n    }\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"script"}