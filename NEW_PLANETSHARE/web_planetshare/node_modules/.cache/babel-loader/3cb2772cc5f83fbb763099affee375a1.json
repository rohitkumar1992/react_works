{"ast":null,"code":"/*\n* MIT Licensed\n* http://www.23developer.com/opensource\n* http://github.com/23/resumable.js\n* Steffen Tiedemann Christensen, steffen@23company.com\n*/\n(function () {\n  \"use strict\";\n\n  var Resumable = function (opts) {\n    if (!(this instanceof Resumable)) {\n      return new Resumable(opts);\n    }\n\n    this.version = 1.0; // SUPPORTED BY BROWSER?\n    // Check if these features are support by the browser:\n    // - File object type\n    // - Blob object type\n    // - FileList object type\n    // - slicing files\n\n    this.support = typeof File !== 'undefined' && typeof Blob !== 'undefined' && typeof FileList !== 'undefined' && (!!Blob.prototype.webkitSlice || !!Blob.prototype.mozSlice || !!Blob.prototype.slice || false);\n    if (!this.support) return false; // PROPERTIES\n\n    var $ = this;\n    $.files = [];\n    $.defaults = {\n      chunkSize: 1 * 1024 * 1024,\n      forceChunkSize: false,\n      simultaneousUploads: 3,\n      fileParameterName: 'file',\n      chunkNumberParameterName: 'resumableChunkNumber',\n      chunkSizeParameterName: 'resumableChunkSize',\n      currentChunkSizeParameterName: 'resumableCurrentChunkSize',\n      totalSizeParameterName: 'resumableTotalSize',\n      typeParameterName: 'resumableType',\n      identifierParameterName: 'resumableIdentifier',\n      fileNameParameterName: 'resumableFilename',\n      relativePathParameterName: 'resumableRelativePath',\n      totalChunksParameterName: 'resumableTotalChunks',\n      throttleProgressCallbacks: 0.5,\n      query: {},\n      headers: {},\n      preprocess: null,\n      method: 'multipart',\n      uploadMethod: 'POST',\n      testMethod: 'GET',\n      prioritizeFirstAndLastChunk: false,\n      target: '/',\n      testTarget: null,\n      parameterNamespace: '',\n      testChunks: true,\n      generateUniqueIdentifier: null,\n      getTarget: null,\n      maxChunkRetries: 100,\n      chunkRetryInterval: undefined,\n      permanentErrors: [400, 404, 415, 500, 501],\n      maxFiles: undefined,\n      withCredentials: false,\n      xhrTimeout: 0,\n      clearInput: true,\n      chunkFormat: 'blob',\n      setChunkTypeFromFile: false,\n      maxFilesErrorCallback: function (files, errorCount) {\n        var maxFiles = $.getOpt('maxFiles');\n        alert('Please upload no more than ' + maxFiles + ' file' + (maxFiles === 1 ? '' : 's') + ' at a time.');\n      },\n      minFileSize: 1,\n      minFileSizeErrorCallback: function (file, errorCount) {\n        alert(file.fileName || file.name + ' is too small, please upload files larger than ' + $h.formatSize($.getOpt('minFileSize')) + '.');\n      },\n      maxFileSize: undefined,\n      maxFileSizeErrorCallback: function (file, errorCount) {\n        alert(file.fileName || file.name + ' is too large, please upload files less than ' + $h.formatSize($.getOpt('maxFileSize')) + '.');\n      },\n      fileType: [],\n      fileTypeErrorCallback: function (file, errorCount) {\n        alert(file.fileName || file.name + ' has type not allowed, please upload files of type ' + $.getOpt('fileType') + '.');\n      }\n    };\n    $.opts = opts || {};\n\n    $.getOpt = function (o) {\n      var $opt = this; // Get multiple option if passed an array\n\n      if (o instanceof Array) {\n        var options = {};\n        $h.each(o, function (option) {\n          options[option] = $opt.getOpt(option);\n        });\n        return options;\n      } // Otherwise, just return a simple option\n\n\n      if ($opt instanceof ResumableChunk) {\n        if (typeof $opt.opts[o] !== 'undefined') {\n          return $opt.opts[o];\n        } else {\n          $opt = $opt.fileObj;\n        }\n      }\n\n      if ($opt instanceof ResumableFile) {\n        if (typeof $opt.opts[o] !== 'undefined') {\n          return $opt.opts[o];\n        } else {\n          $opt = $opt.resumableObj;\n        }\n      }\n\n      if ($opt instanceof Resumable) {\n        if (typeof $opt.opts[o] !== 'undefined') {\n          return $opt.opts[o];\n        } else {\n          return $opt.defaults[o];\n        }\n      }\n    }; // EVENTS\n    // catchAll(event, ...)\n    // fileSuccess(file), fileProgress(file), fileAdded(file, event), filesAdded(files, filesSkipped), fileRetry(file),\n    // fileError(file, message), complete(), progress(), error(message, file), pause()\n\n\n    $.events = [];\n\n    $.on = function (event, callback) {\n      $.events.push(event.toLowerCase(), callback);\n    };\n\n    $.fire = function () {\n      // `arguments` is an object, not array, in FF, so:\n      var args = [];\n\n      for (var i = 0; i < arguments.length; i++) args.push(arguments[i]); // Find event listeners, and support pseudo-event `catchAll`\n\n\n      var event = args[0].toLowerCase();\n\n      for (var i = 0; i <= $.events.length; i += 2) {\n        if ($.events[i] == event) $.events[i + 1].apply($, args.slice(1));\n        if ($.events[i] == 'catchall') $.events[i + 1].apply(null, args);\n      }\n\n      if (event == 'fileerror') $.fire('error', args[2], args[1]);\n      if (event == 'fileprogress') $.fire('progress');\n    }; // INTERNAL HELPER METHODS (handy, but ultimately not part of uploading)\n\n\n    var $h = {\n      stopEvent: function (e) {\n        e.stopPropagation();\n        e.preventDefault();\n      },\n      each: function (o, callback) {\n        if (typeof o.length !== 'undefined') {\n          for (var i = 0; i < o.length; i++) {\n            // Array or FileList\n            if (callback(o[i]) === false) return;\n          }\n        } else {\n          for (i in o) {\n            // Object\n            if (callback(i, o[i]) === false) return;\n          }\n        }\n      },\n      generateUniqueIdentifier: function (file, event) {\n        var custom = $.getOpt('generateUniqueIdentifier');\n\n        if (typeof custom === 'function') {\n          return custom(file, event);\n        }\n\n        var relativePath = file.webkitRelativePath || file.fileName || file.name; // Some confusion in different versions of Firefox\n\n        var size = file.size;\n        return size + '-' + relativePath.replace(/[^0-9a-zA-Z_-]/img, '');\n      },\n      contains: function (array, test) {\n        var result = false;\n        $h.each(array, function (value) {\n          if (value == test) {\n            result = true;\n            return false;\n          }\n\n          return true;\n        });\n        return result;\n      },\n      formatSize: function (size) {\n        if (size < 1024) {\n          return size + ' bytes';\n        } else if (size < 1024 * 1024) {\n          return (size / 1024.0).toFixed(0) + ' KB';\n        } else if (size < 1024 * 1024 * 1024) {\n          return (size / 1024.0 / 1024.0).toFixed(1) + ' MB';\n        } else {\n          return (size / 1024.0 / 1024.0 / 1024.0).toFixed(1) + ' GB';\n        }\n      },\n      getTarget: function (request, params) {\n        var target = $.getOpt('target');\n\n        if (request === 'test' && $.getOpt('testTarget')) {\n          target = $.getOpt('testTarget') === '/' ? $.getOpt('target') : $.getOpt('testTarget');\n        }\n\n        if (typeof target === 'function') {\n          return target(params);\n        }\n\n        var separator = target.indexOf('?') < 0 ? '?' : '&';\n        var joinedParams = params.join('&');\n        return target + separator + joinedParams;\n      }\n    };\n\n    var onDrop = function (event) {\n      $h.stopEvent(event); //handle dropped things as items if we can (this lets us deal with folders nicer in some cases)\n\n      if (event.dataTransfer && event.dataTransfer.items) {\n        loadFiles(event.dataTransfer.items, event);\n      } //else handle them as files\n      else if (event.dataTransfer && event.dataTransfer.files) {\n          loadFiles(event.dataTransfer.files, event);\n        }\n    };\n\n    var preventDefault = function (e) {\n      e.preventDefault();\n    };\n    /**\n     * processes a single upload item (file or directory)\n     * @param {Object} item item to upload, may be file or directory entry\n     * @param {string} path current file path\n     * @param {File[]} items list of files to append new items to\n     * @param {Function} cb callback invoked when item is processed\n     */\n\n\n    function processItem(item, path, items, cb) {\n      var entry;\n\n      if (item.isFile) {\n        // file provided\n        return item.file(function (file) {\n          file.relativePath = path + file.name;\n          items.push(file);\n          cb();\n        });\n      } else if (item.isDirectory) {\n        // item is already a directory entry, just assign\n        entry = item;\n      } else if (item instanceof File) {\n        items.push(item);\n      }\n\n      if ('function' === typeof item.webkitGetAsEntry) {\n        // get entry from file object\n        entry = item.webkitGetAsEntry();\n      }\n\n      if (entry && entry.isDirectory) {\n        // directory provided, process it\n        return processDirectory(entry, path + entry.name + '/', items, cb);\n      }\n\n      if ('function' === typeof item.getAsFile) {\n        // item represents a File object, convert it\n        item = item.getAsFile();\n\n        if (item instanceof File) {\n          item.relativePath = path + item.name;\n          items.push(item);\n        }\n      }\n\n      cb(); // indicate processing is done\n    }\n    /**\n     * cps-style list iteration.\n     * invokes all functions in list and waits for their callback to be\n     * triggered.\n     * @param  {Function[]}   items list of functions expecting callback parameter\n     * @param  {Function} cb    callback to trigger after the last callback has been invoked\n     */\n\n\n    function processCallbacks(items, cb) {\n      if (!items || items.length === 0) {\n        // empty or no list, invoke callback\n        return cb();\n      } // invoke current function, pass the next part as continuation\n\n\n      items[0](function () {\n        processCallbacks(items.slice(1), cb);\n      });\n    }\n    /**\n     * recursively traverse directory and collect files to upload\n     * @param  {Object}   directory directory to process\n     * @param  {string}   path      current path\n     * @param  {File[]}   items     target list of items\n     * @param  {Function} cb        callback invoked after traversing directory\n     */\n\n\n    function processDirectory(directory, path, items, cb) {\n      var dirReader = directory.createReader();\n      dirReader.readEntries(function (entries) {\n        if (!entries.length) {\n          // empty directory, skip\n          return cb();\n        } // process all conversion callbacks, finally invoke own one\n\n\n        processCallbacks(entries.map(function (entry) {\n          // bind all properties except for callback\n          return processItem.bind(null, entry, path, items);\n        }), cb);\n      });\n    }\n    /**\n     * process items to extract files to be uploaded\n     * @param  {File[]} items items to process\n     * @param  {Event} event event that led to upload\n     */\n\n\n    function loadFiles(items, event) {\n      if (!items.length) {\n        return; // nothing to do\n      }\n\n      $.fire('beforeAdd');\n      var files = [];\n      processCallbacks(Array.prototype.map.call(items, function (item) {\n        // bind all properties except for callback\n        return processItem.bind(null, item, \"\", files);\n      }), function () {\n        if (files.length) {\n          // at least one file found\n          appendFilesFromFileList(files, event);\n        }\n      });\n    }\n\n    ;\n\n    var appendFilesFromFileList = function (fileList, event) {\n      // check for uploading too many files\n      var errorCount = 0;\n      var o = $.getOpt(['maxFiles', 'minFileSize', 'maxFileSize', 'maxFilesErrorCallback', 'minFileSizeErrorCallback', 'maxFileSizeErrorCallback', 'fileType', 'fileTypeErrorCallback']);\n\n      if (typeof o.maxFiles !== 'undefined' && o.maxFiles < fileList.length + $.files.length) {\n        // if single-file upload, file is already added, and trying to add 1 new file, simply replace the already-added file\n        if (o.maxFiles === 1 && $.files.length === 1 && fileList.length === 1) {\n          $.removeFile($.files[0]);\n        } else {\n          o.maxFilesErrorCallback(fileList, errorCount++);\n          return false;\n        }\n      }\n\n      var files = [],\n          filesSkipped = [],\n          remaining = fileList.length;\n\n      var decreaseReamining = function () {\n        if (! --remaining) {\n          // all files processed, trigger event\n          if (!files.length && !filesSkipped.length) {\n            // no succeeded files, just skip\n            return;\n          }\n\n          window.setTimeout(function () {\n            $.fire('filesAdded', files, filesSkipped);\n          }, 0);\n        }\n      };\n\n      $h.each(fileList, function (file) {\n        var fileName = file.name;\n\n        if (o.fileType.length > 0) {\n          var fileTypeFound = false;\n\n          for (var index in o.fileType) {\n            var extension = '.' + o.fileType[index];\n\n            if (fileName.toLowerCase().indexOf(extension.toLowerCase(), fileName.length - extension.length) !== -1) {\n              fileTypeFound = true;\n              break;\n            }\n          }\n\n          if (!fileTypeFound) {\n            o.fileTypeErrorCallback(file, errorCount++);\n            return false;\n          }\n        }\n\n        if (typeof o.minFileSize !== 'undefined' && file.size < o.minFileSize) {\n          o.minFileSizeErrorCallback(file, errorCount++);\n          return false;\n        }\n\n        if (typeof o.maxFileSize !== 'undefined' && file.size > o.maxFileSize) {\n          o.maxFileSizeErrorCallback(file, errorCount++);\n          return false;\n        }\n\n        function addFile(uniqueIdentifier) {\n          if (!$.getFromUniqueIdentifier(uniqueIdentifier)) {\n            (function () {\n              file.uniqueIdentifier = uniqueIdentifier;\n              var f = new ResumableFile($, file, uniqueIdentifier);\n              $.files.push(f);\n              files.push(f);\n              f.container = typeof event != 'undefined' ? event.srcElement : null;\n              window.setTimeout(function () {\n                $.fire('fileAdded', f, event);\n              }, 0);\n            })();\n          } else {\n            filesSkipped.push(file);\n          }\n\n          ;\n          decreaseReamining();\n        } // directories have size == 0\n\n\n        var uniqueIdentifier = $h.generateUniqueIdentifier(file, event);\n\n        if (uniqueIdentifier && typeof uniqueIdentifier.then === 'function') {\n          // Promise or Promise-like object provided as unique identifier\n          uniqueIdentifier.then(function (uniqueIdentifier) {\n            // unique identifier generation succeeded\n            addFile(uniqueIdentifier);\n          }, function () {\n            // unique identifier generation failed\n            // skip further processing, only decrease file count\n            decreaseReamining();\n          });\n        } else {\n          // non-Promise provided as unique identifier, process synchronously\n          addFile(uniqueIdentifier);\n        }\n      });\n    }; // INTERNAL OBJECT TYPES\n\n\n    function ResumableFile(resumableObj, file, uniqueIdentifier) {\n      var $ = this;\n      $.opts = {};\n      $.getOpt = resumableObj.getOpt;\n      $._prevProgress = 0;\n      $.resumableObj = resumableObj;\n      $.file = file;\n      $.fileName = file.fileName || file.name; // Some confusion in different versions of Firefox\n\n      $.size = file.size;\n      $.relativePath = file.relativePath || file.webkitRelativePath || $.fileName;\n      $.uniqueIdentifier = uniqueIdentifier;\n      $._pause = false;\n      $.container = '';\n\n      var _error = uniqueIdentifier !== undefined; // Callback when something happens within the chunk\n\n\n      var chunkEvent = function (event, message) {\n        // event can be 'progress', 'success', 'error' or 'retry'\n        switch (event) {\n          case 'progress':\n            $.resumableObj.fire('fileProgress', $, message);\n            break;\n\n          case 'error':\n            $.abort();\n            _error = true;\n            $.chunks = [];\n            $.resumableObj.fire('fileError', $, message);\n            break;\n\n          case 'success':\n            if (_error) return;\n            $.resumableObj.fire('fileProgress', $); // it's at least progress\n\n            if ($.isComplete()) {\n              $.resumableObj.fire('fileSuccess', $, message);\n            }\n\n            break;\n\n          case 'retry':\n            $.resumableObj.fire('fileRetry', $);\n            break;\n        }\n      }; // Main code to set up a file object with chunks,\n      // packaged to be able to handle retries if needed.\n\n\n      $.chunks = [];\n\n      $.abort = function () {\n        // Stop current uploads\n        var abortCount = 0;\n        $h.each($.chunks, function (c) {\n          if (c.status() == 'uploading') {\n            c.abort();\n            abortCount++;\n          }\n        });\n        if (abortCount > 0) $.resumableObj.fire('fileProgress', $);\n      };\n\n      $.cancel = function () {\n        // Reset this file to be void\n        var _chunks = $.chunks;\n        $.chunks = []; // Stop current uploads\n\n        $h.each(_chunks, function (c) {\n          if (c.status() == 'uploading') {\n            c.abort();\n            $.resumableObj.uploadNextChunk();\n          }\n        });\n        $.resumableObj.removeFile($);\n        $.resumableObj.fire('fileProgress', $);\n      };\n\n      $.retry = function () {\n        $.bootstrap();\n        var firedRetry = false;\n        $.resumableObj.on('chunkingComplete', function () {\n          if (!firedRetry) $.resumableObj.upload();\n          firedRetry = true;\n        });\n      };\n\n      $.bootstrap = function () {\n        $.abort();\n        _error = false; // Rebuild stack of chunks from file\n\n        $.chunks = [];\n        $._prevProgress = 0;\n        var round = $.getOpt('forceChunkSize') ? Math.ceil : Math.floor;\n        var maxOffset = Math.max(round($.file.size / $.getOpt('chunkSize')), 1);\n\n        for (var offset = 0; offset < maxOffset; offset++) {\n          (function (offset) {\n            window.setTimeout(function () {\n              $.chunks.push(new ResumableChunk($.resumableObj, $, offset, chunkEvent));\n              $.resumableObj.fire('chunkingProgress', $, offset / maxOffset);\n            }, 0);\n          })(offset);\n        }\n\n        window.setTimeout(function () {\n          $.resumableObj.fire('chunkingComplete', $);\n        }, 0);\n      };\n\n      $.progress = function () {\n        if (_error) return 1; // Sum up progress across everything\n\n        var ret = 0;\n        var error = false;\n        $h.each($.chunks, function (c) {\n          if (c.status() == 'error') error = true;\n          ret += c.progress(true); // get chunk progress relative to entire file\n        });\n        ret = error ? 1 : ret > 0.99999 ? 1 : ret;\n        ret = Math.max($._prevProgress, ret); // We don't want to lose percentages when an upload is paused\n\n        $._prevProgress = ret;\n        return ret;\n      };\n\n      $.isUploading = function () {\n        var uploading = false;\n        $h.each($.chunks, function (chunk) {\n          if (chunk.status() == 'uploading') {\n            uploading = true;\n            return false;\n          }\n        });\n        return uploading;\n      };\n\n      $.isComplete = function () {\n        var outstanding = false;\n        $h.each($.chunks, function (chunk) {\n          var status = chunk.status();\n\n          if (status == 'pending' || status == 'uploading' || chunk.preprocessState === 1) {\n            outstanding = true;\n            return false;\n          }\n        });\n        return !outstanding;\n      };\n\n      $.pause = function (pause) {\n        if (typeof pause === 'undefined') {\n          $._pause = $._pause ? false : true;\n        } else {\n          $._pause = pause;\n        }\n      };\n\n      $.isPaused = function () {\n        return $._pause;\n      }; // Bootstrap and return\n\n\n      $.resumableObj.fire('chunkingStart', $);\n      $.bootstrap();\n      return this;\n    }\n\n    function ResumableChunk(resumableObj, fileObj, offset, callback) {\n      var $ = this;\n      $.opts = {};\n      $.getOpt = resumableObj.getOpt;\n      $.resumableObj = resumableObj;\n      $.fileObj = fileObj;\n      $.fileObjSize = fileObj.size;\n      $.fileObjType = fileObj.file.type;\n      $.offset = offset;\n      $.callback = callback;\n      $.lastProgressCallback = new Date();\n      $.tested = false;\n      $.retries = 0;\n      $.pendingRetry = false;\n      $.preprocessState = 0; // 0 = unprocessed, 1 = processing, 2 = finished\n      // Computed properties\n\n      var chunkSize = $.getOpt('chunkSize');\n      $.loaded = 0;\n      $.startByte = $.offset * chunkSize;\n      $.endByte = Math.min($.fileObjSize, ($.offset + 1) * chunkSize);\n\n      if ($.fileObjSize - $.endByte < chunkSize && !$.getOpt('forceChunkSize')) {\n        // The last chunk will be bigger than the chunk size, but less than 2*chunkSize\n        $.endByte = $.fileObjSize;\n      }\n\n      $.xhr = null; // test() makes a GET request without any data to see if the chunk has already been uploaded in a previous session\n\n      $.test = function () {\n        // Set up request and listen for event\n        $.xhr = new XMLHttpRequest();\n\n        var testHandler = function (e) {\n          $.tested = true;\n          var status = $.status();\n\n          if (status == 'success') {\n            $.callback(status, $.message());\n            $.resumableObj.uploadNextChunk();\n          } else {\n            $.send();\n          }\n        };\n\n        $.xhr.addEventListener('load', testHandler, false);\n        $.xhr.addEventListener('error', testHandler, false);\n        $.xhr.addEventListener('timeout', testHandler, false); // Add data from the query options\n\n        var params = [];\n        var parameterNamespace = $.getOpt('parameterNamespace');\n        var customQuery = $.getOpt('query');\n        if (typeof customQuery == 'function') customQuery = customQuery($.fileObj, $);\n        $h.each(customQuery, function (k, v) {\n          params.push([encodeURIComponent(parameterNamespace + k), encodeURIComponent(v)].join('='));\n        }); // Add extra data to identify chunk\n\n        params = params.concat([// define key/value pairs for additional parameters\n        ['chunkNumberParameterName', $.offset + 1], ['chunkSizeParameterName', $.getOpt('chunkSize')], ['currentChunkSizeParameterName', $.endByte - $.startByte], ['totalSizeParameterName', $.fileObjSize], ['typeParameterName', $.fileObjType], ['identifierParameterName', $.fileObj.uniqueIdentifier], ['fileNameParameterName', $.fileObj.fileName], ['relativePathParameterName', $.fileObj.relativePath], ['totalChunksParameterName', $.fileObj.chunks.length]].filter(function (pair) {\n          // include items that resolve to truthy values\n          // i.e. exclude false, null, undefined and empty strings\n          return $.getOpt(pair[0]);\n        }).map(function (pair) {\n          // map each key/value pair to its final form\n          return [parameterNamespace + $.getOpt(pair[0]), encodeURIComponent(pair[1])].join('=');\n        })); // Append the relevant chunk and send it\n\n        $.xhr.open($.getOpt('testMethod'), $h.getTarget('test', params));\n        $.xhr.timeout = $.getOpt('xhrTimeout');\n        $.xhr.withCredentials = $.getOpt('withCredentials'); // Add data from header options\n\n        var customHeaders = $.getOpt('headers');\n\n        if (typeof customHeaders === 'function') {\n          customHeaders = customHeaders($.fileObj, $);\n        }\n\n        $h.each(customHeaders, function (k, v) {\n          $.xhr.setRequestHeader(k, v);\n        });\n        $.xhr.send(null);\n      };\n\n      $.preprocessFinished = function () {\n        $.preprocessState = 2;\n        $.send();\n      }; // send() uploads the actual data in a POST call\n\n\n      $.send = function () {\n        var preprocess = $.getOpt('preprocess');\n\n        if (typeof preprocess === 'function') {\n          switch ($.preprocessState) {\n            case 0:\n              $.preprocessState = 1;\n              preprocess($);\n              return;\n\n            case 1:\n              return;\n\n            case 2:\n              break;\n          }\n        }\n\n        if ($.getOpt('testChunks') && !$.tested) {\n          $.test();\n          return;\n        } // Set up request and listen for event\n\n\n        $.xhr = new XMLHttpRequest(); // Progress\n\n        $.xhr.upload.addEventListener('progress', function (e) {\n          if (new Date() - $.lastProgressCallback > $.getOpt('throttleProgressCallbacks') * 1000) {\n            $.callback('progress');\n            $.lastProgressCallback = new Date();\n          }\n\n          $.loaded = e.loaded || 0;\n        }, false);\n        $.loaded = 0;\n        $.pendingRetry = false;\n        $.callback('progress'); // Done (either done, failed or retry)\n\n        var doneHandler = function (e) {\n          var status = $.status();\n\n          if (status == 'success' || status == 'error') {\n            $.callback(status, $.message());\n            $.resumableObj.uploadNextChunk();\n          } else {\n            $.callback('retry', $.message());\n            $.abort();\n            $.retries++;\n            var retryInterval = $.getOpt('chunkRetryInterval');\n\n            if (retryInterval !== undefined) {\n              $.pendingRetry = true;\n              setTimeout($.send, retryInterval);\n            } else {\n              $.send();\n            }\n          }\n        };\n\n        $.xhr.addEventListener('load', doneHandler, false);\n        $.xhr.addEventListener('error', doneHandler, false);\n        $.xhr.addEventListener('timeout', doneHandler, false); // Set up the basic query data from Resumable\n\n        var query = [['chunkNumberParameterName', $.offset + 1], ['chunkSizeParameterName', $.getOpt('chunkSize')], ['currentChunkSizeParameterName', $.endByte - $.startByte], ['totalSizeParameterName', $.fileObjSize], ['typeParameterName', $.fileObjType], ['identifierParameterName', $.fileObj.uniqueIdentifier], ['fileNameParameterName', $.fileObj.fileName], ['relativePathParameterName', $.fileObj.relativePath], ['totalChunksParameterName', $.fileObj.chunks.length]].filter(function (pair) {\n          // include items that resolve to truthy values\n          // i.e. exclude false, null, undefined and empty strings\n          return $.getOpt(pair[0]);\n        }).reduce(function (query, pair) {\n          // assign query key/value\n          query[$.getOpt(pair[0])] = pair[1];\n          return query;\n        }, {}); // Mix in custom data\n\n        var customQuery = $.getOpt('query');\n        if (typeof customQuery == 'function') customQuery = customQuery($.fileObj, $);\n        $h.each(customQuery, function (k, v) {\n          query[k] = v;\n        });\n        var func = $.fileObj.file.slice ? 'slice' : $.fileObj.file.mozSlice ? 'mozSlice' : $.fileObj.file.webkitSlice ? 'webkitSlice' : 'slice';\n        var bytes = $.fileObj.file[func]($.startByte, $.endByte, $.getOpt('setChunkTypeFromFile') ? $.fileObj.file.type : \"\");\n        var data = null;\n        var params = [];\n        var parameterNamespace = $.getOpt('parameterNamespace');\n\n        if ($.getOpt('method') === 'octet') {\n          // Add data from the query options\n          data = bytes;\n          $h.each(query, function (k, v) {\n            params.push([encodeURIComponent(parameterNamespace + k), encodeURIComponent(v)].join('='));\n          });\n        } else {\n          // Add data from the query options\n          data = new FormData();\n          $h.each(query, function (k, v) {\n            data.append(parameterNamespace + k, v);\n            params.push([encodeURIComponent(parameterNamespace + k), encodeURIComponent(v)].join('='));\n          });\n\n          if ($.getOpt('chunkFormat') == 'blob') {\n            data.append(parameterNamespace + $.getOpt('fileParameterName'), bytes, $.fileObj.fileName);\n          } else if ($.getOpt('chunkFormat') == 'base64') {\n            var fr = new FileReader();\n\n            fr.onload = function (e) {\n              data.append(parameterNamespace + $.getOpt('fileParameterName'), fr.result);\n              $.xhr.send(data);\n            };\n\n            fr.readAsDataURL(bytes);\n          }\n        }\n\n        var target = $h.getTarget('upload', params);\n        var method = $.getOpt('uploadMethod');\n        $.xhr.open(method, target);\n\n        if ($.getOpt('method') === 'octet') {\n          $.xhr.setRequestHeader('Content-Type', 'application/octet-stream');\n        }\n\n        $.xhr.timeout = $.getOpt('xhrTimeout');\n        $.xhr.withCredentials = $.getOpt('withCredentials'); // Add data from header options\n\n        var customHeaders = $.getOpt('headers');\n\n        if (typeof customHeaders === 'function') {\n          customHeaders = customHeaders($.fileObj, $);\n        }\n\n        $h.each(customHeaders, function (k, v) {\n          $.xhr.setRequestHeader(k, v);\n        });\n\n        if ($.getOpt('chunkFormat') == 'blob') {\n          $.xhr.send(data);\n        }\n      };\n\n      $.abort = function () {\n        // Abort and reset\n        if ($.xhr) $.xhr.abort();\n        $.xhr = null;\n      };\n\n      $.status = function () {\n        // Returns: 'pending', 'uploading', 'success', 'error'\n        if ($.pendingRetry) {\n          // if pending retry then that's effectively the same as actively uploading,\n          // there might just be a slight delay before the retry starts\n          return 'uploading';\n        } else if (!$.xhr) {\n          return 'pending';\n        } else if ($.xhr.readyState < 4) {\n          // Status is really 'OPENED', 'HEADERS_RECEIVED' or 'LOADING' - meaning that stuff is happening\n          return 'uploading';\n        } else {\n          if ($.xhr.status == 200 || $.xhr.status == 201) {\n            // HTTP 200, 201 (created)\n            return 'success';\n          } else if ($h.contains($.getOpt('permanentErrors'), $.xhr.status) || $.retries >= $.getOpt('maxChunkRetries')) {\n            // HTTP 415/500/501, permanent error\n            return 'error';\n          } else {\n            // this should never happen, but we'll reset and queue a retry\n            // a likely case for this would be 503 service unavailable\n            $.abort();\n            return 'pending';\n          }\n        }\n      };\n\n      $.message = function () {\n        return $.xhr ? $.xhr.responseText : '';\n      };\n\n      $.progress = function (relative) {\n        if (typeof relative === 'undefined') relative = false;\n        var factor = relative ? ($.endByte - $.startByte) / $.fileObjSize : 1;\n        if ($.pendingRetry) return 0;\n        if (!$.xhr || !$.xhr.status) factor *= .95;\n        var s = $.status();\n\n        switch (s) {\n          case 'success':\n          case 'error':\n            return 1 * factor;\n\n          case 'pending':\n            return 0 * factor;\n\n          default:\n            return $.loaded / ($.endByte - $.startByte) * factor;\n        }\n      };\n\n      return this;\n    } // QUEUE\n\n\n    $.uploadNextChunk = function () {\n      var found = false; // In some cases (such as videos) it's really handy to upload the first\n      // and last chunk of a file quickly; this let's the server check the file's\n      // metadata and determine if there's even a point in continuing.\n\n      if ($.getOpt('prioritizeFirstAndLastChunk')) {\n        $h.each($.files, function (file) {\n          if (file.chunks.length && file.chunks[0].status() == 'pending' && file.chunks[0].preprocessState === 0) {\n            file.chunks[0].send();\n            found = true;\n            return false;\n          }\n\n          if (file.chunks.length > 1 && file.chunks[file.chunks.length - 1].status() == 'pending' && file.chunks[file.chunks.length - 1].preprocessState === 0) {\n            file.chunks[file.chunks.length - 1].send();\n            found = true;\n            return false;\n          }\n        });\n        if (found) return true;\n      } // Now, simply look for the next, best thing to upload\n\n\n      $h.each($.files, function (file) {\n        if (file.isPaused() === false) {\n          $h.each(file.chunks, function (chunk) {\n            if (chunk.status() == 'pending' && chunk.preprocessState === 0) {\n              chunk.send();\n              found = true;\n              return false;\n            }\n          });\n        }\n\n        if (found) return false;\n      });\n      if (found) return true; // The are no more outstanding chunks to upload, check is everything is done\n\n      var outstanding = false;\n      $h.each($.files, function (file) {\n        if (!file.isComplete()) {\n          outstanding = true;\n          return false;\n        }\n      });\n\n      if (!outstanding) {\n        // All chunks have been uploaded, complete\n        $.fire('complete');\n      }\n\n      return false;\n    }; // PUBLIC METHODS FOR RESUMABLE.JS\n\n\n    $.assignBrowse = function (domNodes, isDirectory) {\n      if (typeof domNodes.length == 'undefined') domNodes = [domNodes];\n      $h.each(domNodes, function (domNode) {\n        var input;\n\n        if (domNode.tagName === 'INPUT' && domNode.type === 'file') {\n          input = domNode;\n        } else {\n          input = document.createElement('input');\n          input.setAttribute('type', 'file');\n          input.style.display = 'none';\n          domNode.addEventListener('click', function () {\n            input.style.opacity = 0;\n            input.style.display = 'block';\n            input.focus();\n            input.click();\n            input.style.display = 'none';\n          }, false);\n          domNode.appendChild(input);\n        }\n\n        var maxFiles = $.getOpt('maxFiles');\n\n        if (typeof maxFiles === 'undefined' || maxFiles != 1) {\n          input.setAttribute('multiple', 'multiple');\n        } else {\n          input.removeAttribute('multiple');\n        }\n\n        if (isDirectory) {\n          input.setAttribute('webkitdirectory', 'webkitdirectory');\n        } else {\n          input.removeAttribute('webkitdirectory');\n        }\n\n        var fileTypes = $.getOpt('fileType');\n\n        if (typeof fileTypes !== 'undefined' && fileTypes.length >= 1) {\n          input.setAttribute('accept', fileTypes.map(function (e) {\n            return '.' + e;\n          }).join(','));\n        } else {\n          input.removeAttribute('accept');\n        } // When new files are added, simply append them to the overall list\n\n\n        input.addEventListener('change', function (e) {\n          appendFilesFromFileList(e.target.files, e);\n          var clearInput = $.getOpt('clearInput');\n\n          if (clearInput) {\n            e.target.value = '';\n          }\n        }, false);\n      });\n    };\n\n    $.assignDrop = function (domNodes) {\n      if (typeof domNodes.length == 'undefined') domNodes = [domNodes];\n      $h.each(domNodes, function (domNode) {\n        domNode.addEventListener('dragover', preventDefault, false);\n        domNode.addEventListener('dragenter', preventDefault, false);\n        domNode.addEventListener('drop', onDrop, false);\n      });\n    };\n\n    $.unAssignDrop = function (domNodes) {\n      if (typeof domNodes.length == 'undefined') domNodes = [domNodes];\n      $h.each(domNodes, function (domNode) {\n        domNode.removeEventListener('dragover', preventDefault);\n        domNode.removeEventListener('dragenter', preventDefault);\n        domNode.removeEventListener('drop', onDrop);\n      });\n    };\n\n    $.isUploading = function () {\n      var uploading = false;\n      $h.each($.files, function (file) {\n        if (file.isUploading()) {\n          uploading = true;\n          return false;\n        }\n      });\n      return uploading;\n    };\n\n    $.upload = function () {\n      // Make sure we don't start too many uploads at once\n      if ($.isUploading()) return; // Kick off the queue\n\n      $.fire('uploadStart');\n\n      for (var num = 1; num <= $.getOpt('simultaneousUploads'); num++) {\n        $.uploadNextChunk();\n      }\n    };\n\n    $.pause = function () {\n      // Resume all chunks currently being uploaded\n      $h.each($.files, function (file) {\n        file.abort();\n      });\n      $.fire('pause');\n    };\n\n    $.cancel = function () {\n      $.fire('beforeCancel');\n\n      for (var i = $.files.length - 1; i >= 0; i--) {\n        $.files[i].cancel();\n      }\n\n      $.fire('cancel');\n    };\n\n    $.progress = function () {\n      var totalDone = 0;\n      var totalSize = 0; // Resume all chunks currently being uploaded\n\n      $h.each($.files, function (file) {\n        totalDone += file.progress() * file.size;\n        totalSize += file.size;\n      });\n      return totalSize > 0 ? totalDone / totalSize : 0;\n    };\n\n    $.addFile = function (file, event) {\n      appendFilesFromFileList([file], event);\n    };\n\n    $.addFiles = function (files, event) {\n      appendFilesFromFileList(files, event);\n    };\n\n    $.removeFile = function (file) {\n      for (var i = $.files.length - 1; i >= 0; i--) {\n        if ($.files[i] === file) {\n          $.files.splice(i, 1);\n        }\n      }\n    };\n\n    $.getFromUniqueIdentifier = function (uniqueIdentifier) {\n      var ret = false;\n      $h.each($.files, function (f) {\n        if (f.uniqueIdentifier == uniqueIdentifier) ret = f;\n      });\n      return ret;\n    };\n\n    $.getSize = function () {\n      var totalSize = 0;\n      $h.each($.files, function (file) {\n        totalSize += file.size;\n      });\n      return totalSize;\n    };\n\n    $.handleDropEvent = function (e) {\n      onDrop(e);\n    };\n\n    $.handleChangeEvent = function (e) {\n      appendFilesFromFileList(e.target.files, e);\n      e.target.value = '';\n    };\n\n    $.updateQuery = function (query) {\n      $.opts.query = query;\n    };\n\n    return this;\n  }; // Node.js-style export for Node and Component\n\n\n  if (typeof module != 'undefined') {\n    module.exports = Resumable;\n  } else if (typeof define === \"function\" && define.amd) {\n    // AMD/requirejs: Define the module\n    define(function () {\n      return Resumable;\n    });\n  } else {\n    // Browser: Expose to window\n    window.Resumable = Resumable;\n  }\n})();","map":{"version":3,"sources":["/var/www/html/REACT_WORK/NEW_PLANETSHARE/web_planetshare/node_modules/resumablejs/resumable.js"],"names":["Resumable","opts","version","support","File","Blob","FileList","prototype","webkitSlice","mozSlice","slice","$","files","defaults","chunkSize","forceChunkSize","simultaneousUploads","fileParameterName","chunkNumberParameterName","chunkSizeParameterName","currentChunkSizeParameterName","totalSizeParameterName","typeParameterName","identifierParameterName","fileNameParameterName","relativePathParameterName","totalChunksParameterName","throttleProgressCallbacks","query","headers","preprocess","method","uploadMethod","testMethod","prioritizeFirstAndLastChunk","target","testTarget","parameterNamespace","testChunks","generateUniqueIdentifier","getTarget","maxChunkRetries","chunkRetryInterval","undefined","permanentErrors","maxFiles","withCredentials","xhrTimeout","clearInput","chunkFormat","setChunkTypeFromFile","maxFilesErrorCallback","errorCount","getOpt","alert","minFileSize","minFileSizeErrorCallback","file","fileName","name","$h","formatSize","maxFileSize","maxFileSizeErrorCallback","fileType","fileTypeErrorCallback","o","$opt","Array","options","each","option","ResumableChunk","fileObj","ResumableFile","resumableObj","events","on","event","callback","push","toLowerCase","fire","args","i","arguments","length","apply","stopEvent","e","stopPropagation","preventDefault","custom","relativePath","webkitRelativePath","size","replace","contains","array","test","result","value","toFixed","request","params","separator","indexOf","joinedParams","join","onDrop","dataTransfer","items","loadFiles","processItem","item","path","cb","entry","isFile","isDirectory","webkitGetAsEntry","processDirectory","getAsFile","processCallbacks","directory","dirReader","createReader","readEntries","entries","map","bind","call","appendFilesFromFileList","fileList","removeFile","filesSkipped","remaining","decreaseReamining","window","setTimeout","fileTypeFound","index","extension","addFile","uniqueIdentifier","getFromUniqueIdentifier","f","container","srcElement","then","_prevProgress","_pause","_error","chunkEvent","message","abort","chunks","isComplete","abortCount","c","status","cancel","_chunks","uploadNextChunk","retry","bootstrap","firedRetry","upload","round","Math","ceil","floor","maxOffset","max","offset","progress","ret","error","isUploading","uploading","chunk","outstanding","preprocessState","pause","isPaused","fileObjSize","fileObjType","type","lastProgressCallback","Date","tested","retries","pendingRetry","loaded","startByte","endByte","min","xhr","XMLHttpRequest","testHandler","send","addEventListener","customQuery","k","v","encodeURIComponent","concat","filter","pair","open","timeout","customHeaders","setRequestHeader","preprocessFinished","doneHandler","retryInterval","reduce","func","bytes","data","FormData","append","fr","FileReader","onload","readAsDataURL","readyState","responseText","relative","factor","s","found","assignBrowse","domNodes","domNode","input","tagName","document","createElement","setAttribute","style","display","opacity","focus","click","appendChild","removeAttribute","fileTypes","assignDrop","unAssignDrop","removeEventListener","num","totalDone","totalSize","addFiles","splice","getSize","handleDropEvent","handleChangeEvent","updateQuery","module","exports","define","amd"],"mappings":"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","sourcesContent":["/*\n* MIT Licensed\n* http://www.23developer.com/opensource\n* http://github.com/23/resumable.js\n* Steffen Tiedemann Christensen, steffen@23company.com\n*/\n\n(function(){\n\"use strict\";\n\n  var Resumable = function(opts){\n    if ( !(this instanceof Resumable) ) {\n      return new Resumable(opts);\n    }\n    this.version = 1.0;\n    // SUPPORTED BY BROWSER?\n    // Check if these features are support by the browser:\n    // - File object type\n    // - Blob object type\n    // - FileList object type\n    // - slicing files\n    this.support = (\n                   (typeof(File)!=='undefined')\n                   &&\n                   (typeof(Blob)!=='undefined')\n                   &&\n                   (typeof(FileList)!=='undefined')\n                   &&\n                   (!!Blob.prototype.webkitSlice||!!Blob.prototype.mozSlice||!!Blob.prototype.slice||false)\n                   );\n    if(!this.support) return(false);\n\n\n    // PROPERTIES\n    var $ = this;\n    $.files = [];\n    $.defaults = {\n      chunkSize:1*1024*1024,\n      forceChunkSize:false,\n      simultaneousUploads:3,\n      fileParameterName:'file',\n      chunkNumberParameterName: 'resumableChunkNumber',\n      chunkSizeParameterName: 'resumableChunkSize',\n      currentChunkSizeParameterName: 'resumableCurrentChunkSize',\n      totalSizeParameterName: 'resumableTotalSize',\n      typeParameterName: 'resumableType',\n      identifierParameterName: 'resumableIdentifier',\n      fileNameParameterName: 'resumableFilename',\n      relativePathParameterName: 'resumableRelativePath',\n      totalChunksParameterName: 'resumableTotalChunks',\n      throttleProgressCallbacks: 0.5,\n      query:{},\n      headers:{},\n      preprocess:null,\n      method:'multipart',\n      uploadMethod: 'POST',\n      testMethod: 'GET',\n      prioritizeFirstAndLastChunk:false,\n      target:'/',\n      testTarget: null,\n      parameterNamespace:'',\n      testChunks:true,\n      generateUniqueIdentifier:null,\n      getTarget:null,\n      maxChunkRetries:100,\n      chunkRetryInterval:undefined,\n      permanentErrors:[400, 404, 415, 500, 501],\n      maxFiles:undefined,\n      withCredentials:false,\n      xhrTimeout:0,\n      clearInput:true,\n      chunkFormat:'blob',\n      setChunkTypeFromFile:false,\n      maxFilesErrorCallback:function (files, errorCount) {\n        var maxFiles = $.getOpt('maxFiles');\n        alert('Please upload no more than ' + maxFiles + ' file' + (maxFiles === 1 ? '' : 's') + ' at a time.');\n      },\n      minFileSize:1,\n      minFileSizeErrorCallback:function(file, errorCount) {\n        alert(file.fileName||file.name +' is too small, please upload files larger than ' + $h.formatSize($.getOpt('minFileSize')) + '.');\n      },\n      maxFileSize:undefined,\n      maxFileSizeErrorCallback:function(file, errorCount) {\n        alert(file.fileName||file.name +' is too large, please upload files less than ' + $h.formatSize($.getOpt('maxFileSize')) + '.');\n      },\n      fileType: [],\n      fileTypeErrorCallback: function(file, errorCount) {\n        alert(file.fileName||file.name +' has type not allowed, please upload files of type ' + $.getOpt('fileType') + '.');\n      }\n    };\n    $.opts = opts||{};\n    $.getOpt = function(o) {\n      var $opt = this;\n      // Get multiple option if passed an array\n      if(o instanceof Array) {\n        var options = {};\n        $h.each(o, function(option){\n          options[option] = $opt.getOpt(option);\n        });\n        return options;\n      }\n      // Otherwise, just return a simple option\n      if ($opt instanceof ResumableChunk) {\n        if (typeof $opt.opts[o] !== 'undefined') { return $opt.opts[o]; }\n        else { $opt = $opt.fileObj; }\n      }\n      if ($opt instanceof ResumableFile) {\n        if (typeof $opt.opts[o] !== 'undefined') { return $opt.opts[o]; }\n        else { $opt = $opt.resumableObj; }\n      }\n      if ($opt instanceof Resumable) {\n        if (typeof $opt.opts[o] !== 'undefined') { return $opt.opts[o]; }\n        else { return $opt.defaults[o]; }\n      }\n    };\n\n    // EVENTS\n    // catchAll(event, ...)\n    // fileSuccess(file), fileProgress(file), fileAdded(file, event), filesAdded(files, filesSkipped), fileRetry(file),\n    // fileError(file, message), complete(), progress(), error(message, file), pause()\n    $.events = [];\n    $.on = function(event,callback){\n      $.events.push(event.toLowerCase(), callback);\n    };\n    $.fire = function(){\n      // `arguments` is an object, not array, in FF, so:\n      var args = [];\n      for (var i=0; i<arguments.length; i++) args.push(arguments[i]);\n      // Find event listeners, and support pseudo-event `catchAll`\n      var event = args[0].toLowerCase();\n      for (var i=0; i<=$.events.length; i+=2) {\n        if($.events[i]==event) $.events[i+1].apply($,args.slice(1));\n        if($.events[i]=='catchall') $.events[i+1].apply(null,args);\n      }\n      if(event=='fileerror') $.fire('error', args[2], args[1]);\n      if(event=='fileprogress') $.fire('progress');\n    };\n\n\n    // INTERNAL HELPER METHODS (handy, but ultimately not part of uploading)\n    var $h = {\n      stopEvent: function(e){\n        e.stopPropagation();\n        e.preventDefault();\n      },\n      each: function(o,callback){\n        if(typeof(o.length)!=='undefined') {\n          for (var i=0; i<o.length; i++) {\n            // Array or FileList\n            if(callback(o[i])===false) return;\n          }\n        } else {\n          for (i in o) {\n            // Object\n            if(callback(i,o[i])===false) return;\n          }\n        }\n      },\n      generateUniqueIdentifier:function(file, event){\n        var custom = $.getOpt('generateUniqueIdentifier');\n        if(typeof custom === 'function') {\n          return custom(file, event);\n        }\n        var relativePath = file.webkitRelativePath||file.fileName||file.name; // Some confusion in different versions of Firefox\n        var size = file.size;\n        return(size + '-' + relativePath.replace(/[^0-9a-zA-Z_-]/img, ''));\n      },\n      contains:function(array,test) {\n        var result = false;\n\n        $h.each(array, function(value) {\n          if (value == test) {\n            result = true;\n            return false;\n          }\n          return true;\n        });\n\n        return result;\n      },\n      formatSize:function(size){\n        if(size<1024) {\n          return size + ' bytes';\n        } else if(size<1024*1024) {\n          return (size/1024.0).toFixed(0) + ' KB';\n        } else if(size<1024*1024*1024) {\n          return (size/1024.0/1024.0).toFixed(1) + ' MB';\n        } else {\n          return (size/1024.0/1024.0/1024.0).toFixed(1) + ' GB';\n        }\n      },\n      getTarget:function(request, params){\n        var target = $.getOpt('target');\n\n        if (request === 'test' && $.getOpt('testTarget')) {\n          target = $.getOpt('testTarget') === '/' ? $.getOpt('target') : $.getOpt('testTarget');\n        }\n\n        if (typeof target === 'function') {\n          return target(params);\n        }\n\n        var separator = target.indexOf('?') < 0 ? '?' : '&';\n        var joinedParams = params.join('&');\n\n        return target + separator + joinedParams;\n      }\n    };\n\n    var onDrop = function(event){\n      $h.stopEvent(event);\n\n      //handle dropped things as items if we can (this lets us deal with folders nicer in some cases)\n      if (event.dataTransfer && event.dataTransfer.items) {\n        loadFiles(event.dataTransfer.items, event);\n      }\n      //else handle them as files\n      else if (event.dataTransfer && event.dataTransfer.files) {\n        loadFiles(event.dataTransfer.files, event);\n      }\n    };\n    var preventDefault = function(e) {\n      e.preventDefault();\n    };\n\n    /**\n     * processes a single upload item (file or directory)\n     * @param {Object} item item to upload, may be file or directory entry\n     * @param {string} path current file path\n     * @param {File[]} items list of files to append new items to\n     * @param {Function} cb callback invoked when item is processed\n     */\n    function processItem(item, path, items, cb) {\n      var entry;\n      if(item.isFile){\n        // file provided\n        return item.file(function(file){\n          file.relativePath = path + file.name;\n          items.push(file);\n          cb();\n        });\n      }else if(item.isDirectory){\n        // item is already a directory entry, just assign\n        entry = item;\n      }else if(item instanceof File) {\n        items.push(item);\n      }\n      if('function' === typeof item.webkitGetAsEntry){\n        // get entry from file object\n        entry = item.webkitGetAsEntry();\n      }\n      if(entry && entry.isDirectory){\n        // directory provided, process it\n        return processDirectory(entry, path + entry.name + '/', items, cb);\n      }\n      if('function' === typeof item.getAsFile){\n        // item represents a File object, convert it\n        item = item.getAsFile();\n        if(item instanceof File) {\n          item.relativePath = path + item.name;\n          items.push(item);\n        }\n      }\n      cb(); // indicate processing is done\n    }\n\n\n    /**\n     * cps-style list iteration.\n     * invokes all functions in list and waits for their callback to be\n     * triggered.\n     * @param  {Function[]}   items list of functions expecting callback parameter\n     * @param  {Function} cb    callback to trigger after the last callback has been invoked\n     */\n    function processCallbacks(items, cb){\n      if(!items || items.length === 0){\n        // empty or no list, invoke callback\n        return cb();\n      }\n      // invoke current function, pass the next part as continuation\n      items[0](function(){\n        processCallbacks(items.slice(1), cb);\n      });\n    }\n\n    /**\n     * recursively traverse directory and collect files to upload\n     * @param  {Object}   directory directory to process\n     * @param  {string}   path      current path\n     * @param  {File[]}   items     target list of items\n     * @param  {Function} cb        callback invoked after traversing directory\n     */\n    function processDirectory (directory, path, items, cb) {\n      var dirReader = directory.createReader();\n      dirReader.readEntries(function(entries){\n        if(!entries.length){\n          // empty directory, skip\n          return cb();\n        }\n        // process all conversion callbacks, finally invoke own one\n        processCallbacks(\n          entries.map(function(entry){\n            // bind all properties except for callback\n            return processItem.bind(null, entry, path, items);\n          }),\n          cb\n        );\n      });\n    }\n\n    /**\n     * process items to extract files to be uploaded\n     * @param  {File[]} items items to process\n     * @param  {Event} event event that led to upload\n     */\n    function loadFiles(items, event) {\n      if(!items.length){\n        return; // nothing to do\n      }\n      $.fire('beforeAdd');\n      var files = [];\n      processCallbacks(\n          Array.prototype.map.call(items, function(item){\n            // bind all properties except for callback\n            return processItem.bind(null, item, \"\", files);\n          }),\n          function(){\n            if(files.length){\n              // at least one file found\n              appendFilesFromFileList(files, event);\n            }\n          }\n      );\n    };\n\n    var appendFilesFromFileList = function(fileList, event){\n      // check for uploading too many files\n      var errorCount = 0;\n      var o = $.getOpt(['maxFiles', 'minFileSize', 'maxFileSize', 'maxFilesErrorCallback', 'minFileSizeErrorCallback', 'maxFileSizeErrorCallback', 'fileType', 'fileTypeErrorCallback']);\n      if (typeof(o.maxFiles)!=='undefined' && o.maxFiles<(fileList.length+$.files.length)) {\n        // if single-file upload, file is already added, and trying to add 1 new file, simply replace the already-added file\n        if (o.maxFiles===1 && $.files.length===1 && fileList.length===1) {\n          $.removeFile($.files[0]);\n        } else {\n          o.maxFilesErrorCallback(fileList, errorCount++);\n          return false;\n        }\n      }\n      var files = [], filesSkipped = [], remaining = fileList.length;\n      var decreaseReamining = function(){\n        if(!--remaining){\n          // all files processed, trigger event\n          if(!files.length && !filesSkipped.length){\n            // no succeeded files, just skip\n            return;\n          }\n          window.setTimeout(function(){\n            $.fire('filesAdded', files, filesSkipped);\n          },0);\n        }\n      };\n      $h.each(fileList, function(file){\n        var fileName = file.name;\n        if(o.fileType.length > 0){\n          var fileTypeFound = false;\n          for(var index in o.fileType){\n            var extension = '.' + o.fileType[index];\n\t\t\tif(fileName.toLowerCase().indexOf(extension.toLowerCase(), fileName.length - extension.length) !== -1){\n              fileTypeFound = true;\n              break;\n            }\n          }\n          if (!fileTypeFound) {\n            o.fileTypeErrorCallback(file, errorCount++);\n            return false;\n          }\n        }\n\n        if (typeof(o.minFileSize)!=='undefined' && file.size<o.minFileSize) {\n          o.minFileSizeErrorCallback(file, errorCount++);\n          return false;\n        }\n        if (typeof(o.maxFileSize)!=='undefined' && file.size>o.maxFileSize) {\n          o.maxFileSizeErrorCallback(file, errorCount++);\n          return false;\n        }\n\n        function addFile(uniqueIdentifier){\n          if (!$.getFromUniqueIdentifier(uniqueIdentifier)) {(function(){\n            file.uniqueIdentifier = uniqueIdentifier;\n            var f = new ResumableFile($, file, uniqueIdentifier);\n            $.files.push(f);\n            files.push(f);\n            f.container = (typeof event != 'undefined' ? event.srcElement : null);\n            window.setTimeout(function(){\n              $.fire('fileAdded', f, event)\n            },0);\n          })()} else {\n            filesSkipped.push(file);\n          };\n          decreaseReamining();\n        }\n        // directories have size == 0\n        var uniqueIdentifier = $h.generateUniqueIdentifier(file, event);\n        if(uniqueIdentifier && typeof uniqueIdentifier.then === 'function'){\n          // Promise or Promise-like object provided as unique identifier\n          uniqueIdentifier\n          .then(\n            function(uniqueIdentifier){\n              // unique identifier generation succeeded\n              addFile(uniqueIdentifier);\n            },\n           function(){\n              // unique identifier generation failed\n              // skip further processing, only decrease file count\n              decreaseReamining();\n            }\n          );\n        }else{\n          // non-Promise provided as unique identifier, process synchronously\n          addFile(uniqueIdentifier);\n        }\n      });\n    };\n\n    // INTERNAL OBJECT TYPES\n    function ResumableFile(resumableObj, file, uniqueIdentifier){\n      var $ = this;\n      $.opts = {};\n      $.getOpt = resumableObj.getOpt;\n      $._prevProgress = 0;\n      $.resumableObj = resumableObj;\n      $.file = file;\n      $.fileName = file.fileName||file.name; // Some confusion in different versions of Firefox\n      $.size = file.size;\n      $.relativePath = file.relativePath || file.webkitRelativePath || $.fileName;\n      $.uniqueIdentifier = uniqueIdentifier;\n      $._pause = false;\n      $.container = '';\n      var _error = uniqueIdentifier !== undefined;\n\n      // Callback when something happens within the chunk\n      var chunkEvent = function(event, message){\n        // event can be 'progress', 'success', 'error' or 'retry'\n        switch(event){\n        case 'progress':\n          $.resumableObj.fire('fileProgress', $, message);\n          break;\n        case 'error':\n          $.abort();\n          _error = true;\n          $.chunks = [];\n          $.resumableObj.fire('fileError', $, message);\n          break;\n        case 'success':\n          if(_error) return;\n          $.resumableObj.fire('fileProgress', $); // it's at least progress\n          if($.isComplete()) {\n            $.resumableObj.fire('fileSuccess', $, message);\n          }\n          break;\n        case 'retry':\n          $.resumableObj.fire('fileRetry', $);\n          break;\n        }\n      };\n\n      // Main code to set up a file object with chunks,\n      // packaged to be able to handle retries if needed.\n      $.chunks = [];\n      $.abort = function(){\n        // Stop current uploads\n        var abortCount = 0;\n        $h.each($.chunks, function(c){\n          if(c.status()=='uploading') {\n            c.abort();\n            abortCount++;\n          }\n        });\n        if(abortCount>0) $.resumableObj.fire('fileProgress', $);\n      };\n      $.cancel = function(){\n        // Reset this file to be void\n        var _chunks = $.chunks;\n        $.chunks = [];\n        // Stop current uploads\n        $h.each(_chunks, function(c){\n          if(c.status()=='uploading')  {\n            c.abort();\n            $.resumableObj.uploadNextChunk();\n          }\n        });\n        $.resumableObj.removeFile($);\n        $.resumableObj.fire('fileProgress', $);\n      };\n      $.retry = function(){\n        $.bootstrap();\n        var firedRetry = false;\n        $.resumableObj.on('chunkingComplete', function(){\n          if(!firedRetry) $.resumableObj.upload();\n          firedRetry = true;\n        });\n      };\n      $.bootstrap = function(){\n        $.abort();\n        _error = false;\n        // Rebuild stack of chunks from file\n        $.chunks = [];\n        $._prevProgress = 0;\n        var round = $.getOpt('forceChunkSize') ? Math.ceil : Math.floor;\n        var maxOffset = Math.max(round($.file.size/$.getOpt('chunkSize')),1);\n        for (var offset=0; offset<maxOffset; offset++) {(function(offset){\n            window.setTimeout(function(){\n                $.chunks.push(new ResumableChunk($.resumableObj, $, offset, chunkEvent));\n                $.resumableObj.fire('chunkingProgress',$,offset/maxOffset);\n            },0);\n        })(offset)}\n        window.setTimeout(function(){\n            $.resumableObj.fire('chunkingComplete',$);\n        },0);\n      };\n      $.progress = function(){\n        if(_error) return(1);\n        // Sum up progress across everything\n        var ret = 0;\n        var error = false;\n        $h.each($.chunks, function(c){\n          if(c.status()=='error') error = true;\n          ret += c.progress(true); // get chunk progress relative to entire file\n        });\n        ret = (error ? 1 : (ret>0.99999 ? 1 : ret));\n        ret = Math.max($._prevProgress, ret); // We don't want to lose percentages when an upload is paused\n        $._prevProgress = ret;\n        return(ret);\n      };\n      $.isUploading = function(){\n        var uploading = false;\n        $h.each($.chunks, function(chunk){\n          if(chunk.status()=='uploading') {\n            uploading = true;\n            return(false);\n          }\n        });\n        return(uploading);\n      };\n      $.isComplete = function(){\n        var outstanding = false;\n        $h.each($.chunks, function(chunk){\n          var status = chunk.status();\n          if(status=='pending' || status=='uploading' || chunk.preprocessState === 1) {\n            outstanding = true;\n            return(false);\n          }\n        });\n        return(!outstanding);\n      };\n      $.pause = function(pause){\n          if(typeof(pause)==='undefined'){\n              $._pause = ($._pause ? false : true);\n          }else{\n              $._pause = pause;\n          }\n      };\n      $.isPaused = function() {\n        return $._pause;\n      };\n\n\n      // Bootstrap and return\n      $.resumableObj.fire('chunkingStart', $);\n      $.bootstrap();\n      return(this);\n    }\n\n\n    function ResumableChunk(resumableObj, fileObj, offset, callback){\n      var $ = this;\n      $.opts = {};\n      $.getOpt = resumableObj.getOpt;\n      $.resumableObj = resumableObj;\n      $.fileObj = fileObj;\n      $.fileObjSize = fileObj.size;\n      $.fileObjType = fileObj.file.type;\n      $.offset = offset;\n      $.callback = callback;\n      $.lastProgressCallback = (new Date);\n      $.tested = false;\n      $.retries = 0;\n      $.pendingRetry = false;\n      $.preprocessState = 0; // 0 = unprocessed, 1 = processing, 2 = finished\n\n      // Computed properties\n      var chunkSize = $.getOpt('chunkSize');\n      $.loaded = 0;\n      $.startByte = $.offset*chunkSize;\n      $.endByte = Math.min($.fileObjSize, ($.offset+1)*chunkSize);\n      if ($.fileObjSize-$.endByte < chunkSize && !$.getOpt('forceChunkSize')) {\n        // The last chunk will be bigger than the chunk size, but less than 2*chunkSize\n        $.endByte = $.fileObjSize;\n      }\n      $.xhr = null;\n\n      // test() makes a GET request without any data to see if the chunk has already been uploaded in a previous session\n      $.test = function(){\n        // Set up request and listen for event\n        $.xhr = new XMLHttpRequest();\n\n        var testHandler = function(e){\n          $.tested = true;\n          var status = $.status();\n          if(status=='success') {\n            $.callback(status, $.message());\n            $.resumableObj.uploadNextChunk();\n          } else {\n            $.send();\n          }\n        };\n        $.xhr.addEventListener('load', testHandler, false);\n        $.xhr.addEventListener('error', testHandler, false);\n        $.xhr.addEventListener('timeout', testHandler, false);\n\n        // Add data from the query options\n        var params = [];\n        var parameterNamespace = $.getOpt('parameterNamespace');\n        var customQuery = $.getOpt('query');\n        if(typeof customQuery == 'function') customQuery = customQuery($.fileObj, $);\n        $h.each(customQuery, function(k,v){\n          params.push([encodeURIComponent(parameterNamespace+k), encodeURIComponent(v)].join('='));\n        });\n        // Add extra data to identify chunk\n        params = params.concat(\n          [\n            // define key/value pairs for additional parameters\n            ['chunkNumberParameterName', $.offset + 1],\n            ['chunkSizeParameterName', $.getOpt('chunkSize')],\n            ['currentChunkSizeParameterName', $.endByte - $.startByte],\n            ['totalSizeParameterName', $.fileObjSize],\n            ['typeParameterName', $.fileObjType],\n            ['identifierParameterName', $.fileObj.uniqueIdentifier],\n            ['fileNameParameterName', $.fileObj.fileName],\n            ['relativePathParameterName', $.fileObj.relativePath],\n            ['totalChunksParameterName', $.fileObj.chunks.length]\n          ].filter(function(pair){\n            // include items that resolve to truthy values\n            // i.e. exclude false, null, undefined and empty strings\n            return $.getOpt(pair[0]);\n          })\n          .map(function(pair){\n            // map each key/value pair to its final form\n            return [\n              parameterNamespace + $.getOpt(pair[0]),\n              encodeURIComponent(pair[1])\n            ].join('=');\n          })\n        );\n        // Append the relevant chunk and send it\n        $.xhr.open($.getOpt('testMethod'), $h.getTarget('test', params));\n        $.xhr.timeout = $.getOpt('xhrTimeout');\n        $.xhr.withCredentials = $.getOpt('withCredentials');\n        // Add data from header options\n        var customHeaders = $.getOpt('headers');\n        if(typeof customHeaders === 'function') {\n          customHeaders = customHeaders($.fileObj, $);\n        }\n        $h.each(customHeaders, function(k,v) {\n          $.xhr.setRequestHeader(k, v);\n        });\n        $.xhr.send(null);\n      };\n\n      $.preprocessFinished = function(){\n        $.preprocessState = 2;\n        $.send();\n      };\n\n      // send() uploads the actual data in a POST call\n      $.send = function(){\n        var preprocess = $.getOpt('preprocess');\n        if(typeof preprocess === 'function') {\n          switch($.preprocessState) {\n          case 0: $.preprocessState = 1; preprocess($); return;\n          case 1: return;\n          case 2: break;\n          }\n        }\n        if($.getOpt('testChunks') && !$.tested) {\n          $.test();\n          return;\n        }\n\n        // Set up request and listen for event\n        $.xhr = new XMLHttpRequest();\n\n        // Progress\n        $.xhr.upload.addEventListener('progress', function(e){\n          if( (new Date) - $.lastProgressCallback > $.getOpt('throttleProgressCallbacks') * 1000 ) {\n            $.callback('progress');\n            $.lastProgressCallback = (new Date);\n          }\n          $.loaded=e.loaded||0;\n        }, false);\n        $.loaded = 0;\n        $.pendingRetry = false;\n        $.callback('progress');\n\n        // Done (either done, failed or retry)\n        var doneHandler = function(e){\n          var status = $.status();\n          if(status=='success'||status=='error') {\n            $.callback(status, $.message());\n            $.resumableObj.uploadNextChunk();\n          } else {\n            $.callback('retry', $.message());\n            $.abort();\n            $.retries++;\n            var retryInterval = $.getOpt('chunkRetryInterval');\n            if(retryInterval !== undefined) {\n              $.pendingRetry = true;\n              setTimeout($.send, retryInterval);\n            } else {\n              $.send();\n            }\n          }\n        };\n        $.xhr.addEventListener('load', doneHandler, false);\n        $.xhr.addEventListener('error', doneHandler, false);\n        $.xhr.addEventListener('timeout', doneHandler, false);\n\n        // Set up the basic query data from Resumable\n        var query = [\n          ['chunkNumberParameterName', $.offset + 1],\n          ['chunkSizeParameterName', $.getOpt('chunkSize')],\n          ['currentChunkSizeParameterName', $.endByte - $.startByte],\n          ['totalSizeParameterName', $.fileObjSize],\n          ['typeParameterName', $.fileObjType],\n          ['identifierParameterName', $.fileObj.uniqueIdentifier],\n          ['fileNameParameterName', $.fileObj.fileName],\n          ['relativePathParameterName', $.fileObj.relativePath],\n          ['totalChunksParameterName', $.fileObj.chunks.length],\n        ].filter(function(pair){\n          // include items that resolve to truthy values\n          // i.e. exclude false, null, undefined and empty strings\n          return $.getOpt(pair[0]);\n        })\n        .reduce(function(query, pair){\n          // assign query key/value\n          query[$.getOpt(pair[0])] = pair[1];\n          return query;\n        }, {});\n        // Mix in custom data\n        var customQuery = $.getOpt('query');\n        if(typeof customQuery == 'function') customQuery = customQuery($.fileObj, $);\n        $h.each(customQuery, function(k,v){\n          query[k] = v;\n        });\n\n        var func = ($.fileObj.file.slice ? 'slice' : ($.fileObj.file.mozSlice ? 'mozSlice' : ($.fileObj.file.webkitSlice ? 'webkitSlice' : 'slice')));\n        var bytes = $.fileObj.file[func]($.startByte, $.endByte, $.getOpt('setChunkTypeFromFile') ? $.fileObj.file.type : \"\");\n        var data = null;\n        var params = [];\n\n        var parameterNamespace = $.getOpt('parameterNamespace');\n                if ($.getOpt('method') === 'octet') {\n                    // Add data from the query options\n                    data = bytes;\n                    $h.each(query, function (k, v) {\n                        params.push([encodeURIComponent(parameterNamespace + k), encodeURIComponent(v)].join('='));\n                    });\n                } else {\n                    // Add data from the query options\n                    data = new FormData();\n                    $h.each(query, function (k, v) {\n                        data.append(parameterNamespace + k, v);\n                        params.push([encodeURIComponent(parameterNamespace + k), encodeURIComponent(v)].join('='));\n                    });\n                    if ($.getOpt('chunkFormat') == 'blob') {\n                        data.append(parameterNamespace + $.getOpt('fileParameterName'), bytes, $.fileObj.fileName);\n                    }\n                    else if ($.getOpt('chunkFormat') == 'base64') {\n                        var fr = new FileReader();\n                        fr.onload = function (e) {\n                            data.append(parameterNamespace + $.getOpt('fileParameterName'), fr.result);\n                            $.xhr.send(data);\n                        }\n                        fr.readAsDataURL(bytes);\n                    }\n                }\n\n        var target = $h.getTarget('upload', params);\n        var method = $.getOpt('uploadMethod');\n\n        $.xhr.open(method, target);\n        if ($.getOpt('method') === 'octet') {\n          $.xhr.setRequestHeader('Content-Type', 'application/octet-stream');\n        }\n        $.xhr.timeout = $.getOpt('xhrTimeout');\n        $.xhr.withCredentials = $.getOpt('withCredentials');\n        // Add data from header options\n        var customHeaders = $.getOpt('headers');\n        if(typeof customHeaders === 'function') {\n          customHeaders = customHeaders($.fileObj, $);\n        }\n\n        $h.each(customHeaders, function(k,v) {\n          $.xhr.setRequestHeader(k, v);\n        });\n\n                if ($.getOpt('chunkFormat') == 'blob') {\n                    $.xhr.send(data);\n                }\n      };\n      $.abort = function(){\n        // Abort and reset\n        if($.xhr) $.xhr.abort();\n        $.xhr = null;\n      };\n      $.status = function(){\n        // Returns: 'pending', 'uploading', 'success', 'error'\n        if($.pendingRetry) {\n          // if pending retry then that's effectively the same as actively uploading,\n          // there might just be a slight delay before the retry starts\n          return('uploading');\n        } else if(!$.xhr) {\n          return('pending');\n        } else if($.xhr.readyState<4) {\n          // Status is really 'OPENED', 'HEADERS_RECEIVED' or 'LOADING' - meaning that stuff is happening\n          return('uploading');\n        } else {\n          if($.xhr.status == 200 || $.xhr.status == 201) {\n            // HTTP 200, 201 (created)\n            return('success');\n          } else if($h.contains($.getOpt('permanentErrors'), $.xhr.status) || $.retries >= $.getOpt('maxChunkRetries')) {\n            // HTTP 415/500/501, permanent error\n            return('error');\n          } else {\n            // this should never happen, but we'll reset and queue a retry\n            // a likely case for this would be 503 service unavailable\n            $.abort();\n            return('pending');\n          }\n        }\n      };\n      $.message = function(){\n        return($.xhr ? $.xhr.responseText : '');\n      };\n      $.progress = function(relative){\n        if(typeof(relative)==='undefined') relative = false;\n        var factor = (relative ? ($.endByte-$.startByte)/$.fileObjSize : 1);\n        if($.pendingRetry) return(0);\n        if(!$.xhr || !$.xhr.status) factor*=.95;\n        var s = $.status();\n        switch(s){\n        case 'success':\n        case 'error':\n          return(1*factor);\n        case 'pending':\n          return(0*factor);\n        default:\n          return($.loaded/($.endByte-$.startByte)*factor);\n        }\n      };\n      return(this);\n    }\n\n    // QUEUE\n    $.uploadNextChunk = function(){\n      var found = false;\n\n      // In some cases (such as videos) it's really handy to upload the first\n      // and last chunk of a file quickly; this let's the server check the file's\n      // metadata and determine if there's even a point in continuing.\n      if ($.getOpt('prioritizeFirstAndLastChunk')) {\n        $h.each($.files, function(file){\n          if(file.chunks.length && file.chunks[0].status()=='pending' && file.chunks[0].preprocessState === 0) {\n            file.chunks[0].send();\n            found = true;\n            return(false);\n          }\n          if(file.chunks.length>1 && file.chunks[file.chunks.length-1].status()=='pending' && file.chunks[file.chunks.length-1].preprocessState === 0) {\n            file.chunks[file.chunks.length-1].send();\n            found = true;\n            return(false);\n          }\n        });\n        if(found) return(true);\n      }\n\n      // Now, simply look for the next, best thing to upload\n      $h.each($.files, function(file){\n        if(file.isPaused()===false){\n         $h.each(file.chunks, function(chunk){\n           if(chunk.status()=='pending' && chunk.preprocessState === 0) {\n             chunk.send();\n             found = true;\n             return(false);\n           }\n          });\n        }\n        if(found) return(false);\n      });\n      if(found) return(true);\n\n      // The are no more outstanding chunks to upload, check is everything is done\n      var outstanding = false;\n      $h.each($.files, function(file){\n        if(!file.isComplete()) {\n          outstanding = true;\n          return(false);\n        }\n      });\n      if(!outstanding) {\n        // All chunks have been uploaded, complete\n        $.fire('complete');\n      }\n      return(false);\n    };\n\n\n    // PUBLIC METHODS FOR RESUMABLE.JS\n    $.assignBrowse = function(domNodes, isDirectory){\n      if(typeof(domNodes.length)=='undefined') domNodes = [domNodes];\n\n      $h.each(domNodes, function(domNode) {\n        var input;\n        if(domNode.tagName==='INPUT' && domNode.type==='file'){\n          input = domNode;\n        } else {\n          input = document.createElement('input');\n          input.setAttribute('type', 'file');\n          input.style.display = 'none';\n          domNode.addEventListener('click', function(){\n            input.style.opacity = 0;\n            input.style.display='block';\n            input.focus();\n            input.click();\n            input.style.display='none';\n          }, false);\n          domNode.appendChild(input);\n        }\n        var maxFiles = $.getOpt('maxFiles');\n        if (typeof(maxFiles)==='undefined'||maxFiles!=1){\n          input.setAttribute('multiple', 'multiple');\n        } else {\n          input.removeAttribute('multiple');\n        }\n        if(isDirectory){\n          input.setAttribute('webkitdirectory', 'webkitdirectory');\n        } else {\n          input.removeAttribute('webkitdirectory');\n        }\n        var fileTypes = $.getOpt('fileType');\n        if (typeof (fileTypes) !== 'undefined' && fileTypes.length >= 1) {\n          input.setAttribute('accept', fileTypes.map(function (e) { return '.' + e }).join(','));\n        }\n        else {\n          input.removeAttribute('accept');\n        }\n        // When new files are added, simply append them to the overall list\n        input.addEventListener('change', function(e){\n          appendFilesFromFileList(e.target.files,e);\n          var clearInput = $.getOpt('clearInput');\n          if (clearInput) {\n            e.target.value = '';\n          }\n        }, false);\n      });\n    };\n    $.assignDrop = function(domNodes){\n      if(typeof(domNodes.length)=='undefined') domNodes = [domNodes];\n\n      $h.each(domNodes, function(domNode) {\n        domNode.addEventListener('dragover', preventDefault, false);\n        domNode.addEventListener('dragenter', preventDefault, false);\n        domNode.addEventListener('drop', onDrop, false);\n      });\n    };\n    $.unAssignDrop = function(domNodes) {\n      if (typeof(domNodes.length) == 'undefined') domNodes = [domNodes];\n\n      $h.each(domNodes, function(domNode) {\n        domNode.removeEventListener('dragover', preventDefault);\n        domNode.removeEventListener('dragenter', preventDefault);\n        domNode.removeEventListener('drop', onDrop);\n      });\n    };\n    $.isUploading = function(){\n      var uploading = false;\n      $h.each($.files, function(file){\n        if (file.isUploading()) {\n          uploading = true;\n          return(false);\n        }\n      });\n      return(uploading);\n    };\n    $.upload = function(){\n      // Make sure we don't start too many uploads at once\n      if($.isUploading()) return;\n      // Kick off the queue\n      $.fire('uploadStart');\n      for (var num=1; num<=$.getOpt('simultaneousUploads'); num++) {\n        $.uploadNextChunk();\n      }\n    };\n    $.pause = function(){\n      // Resume all chunks currently being uploaded\n      $h.each($.files, function(file){\n        file.abort();\n      });\n      $.fire('pause');\n    };\n    $.cancel = function(){\n      $.fire('beforeCancel');\n      for(var i = $.files.length - 1; i >= 0; i--) {\n        $.files[i].cancel();\n      }\n      $.fire('cancel');\n    };\n    $.progress = function(){\n      var totalDone = 0;\n      var totalSize = 0;\n      // Resume all chunks currently being uploaded\n      $h.each($.files, function(file){\n        totalDone += file.progress()*file.size;\n        totalSize += file.size;\n      });\n      return(totalSize>0 ? totalDone/totalSize : 0);\n    };\n    $.addFile = function(file, event){\n      appendFilesFromFileList([file], event);\n    };\n    $.addFiles = function(files, event){\n      appendFilesFromFileList(files, event);\n    };\n    $.removeFile = function(file){\n      for(var i = $.files.length - 1; i >= 0; i--) {\n        if($.files[i] === file) {\n          $.files.splice(i, 1);\n        }\n      }\n    };\n    $.getFromUniqueIdentifier = function(uniqueIdentifier){\n      var ret = false;\n      $h.each($.files, function(f){\n        if(f.uniqueIdentifier==uniqueIdentifier) ret = f;\n      });\n      return(ret);\n    };\n    $.getSize = function(){\n      var totalSize = 0;\n      $h.each($.files, function(file){\n        totalSize += file.size;\n      });\n      return(totalSize);\n    };\n    $.handleDropEvent = function (e) {\n      onDrop(e);\n    };\n    $.handleChangeEvent = function (e) {\n      appendFilesFromFileList(e.target.files, e);\n      e.target.value = '';\n    };\n    $.updateQuery = function(query){\n        $.opts.query = query;\n    };\n\n    return(this);\n  };\n\n\n  // Node.js-style export for Node and Component\n  if (typeof module != 'undefined') {\n    module.exports = Resumable;\n  } else if (typeof define === \"function\" && define.amd) {\n    // AMD/requirejs: Define the module\n    define(function(){\n      return Resumable;\n    });\n  } else {\n    // Browser: Expose to window\n    window.Resumable = Resumable;\n  }\n\n})();\n"]},"metadata":{},"sourceType":"script"}