{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) {\n  return typeof obj;\n} : function (obj) {\n  return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n};\n\nvar _react = require('react');\n\nvar _react2 = _interopRequireDefault(_react);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _objectWithoutProperties(obj, keys) {\n  var target = {};\n\n  for (var i in obj) {\n    if (keys.indexOf(i) >= 0) continue;\n    if (!Object.prototype.hasOwnProperty.call(obj, i)) continue;\n    target[i] = obj[i];\n  }\n\n  return target;\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n} // keyCode constants\n\n\nvar BACKSPACE = 8;\nvar LEFT_ARROW = 37;\nvar RIGHT_ARROW = 39;\nvar DELETE = 46; // Doesn't really check if it's a style Object\n// Basic implemenetation to check if it's not a string\n// of classNames and is an Object\n// TODO: Better implementation\n\nvar isStyleObject = function isStyleObject(obj) {\n  return (typeof obj === 'undefined' ? 'undefined' : _typeof(obj)) === 'object';\n};\n\nvar SingleOtpInput = function (_PureComponent) {\n  _inherits(SingleOtpInput, _PureComponent);\n\n  function SingleOtpInput() {\n    var _ref;\n\n    var _temp, _this, _ret;\n\n    _classCallCheck(this, SingleOtpInput);\n\n    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = SingleOtpInput.__proto__ || Object.getPrototypeOf(SingleOtpInput)).call.apply(_ref, [this].concat(args))), _this), _this.getClasses = function () {\n      for (var _len2 = arguments.length, classes = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n        classes[_key2] = arguments[_key2];\n      }\n\n      return classes.filter(function (c) {\n        return !isStyleObject(c) && c !== false;\n      }).join(' ');\n    }, _temp), _possibleConstructorReturn(_this, _ret);\n  }\n\n  _createClass(SingleOtpInput, [{\n    key: 'componentDidMount',\n    // Focus on first render\n    // Only when shouldAutoFocus is true\n    value: function componentDidMount() {\n      var input = this.input,\n          _props = this.props,\n          focus = _props.focus,\n          shouldAutoFocus = _props.shouldAutoFocus;\n\n      if (input && focus && shouldAutoFocus) {\n        input.focus();\n      }\n    }\n  }, {\n    key: 'componentDidUpdate',\n    value: function componentDidUpdate(prevProps) {\n      var input = this.input,\n          focus = this.props.focus; // Check if focusedInput changed\n      // Prevent calling function if input already in focus\n\n      if (prevProps.focus !== focus && input && focus) {\n        input.focus();\n        input.select();\n      }\n    }\n  }, {\n    key: 'render',\n    value: function render() {\n      var _this2 = this;\n\n      var _props2 = this.props,\n          separator = _props2.separator,\n          isLastChild = _props2.isLastChild,\n          inputStyle = _props2.inputStyle,\n          focus = _props2.focus,\n          isDisabled = _props2.isDisabled,\n          hasErrored = _props2.hasErrored,\n          errorStyle = _props2.errorStyle,\n          focusStyle = _props2.focusStyle,\n          disabledStyle = _props2.disabledStyle,\n          shouldAutoFocus = _props2.shouldAutoFocus,\n          isInputNum = _props2.isInputNum,\n          value = _props2.value,\n          rest = _objectWithoutProperties(_props2, ['separator', 'isLastChild', 'inputStyle', 'focus', 'isDisabled', 'hasErrored', 'errorStyle', 'focusStyle', 'disabledStyle', 'shouldAutoFocus', 'isInputNum', 'value']);\n\n      var numValueLimits = isInputNum ? {\n        min: 0,\n        max: 9\n      } : {};\n      return _react2.default.createElement('div', {\n        style: {\n          display: 'flex',\n          alignItems: 'center'\n        }\n      }, _react2.default.createElement('input', _extends({\n        style: Object.assign({\n          width: '1em',\n          textAlign: 'center'\n        }, isStyleObject(inputStyle) && inputStyle, focus && isStyleObject(focusStyle) && focusStyle, isDisabled && isStyleObject(disabledStyle) && disabledStyle, hasErrored && isStyleObject(errorStyle) && errorStyle),\n        className: this.getClasses(inputStyle, focus && focusStyle, isDisabled && disabledStyle, hasErrored && errorStyle),\n        type: isInputNum ? 'number' : 'tel'\n      }, numValueLimits, {\n        maxLength: '1',\n        ref: function ref(input) {\n          _this2.input = input;\n        },\n        disabled: isDisabled,\n        value: value ? value : ''\n      }, rest)), !isLastChild && separator);\n    }\n  }]);\n\n  return SingleOtpInput;\n}(_react.PureComponent);\n\nvar OtpInput = function (_Component) {\n  _inherits(OtpInput, _Component);\n\n  function OtpInput() {\n    var _ref2;\n\n    var _temp2, _this3, _ret2;\n\n    _classCallCheck(this, OtpInput);\n\n    for (var _len3 = arguments.length, args = Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {\n      args[_key3] = arguments[_key3];\n    }\n\n    return _ret2 = (_temp2 = (_this3 = _possibleConstructorReturn(this, (_ref2 = OtpInput.__proto__ || Object.getPrototypeOf(OtpInput)).call.apply(_ref2, [this].concat(args))), _this3), _this3.state = {\n      activeInput: 0\n    }, _this3.getOtpValue = function () {\n      return _this3.props.value ? _this3.props.value.toString().split('') : [];\n    }, _this3.handleOtpChange = function (otp) {\n      var _this3$props = _this3.props,\n          onChange = _this3$props.onChange,\n          isInputNum = _this3$props.isInputNum;\n      var otpValue = otp.join('');\n      onChange(isInputNum ? Number(otpValue) : otpValue);\n    }, _this3.focusInput = function (input) {\n      var numInputs = _this3.props.numInputs;\n      var activeInput = Math.max(Math.min(numInputs - 1, input), 0);\n\n      _this3.setState({\n        activeInput: activeInput\n      });\n    }, _this3.focusNextInput = function () {\n      var activeInput = _this3.state.activeInput;\n\n      _this3.focusInput(activeInput + 1);\n    }, _this3.focusPrevInput = function () {\n      var activeInput = _this3.state.activeInput;\n\n      _this3.focusInput(activeInput - 1);\n    }, _this3.changeCodeAtFocus = function (value) {\n      var activeInput = _this3.state.activeInput;\n\n      var otp = _this3.getOtpValue();\n\n      otp[activeInput] = value[0];\n\n      _this3.handleOtpChange(otp);\n    }, _this3.handleOnPaste = function (e) {\n      e.preventDefault();\n      var numInputs = _this3.props.numInputs;\n      var activeInput = _this3.state.activeInput;\n\n      var otp = _this3.getOtpValue(); // Get pastedData in an array of max size (num of inputs - current position)\n\n\n      var pastedData = e.clipboardData.getData('text/plain').slice(0, numInputs - activeInput).split(''); // Paste data from focused input onwards\n\n      for (var pos = 0; pos < numInputs; ++pos) {\n        if (pos >= activeInput && pastedData.length > 0) {\n          otp[pos] = pastedData.shift();\n        }\n      }\n\n      _this3.handleOtpChange(otp);\n    }, _this3.handleOnChange = function (e) {\n      _this3.changeCodeAtFocus(e.target.value);\n\n      _this3.focusNextInput();\n    }, _this3.handleOnKeyDown = function (e) {\n      if (e.keyCode === BACKSPACE || e.key === 'Backspace') {\n        e.preventDefault();\n\n        _this3.changeCodeAtFocus('');\n\n        _this3.focusPrevInput();\n      } else if (e.keyCode === DELETE || e.key === 'Delete') {\n        e.preventDefault();\n\n        _this3.changeCodeAtFocus('');\n      } else if (e.keyCode === LEFT_ARROW || e.key === 'ArrowLeft') {\n        e.preventDefault();\n\n        _this3.focusPrevInput();\n      } else if (e.keyCode === RIGHT_ARROW || e.key === 'ArrowRight') {\n        e.preventDefault();\n\n        _this3.focusNextInput();\n      }\n    }, _this3.checkLength = function (e) {\n      if (e.target.value.length > 1) {\n        e.preventDefault();\n\n        _this3.focusNextInput();\n      }\n    }, _this3.renderInputs = function () {\n      var activeInput = _this3.state.activeInput;\n      var _this3$props2 = _this3.props,\n          numInputs = _this3$props2.numInputs,\n          inputStyle = _this3$props2.inputStyle,\n          focusStyle = _this3$props2.focusStyle,\n          separator = _this3$props2.separator,\n          isDisabled = _this3$props2.isDisabled,\n          disabledStyle = _this3$props2.disabledStyle,\n          hasErrored = _this3$props2.hasErrored,\n          errorStyle = _this3$props2.errorStyle,\n          shouldAutoFocus = _this3$props2.shouldAutoFocus,\n          isInputNum = _this3$props2.isInputNum;\n\n      var otp = _this3.getOtpValue();\n\n      var inputs = [];\n\n      var _loop = function _loop(i) {\n        inputs.push(_react2.default.createElement(SingleOtpInput, {\n          key: i,\n          focus: activeInput === i,\n          value: otp && otp[i],\n          onChange: _this3.handleOnChange,\n          onKeyDown: _this3.handleOnKeyDown,\n          onInput: _this3.checkLength,\n          onPaste: _this3.handleOnPaste,\n          onFocus: function onFocus(e) {\n            _this3.setState({\n              activeInput: i\n            });\n\n            e.target.select();\n          },\n          onBlur: function onBlur() {\n            return _this3.setState({\n              activeInput: -1\n            });\n          },\n          separator: separator,\n          inputStyle: inputStyle,\n          focusStyle: focusStyle,\n          isLastChild: i === numInputs - 1,\n          isDisabled: isDisabled,\n          disabledStyle: disabledStyle,\n          hasErrored: hasErrored,\n          errorStyle: errorStyle,\n          shouldAutoFocus: shouldAutoFocus,\n          isInputNum: isInputNum\n        }));\n      };\n\n      for (var i = 0; i < numInputs; i++) {\n        _loop(i);\n      }\n\n      return inputs;\n    }, _temp2), _possibleConstructorReturn(_this3, _ret2);\n  } // Helper to return OTP from input\n  // Focus on input by index\n  // Focus on next input\n  // Focus on previous input\n  // Change OTP value at focused input\n  // Handle pasted OTP\n  // Handle cases of backspace, delete, left arrow, right arrow\n\n\n  _createClass(OtpInput, [{\n    key: 'render',\n    value: function render() {\n      var containerStyle = this.props.containerStyle;\n      return _react2.default.createElement('div', {\n        style: Object.assign({\n          display: 'flex'\n        }, isStyleObject(containerStyle) && containerStyle),\n        className: !isStyleObject(containerStyle) && containerStyle\n      }, this.renderInputs());\n    }\n  }]);\n\n  return OtpInput;\n}(_react.Component);\n\nOtpInput.defaultProps = {\n  numInputs: 4,\n  onChange: function onChange(otp) {\n    return console.log(otp);\n  },\n  isDisabled: false,\n  shouldAutoFocus: false,\n  value: ''\n};\nexports.default = OtpInput;","map":null,"metadata":{},"sourceType":"script"}