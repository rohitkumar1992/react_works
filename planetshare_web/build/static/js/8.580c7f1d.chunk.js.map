{"version":3,"sources":["../node_modules/laravel-echo/dist/echo.js"],"names":["classCallCheck","instance","Constructor","TypeError","createClass","defineProperties","target","props","i","length","descriptor","enumerable","configurable","writable","Object","defineProperty","key","protoProps","staticProps","prototype","_extends","assign","arguments","source","hasOwnProperty","call","inherits","subClass","superClass","create","constructor","value","setPrototypeOf","__proto__","possibleConstructorReturn","self","ReferenceError","Connector","options","this","_defaultOptions","auth","headers","authEndpoint","broadcaster","csrfToken","host","namespace","setOptions","connect","selector","window","document","querySelector","getAttribute","Channel","event","callback","listen","stopListening","EventFormatter","setNamespace","charAt","substr","replace","PusherChannel","_Channel","pusher","name","_this","getPrototypeOf","eventFormatter","subscribe","subscription","unsubscribe","on","format","unbind","bind","PusherPrivateChannel","_PusherChannel","apply","eventName","data","channels","trigger","PusherPresenceChannel","keys","members","map","k","member","info","SocketIoChannel","socket","events","configureReconnector","emit","channel","removeListener","_this2","listener","_this3","push","_this4","forEach","SocketIoPrivateChannel","_SocketIoChannel","SocketIoPresenceChannel","_SocketIoPrivateChann","m","user_info","NullChannel","NullPrivateChannel","_NullChannel","NullPresenceChannel","PusherConnector","_Connector","client","Pusher","index","leaveChannel","connection","socket_id","disconnect","SocketIoConnector","io","getSocketIO","Error","id","NullConnector","Echo","withoutInterceptors","registerInterceptors","_channel","connector","presenceChannel","leave","privateChannel","socketId","Vue","http","registerVueRequestInterceptor","axios","registerAxiosRequestInterceptor","jQuery","registerjQueryAjaxSetup","interceptors","request","next","set","use","config","ajax","ajaxPrefilter","originalOptions","xhr","setRequestHeader"],"mappings":"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","file":"static/js/8.580c7f1d.chunk.js","sourcesContent":["var classCallCheck = function classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n};\n\nvar createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nvar _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n\nvar inherits = function inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n};\n\nvar possibleConstructorReturn = function possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n};\n\nvar Connector = function () {\n  /**\n   * Create a new class instance.\n   */\n  function Connector(options) {\n    classCallCheck(this, Connector);\n    /**\n     * Default connector options.\n     */\n\n    this._defaultOptions = {\n      auth: {\n        headers: {}\n      },\n      authEndpoint: '/broadcasting/auth',\n      broadcaster: 'pusher',\n      csrfToken: null,\n      host: null,\n      key: null,\n      namespace: 'App.Events'\n    };\n    this.setOptions(options);\n    this.connect();\n  }\n  /**\n   * Merge the custom options with the defaults.\n   */\n\n\n  createClass(Connector, [{\n    key: 'setOptions',\n    value: function setOptions(options) {\n      this.options = _extends(this._defaultOptions, options);\n\n      if (this.csrfToken()) {\n        this.options.auth.headers['X-CSRF-TOKEN'] = this.csrfToken();\n      }\n\n      return options;\n    }\n    /**\n     * Extract the CSRF token from the page.\n     */\n\n  }, {\n    key: 'csrfToken',\n    value: function csrfToken() {\n      var selector = void 0;\n\n      if (typeof window !== 'undefined' && window['Laravel'] && window['Laravel'].csrfToken) {\n        return window['Laravel'].csrfToken;\n      } else if (this.options.csrfToken) {\n        return this.options.csrfToken;\n      } else if (typeof document !== 'undefined' && document.hasOwnProperty('querySelector') && (selector = document.querySelector('meta[name=\"csrf-token\"]'))) {\n        return selector.getAttribute('content');\n      }\n\n      return null;\n    }\n  }]);\n  return Connector;\n}();\n/**\n * This class represents a basic channel.\n */\n\n\nvar Channel = function () {\n  function Channel() {\n    classCallCheck(this, Channel);\n  }\n\n  createClass(Channel, [{\n    key: 'listenForWhisper',\n\n    /**\n     * Listen for a whisper event on the channel instance.\n     */\n    value: function listenForWhisper(event, callback) {\n      return this.listen('.client-' + event, callback);\n    }\n    /**\n     * Listen for an event on the channel instance.\n     */\n\n  }, {\n    key: 'notification',\n    value: function notification(callback) {\n      return this.listen('.Illuminate\\\\Notifications\\\\Events\\\\BroadcastNotificationCreated', callback);\n    }\n    /**\n     * Stop listening for a whispser event on the channel instance.\n     */\n\n  }, {\n    key: 'stopListeningForWhisper',\n    value: function stopListeningForWhisper(event) {\n      return this.stopListening('.client-' + event);\n    }\n  }]);\n  return Channel;\n}();\n/**\n * Event name formatter\n */\n\n\nvar EventFormatter = function () {\n  /**\n   * Create a new class instance.\n   */\n  function EventFormatter(namespace) {\n    classCallCheck(this, EventFormatter);\n    this.setNamespace(namespace);\n  }\n  /**\n   * Format the given event name.\n   */\n\n\n  createClass(EventFormatter, [{\n    key: 'format',\n    value: function format(event) {\n      if (event.charAt(0) === '.' || event.charAt(0) === '\\\\') {\n        return event.substr(1);\n      } else if (this.namespace) {\n        event = this.namespace + '.' + event;\n      }\n\n      return event.replace(/\\./g, '\\\\');\n    }\n    /**\n     * Set the event namespace.\n     */\n\n  }, {\n    key: 'setNamespace',\n    value: function setNamespace(value) {\n      this.namespace = value;\n    }\n  }]);\n  return EventFormatter;\n}();\n/**\n * This class represents a Pusher channel.\n */\n\n\nvar PusherChannel = function (_Channel) {\n  inherits(PusherChannel, _Channel);\n  /**\n   * Create a new class instance.\n   */\n\n  function PusherChannel(pusher, name, options) {\n    classCallCheck(this, PusherChannel);\n\n    var _this = possibleConstructorReturn(this, (PusherChannel.__proto__ || Object.getPrototypeOf(PusherChannel)).call(this));\n\n    _this.name = name;\n    _this.pusher = pusher;\n    _this.options = options;\n    _this.eventFormatter = new EventFormatter(_this.options.namespace);\n\n    _this.subscribe();\n\n    return _this;\n  }\n  /**\n   * Subscribe to a Pusher channel.\n   */\n\n\n  createClass(PusherChannel, [{\n    key: 'subscribe',\n    value: function subscribe() {\n      this.subscription = this.pusher.subscribe(this.name);\n    }\n    /**\n     * Unsubscribe from a Pusher channel.\n     */\n\n  }, {\n    key: 'unsubscribe',\n    value: function unsubscribe() {\n      this.pusher.unsubscribe(this.name);\n    }\n    /**\n     * Listen for an event on the channel instance.\n     */\n\n  }, {\n    key: 'listen',\n    value: function listen(event, callback) {\n      this.on(this.eventFormatter.format(event), callback);\n      return this;\n    }\n    /**\n     * Stop listening for an event on the channel instance.\n     */\n\n  }, {\n    key: 'stopListening',\n    value: function stopListening(event) {\n      this.subscription.unbind(this.eventFormatter.format(event));\n      return this;\n    }\n    /**\n     * Bind a channel to an event.\n     */\n\n  }, {\n    key: 'on',\n    value: function on(event, callback) {\n      this.subscription.bind(event, callback);\n      return this;\n    }\n  }]);\n  return PusherChannel;\n}(Channel);\n/**\n * This class represents a Pusher private channel.\n */\n\n\nvar PusherPrivateChannel = function (_PusherChannel) {\n  inherits(PusherPrivateChannel, _PusherChannel);\n\n  function PusherPrivateChannel() {\n    classCallCheck(this, PusherPrivateChannel);\n    return possibleConstructorReturn(this, (PusherPrivateChannel.__proto__ || Object.getPrototypeOf(PusherPrivateChannel)).apply(this, arguments));\n  }\n\n  createClass(PusherPrivateChannel, [{\n    key: 'whisper',\n\n    /**\n     * Trigger client event on the channel.\n     */\n    value: function whisper(eventName, data) {\n      this.pusher.channels.channels[this.name].trigger('client-' + eventName, data);\n      return this;\n    }\n  }]);\n  return PusherPrivateChannel;\n}(PusherChannel);\n/**\n * This class represents a Pusher presence channel.\n */\n\n\nvar PusherPresenceChannel = function (_PusherChannel) {\n  inherits(PusherPresenceChannel, _PusherChannel);\n\n  function PusherPresenceChannel() {\n    classCallCheck(this, PusherPresenceChannel);\n    return possibleConstructorReturn(this, (PusherPresenceChannel.__proto__ || Object.getPrototypeOf(PusherPresenceChannel)).apply(this, arguments));\n  }\n\n  createClass(PusherPresenceChannel, [{\n    key: 'here',\n\n    /**\n     * Register a callback to be called anytime the member list changes.\n     */\n    value: function here(callback) {\n      this.on('pusher:subscription_succeeded', function (data) {\n        callback(Object.keys(data.members).map(function (k) {\n          return data.members[k];\n        }));\n      });\n      return this;\n    }\n    /**\n     * Listen for someone joining the channel.\n     */\n\n  }, {\n    key: 'joining',\n    value: function joining(callback) {\n      this.on('pusher:member_added', function (member) {\n        callback(member.info);\n      });\n      return this;\n    }\n    /**\n     * Listen for someone leaving the channel.\n     */\n\n  }, {\n    key: 'leaving',\n    value: function leaving(callback) {\n      this.on('pusher:member_removed', function (member) {\n        callback(member.info);\n      });\n      return this;\n    }\n    /**\n     * Trigger client event on the channel.\n     */\n\n  }, {\n    key: 'whisper',\n    value: function whisper(eventName, data) {\n      this.pusher.channels.channels[this.name].trigger('client-' + eventName, data);\n      return this;\n    }\n  }]);\n  return PusherPresenceChannel;\n}(PusherChannel);\n/**\n * This class represents a Socket.io channel.\n */\n\n\nvar SocketIoChannel = function (_Channel) {\n  inherits(SocketIoChannel, _Channel);\n  /**\n   * Create a new class instance.\n   */\n\n  function SocketIoChannel(socket, name, options) {\n    classCallCheck(this, SocketIoChannel);\n    /**\n     * The event callbacks applied to the channel.\n     */\n\n    var _this = possibleConstructorReturn(this, (SocketIoChannel.__proto__ || Object.getPrototypeOf(SocketIoChannel)).call(this));\n\n    _this.events = {};\n    _this.name = name;\n    _this.socket = socket;\n    _this.options = options;\n    _this.eventFormatter = new EventFormatter(_this.options.namespace);\n\n    _this.subscribe();\n\n    _this.configureReconnector();\n\n    return _this;\n  }\n  /**\n   * Subscribe to a Socket.io channel.\n   */\n\n\n  createClass(SocketIoChannel, [{\n    key: 'subscribe',\n    value: function subscribe() {\n      this.socket.emit('subscribe', {\n        channel: this.name,\n        auth: this.options.auth || {}\n      });\n    }\n    /**\n     * Unsubscribe from channel and ubind event callbacks.\n     */\n\n  }, {\n    key: 'unsubscribe',\n    value: function unsubscribe() {\n      this.unbind();\n      this.socket.emit('unsubscribe', {\n        channel: this.name,\n        auth: this.options.auth || {}\n      });\n    }\n    /**\n     * Listen for an event on the channel instance.\n     */\n\n  }, {\n    key: 'listen',\n    value: function listen(event, callback) {\n      this.on(this.eventFormatter.format(event), callback);\n      return this;\n    }\n    /**\n     * Stop listening for an event on the channel instance.\n     */\n\n  }, {\n    key: 'stopListening',\n    value: function stopListening(event) {\n      var name = this.eventFormatter.format(event);\n      this.socket.removeListener(name);\n      delete this.events[name];\n      return this;\n    }\n    /**\n     * Bind the channel's socket to an event and store the callback.\n     */\n\n  }, {\n    key: 'on',\n    value: function on(event, callback) {\n      var _this2 = this;\n\n      var listener = function listener(channel, data) {\n        if (_this2.name == channel) {\n          callback(data);\n        }\n      };\n\n      this.socket.on(event, listener);\n      this.bind(event, listener);\n    }\n    /**\n     * Attach a 'reconnect' listener and bind the event.\n     */\n\n  }, {\n    key: 'configureReconnector',\n    value: function configureReconnector() {\n      var _this3 = this;\n\n      var listener = function listener() {\n        _this3.subscribe();\n      };\n\n      this.socket.on('reconnect', listener);\n      this.bind('reconnect', listener);\n    }\n    /**\n     * Bind the channel's socket to an event and store the callback.\n     */\n\n  }, {\n    key: 'bind',\n    value: function bind(event, callback) {\n      this.events[event] = this.events[event] || [];\n      this.events[event].push(callback);\n    }\n    /**\n     * Unbind the channel's socket from all stored event callbacks.\n     */\n\n  }, {\n    key: 'unbind',\n    value: function unbind() {\n      var _this4 = this;\n\n      Object.keys(this.events).forEach(function (event) {\n        _this4.events[event].forEach(function (callback) {\n          _this4.socket.removeListener(event, callback);\n        });\n\n        delete _this4.events[event];\n      });\n    }\n  }]);\n  return SocketIoChannel;\n}(Channel);\n/**\n * This class represents a Socket.io presence channel.\n */\n\n\nvar SocketIoPrivateChannel = function (_SocketIoChannel) {\n  inherits(SocketIoPrivateChannel, _SocketIoChannel);\n\n  function SocketIoPrivateChannel() {\n    classCallCheck(this, SocketIoPrivateChannel);\n    return possibleConstructorReturn(this, (SocketIoPrivateChannel.__proto__ || Object.getPrototypeOf(SocketIoPrivateChannel)).apply(this, arguments));\n  }\n\n  createClass(SocketIoPrivateChannel, [{\n    key: 'whisper',\n\n    /**\n     * Trigger client event on the channel.\n     */\n    value: function whisper(eventName, data) {\n      this.socket.emit('client event', {\n        channel: this.name,\n        event: 'client-' + eventName,\n        data: data\n      });\n      return this;\n    }\n  }]);\n  return SocketIoPrivateChannel;\n}(SocketIoChannel);\n/**\n * This class represents a Socket.io presence channel.\n */\n\n\nvar SocketIoPresenceChannel = function (_SocketIoPrivateChann) {\n  inherits(SocketIoPresenceChannel, _SocketIoPrivateChann);\n\n  function SocketIoPresenceChannel() {\n    classCallCheck(this, SocketIoPresenceChannel);\n    return possibleConstructorReturn(this, (SocketIoPresenceChannel.__proto__ || Object.getPrototypeOf(SocketIoPresenceChannel)).apply(this, arguments));\n  }\n\n  createClass(SocketIoPresenceChannel, [{\n    key: 'here',\n\n    /**\n     * Register a callback to be called anytime the member list changes.\n     */\n    value: function here(callback) {\n      this.on('presence:subscribed', function (members) {\n        callback(members.map(function (m) {\n          return m.user_info;\n        }));\n      });\n      return this;\n    }\n    /**\n     * Listen for someone joining the channel.\n     */\n\n  }, {\n    key: 'joining',\n    value: function joining(callback) {\n      this.on('presence:joining', function (member) {\n        return callback(member.user_info);\n      });\n      return this;\n    }\n    /**\n     * Listen for someone leaving the channel.\n     */\n\n  }, {\n    key: 'leaving',\n    value: function leaving(callback) {\n      this.on('presence:leaving', function (member) {\n        return callback(member.user_info);\n      });\n      return this;\n    }\n  }]);\n  return SocketIoPresenceChannel;\n}(SocketIoPrivateChannel);\n/**\n * This class represents a null channel.\n */\n\n\nvar NullChannel = function (_Channel) {\n  inherits(NullChannel, _Channel);\n\n  function NullChannel() {\n    classCallCheck(this, NullChannel);\n    return possibleConstructorReturn(this, (NullChannel.__proto__ || Object.getPrototypeOf(NullChannel)).apply(this, arguments));\n  }\n\n  createClass(NullChannel, [{\n    key: 'subscribe',\n\n    /**\n     * Subscribe to a channel.\n     */\n    value: function subscribe() {} //\n\n    /**\n     * Unsubscribe from a channel.\n     */\n\n  }, {\n    key: 'unsubscribe',\n    value: function unsubscribe() {} //\n\n    /**\n     * Listen for an event on the channel instance.\n     */\n\n  }, {\n    key: 'listen',\n    value: function listen(event, callback) {\n      return this;\n    }\n    /**\n     * Stop listening for an event on the channel instance.\n     */\n\n  }, {\n    key: 'stopListening',\n    value: function stopListening(event) {\n      return this;\n    }\n    /**\n     * Bind a channel to an event.\n     */\n\n  }, {\n    key: 'on',\n    value: function on(event, callback) {\n      return this;\n    }\n  }]);\n  return NullChannel;\n}(Channel);\n/**\n * This class represents a null private channel.\n */\n\n\nvar NullPrivateChannel = function (_NullChannel) {\n  inherits(NullPrivateChannel, _NullChannel);\n\n  function NullPrivateChannel() {\n    classCallCheck(this, NullPrivateChannel);\n    return possibleConstructorReturn(this, (NullPrivateChannel.__proto__ || Object.getPrototypeOf(NullPrivateChannel)).apply(this, arguments));\n  }\n\n  createClass(NullPrivateChannel, [{\n    key: 'whisper',\n\n    /**\n     * Trigger client event on the channel.\n     */\n    value: function whisper(eventName, data) {\n      return this;\n    }\n  }]);\n  return NullPrivateChannel;\n}(NullChannel);\n/**\n * This class represents a null presence channel.\n */\n\n\nvar NullPresenceChannel = function (_NullChannel) {\n  inherits(NullPresenceChannel, _NullChannel);\n\n  function NullPresenceChannel() {\n    classCallCheck(this, NullPresenceChannel);\n    return possibleConstructorReturn(this, (NullPresenceChannel.__proto__ || Object.getPrototypeOf(NullPresenceChannel)).apply(this, arguments));\n  }\n\n  createClass(NullPresenceChannel, [{\n    key: 'here',\n\n    /**\n     * Register a callback to be called anytime the member list changes.\n     */\n    value: function here(callback) {\n      return this;\n    }\n    /**\n     * Listen for someone joining the channel.\n     */\n\n  }, {\n    key: 'joining',\n    value: function joining(callback) {\n      return this;\n    }\n    /**\n     * Listen for someone leaving the channel.\n     */\n\n  }, {\n    key: 'leaving',\n    value: function leaving(callback) {\n      return this;\n    }\n    /**\n     * Trigger client event on the channel.\n     */\n\n  }, {\n    key: 'whisper',\n    value: function whisper(eventName, data) {\n      return this;\n    }\n  }]);\n  return NullPresenceChannel;\n}(NullChannel);\n/**\n * This class creates a connector to Pusher.\n */\n\n\nvar PusherConnector = function (_Connector) {\n  inherits(PusherConnector, _Connector);\n\n  function PusherConnector() {\n    classCallCheck(this, PusherConnector);\n    /**\n     * All of the subscribed channel names.\n     */\n\n    var _this = possibleConstructorReturn(this, (PusherConnector.__proto__ || Object.getPrototypeOf(PusherConnector)).apply(this, arguments));\n\n    _this.channels = {};\n    return _this;\n  }\n  /**\n   * Create a fresh Pusher connection.\n   */\n\n\n  createClass(PusherConnector, [{\n    key: 'connect',\n    value: function connect() {\n      if (typeof this.options.client !== 'undefined') {\n        this.pusher = this.options.client;\n      } else {\n        this.pusher = new Pusher(this.options.key, this.options);\n      }\n    }\n    /**\n     * Listen for an event on a channel instance.\n     */\n\n  }, {\n    key: 'listen',\n    value: function listen(name, event, callback) {\n      return this.channel(name).listen(event, callback);\n    }\n    /**\n     * Get a channel instance by name.\n     */\n\n  }, {\n    key: 'channel',\n    value: function channel(name) {\n      if (!this.channels[name]) {\n        this.channels[name] = new PusherChannel(this.pusher, name, this.options);\n      }\n\n      return this.channels[name];\n    }\n    /**\n     * Get a private channel instance by name.\n     */\n\n  }, {\n    key: 'privateChannel',\n    value: function privateChannel(name) {\n      if (!this.channels['private-' + name]) {\n        this.channels['private-' + name] = new PusherPrivateChannel(this.pusher, 'private-' + name, this.options);\n      }\n\n      return this.channels['private-' + name];\n    }\n    /**\n     * Get a presence channel instance by name.\n     */\n\n  }, {\n    key: 'presenceChannel',\n    value: function presenceChannel(name) {\n      if (!this.channels['presence-' + name]) {\n        this.channels['presence-' + name] = new PusherPresenceChannel(this.pusher, 'presence-' + name, this.options);\n      }\n\n      return this.channels['presence-' + name];\n    }\n    /**\n     * Leave the given channel, as well as its private and presence variants.\n     */\n\n  }, {\n    key: 'leave',\n    value: function leave(name) {\n      var _this2 = this;\n\n      var channels = [name, 'private-' + name, 'presence-' + name];\n      channels.forEach(function (name, index) {\n        _this2.leaveChannel(name);\n      });\n    }\n    /**\n     * Leave the given channel.\n     */\n\n  }, {\n    key: 'leaveChannel',\n    value: function leaveChannel(name) {\n      if (this.channels[name]) {\n        this.channels[name].unsubscribe();\n        delete this.channels[name];\n      }\n    }\n    /**\n     * Get the socket ID for the connection.\n     */\n\n  }, {\n    key: 'socketId',\n    value: function socketId() {\n      return this.pusher.connection.socket_id;\n    }\n    /**\n     * Disconnect Pusher connection.\n     */\n\n  }, {\n    key: 'disconnect',\n    value: function disconnect() {\n      this.pusher.disconnect();\n    }\n  }]);\n  return PusherConnector;\n}(Connector);\n/**\n * This class creates a connnector to a Socket.io server.\n */\n\n\nvar SocketIoConnector = function (_Connector) {\n  inherits(SocketIoConnector, _Connector);\n\n  function SocketIoConnector() {\n    classCallCheck(this, SocketIoConnector);\n    /**\n     * All of the subscribed channel names.\n     */\n\n    var _this = possibleConstructorReturn(this, (SocketIoConnector.__proto__ || Object.getPrototypeOf(SocketIoConnector)).apply(this, arguments));\n\n    _this.channels = {};\n    return _this;\n  }\n  /**\n   * Create a fresh Socket.io connection.\n   */\n\n\n  createClass(SocketIoConnector, [{\n    key: 'connect',\n    value: function connect() {\n      var io = this.getSocketIO();\n      this.socket = io(this.options.host, this.options);\n      return this.socket;\n    }\n    /**\n     * Get socket.io module from global scope or options.\n     */\n\n  }, {\n    key: 'getSocketIO',\n    value: function getSocketIO() {\n      if (typeof this.options.client !== 'undefined') {\n        return this.options.client;\n      }\n\n      if (typeof io !== 'undefined') {\n        return io;\n      }\n\n      throw new Error('Socket.io client not found. Should be globally available or passed via options.client');\n    }\n    /**\n     * Listen for an event on a channel instance.\n     */\n\n  }, {\n    key: 'listen',\n    value: function listen(name, event, callback) {\n      return this.channel(name).listen(event, callback);\n    }\n    /**\n     * Get a channel instance by name.\n     */\n\n  }, {\n    key: 'channel',\n    value: function channel(name) {\n      if (!this.channels[name]) {\n        this.channels[name] = new SocketIoChannel(this.socket, name, this.options);\n      }\n\n      return this.channels[name];\n    }\n    /**\n     * Get a private channel instance by name.\n     */\n\n  }, {\n    key: 'privateChannel',\n    value: function privateChannel(name) {\n      if (!this.channels['private-' + name]) {\n        this.channels['private-' + name] = new SocketIoPrivateChannel(this.socket, 'private-' + name, this.options);\n      }\n\n      return this.channels['private-' + name];\n    }\n    /**\n     * Get a presence channel instance by name.\n     */\n\n  }, {\n    key: 'presenceChannel',\n    value: function presenceChannel(name) {\n      if (!this.channels['presence-' + name]) {\n        this.channels['presence-' + name] = new SocketIoPresenceChannel(this.socket, 'presence-' + name, this.options);\n      }\n\n      return this.channels['presence-' + name];\n    }\n    /**\n     * Leave the given channel, as well as its private and presence variants.\n     */\n\n  }, {\n    key: 'leave',\n    value: function leave(name) {\n      var _this2 = this;\n\n      var channels = [name, 'private-' + name, 'presence-' + name];\n      channels.forEach(function (name) {\n        _this2.leaveChannel(name);\n      });\n    }\n    /**\n     * Leave the given channel.\n     */\n\n  }, {\n    key: 'leaveChannel',\n    value: function leaveChannel(name) {\n      if (this.channels[name]) {\n        this.channels[name].unsubscribe();\n        delete this.channels[name];\n      }\n    }\n    /**\n     * Get the socket ID for the connection.\n     */\n\n  }, {\n    key: 'socketId',\n    value: function socketId() {\n      return this.socket.id;\n    }\n    /**\n     * Disconnect Socketio connection.\n     */\n\n  }, {\n    key: 'disconnect',\n    value: function disconnect() {\n      this.socket.disconnect();\n    }\n  }]);\n  return SocketIoConnector;\n}(Connector);\n/**\n * This class creates a null connector.\n */\n\n\nvar NullConnector = function (_Connector) {\n  inherits(NullConnector, _Connector);\n\n  function NullConnector() {\n    classCallCheck(this, NullConnector);\n    /**\n     * All of the subscribed channel names.\n     */\n\n    var _this = possibleConstructorReturn(this, (NullConnector.__proto__ || Object.getPrototypeOf(NullConnector)).apply(this, arguments));\n\n    _this.channels = {};\n    return _this;\n  }\n  /**\n   * Create a fresh connection.\n   */\n\n\n  createClass(NullConnector, [{\n    key: 'connect',\n    value: function connect() {} //\n\n    /**\n     * Listen for an event on a channel instance.\n     */\n\n  }, {\n    key: 'listen',\n    value: function listen(name, event, callback) {\n      return new NullChannel();\n    }\n    /**\n     * Get a channel instance by name.\n     */\n\n  }, {\n    key: 'channel',\n    value: function channel(name) {\n      return new NullChannel();\n    }\n    /**\n     * Get a private channel instance by name.\n     */\n\n  }, {\n    key: 'privateChannel',\n    value: function privateChannel(name) {\n      return new NullPrivateChannel();\n    }\n    /**\n     * Get a presence channel instance by name.\n     */\n\n  }, {\n    key: 'presenceChannel',\n    value: function presenceChannel(name) {\n      return new NullPresenceChannel();\n    }\n    /**\n     * Leave the given channel, as well as its private and presence variants.\n     */\n\n  }, {\n    key: 'leave',\n    value: function leave(name) {} //\n\n    /**\n     * Leave the given channel.\n     */\n\n  }, {\n    key: 'leaveChannel',\n    value: function leaveChannel(name) {} //\n\n    /**\n     * Get the socket ID for the connection.\n     */\n\n  }, {\n    key: 'socketId',\n    value: function socketId() {\n      return 'fake-socket-id';\n    }\n    /**\n     * Disconnect the connection.\n     */\n\n  }, {\n    key: 'disconnect',\n    value: function disconnect() {//\n    }\n  }]);\n  return NullConnector;\n}(Connector);\n/**\n * This class is the primary API for interacting with broadcasting.\n */\n\n\nvar Echo = function () {\n  /**\n   * Create a new class instance.\n   */\n  function Echo(options) {\n    classCallCheck(this, Echo);\n    this.options = options;\n    this.connect();\n\n    if (!this.options.withoutInterceptors) {\n      this.registerInterceptors();\n    }\n  }\n  /**\n   * Get a channel instance by name.\n   */\n\n\n  createClass(Echo, [{\n    key: 'channel',\n    value: function channel(_channel) {\n      return this.connector.channel(_channel);\n    }\n    /**\n     * Create a new connection.\n     */\n\n  }, {\n    key: 'connect',\n    value: function connect() {\n      if (this.options.broadcaster == 'pusher') {\n        this.connector = new PusherConnector(this.options);\n      } else if (this.options.broadcaster == 'socket.io') {\n        this.connector = new SocketIoConnector(this.options);\n      } else if (this.options.broadcaster == 'null') {\n        this.connector = new NullConnector(this.options);\n      } else if (typeof this.options.broadcaster == 'function') {\n        this.connector = new this.options.broadcaster(this.options);\n      }\n    }\n    /**\n     * Disconnect from the Echo server.\n     */\n\n  }, {\n    key: 'disconnect',\n    value: function disconnect() {\n      this.connector.disconnect();\n    }\n    /**\n     * Get a presence channel instance by name.\n     */\n\n  }, {\n    key: 'join',\n    value: function join(channel) {\n      return this.connector.presenceChannel(channel);\n    }\n    /**\n     * Leave the given channel, as well as its private and presence variants.\n     */\n\n  }, {\n    key: 'leave',\n    value: function leave(channel) {\n      this.connector.leave(channel);\n    }\n    /**\n     * Leave the given channel.\n     */\n\n  }, {\n    key: 'leaveChannel',\n    value: function leaveChannel(channel) {\n      this.connector.leaveChannel(channel);\n    }\n    /**\n     * Listen for an event on a channel instance.\n     */\n\n  }, {\n    key: 'listen',\n    value: function listen(channel, event, callback) {\n      return this.connector.listen(channel, event, callback);\n    }\n    /**\n     * Get a private channel instance by name.\n     */\n\n  }, {\n    key: 'private',\n    value: function _private(channel) {\n      return this.connector.privateChannel(channel);\n    }\n    /**\n     * Get the Socket ID for the connection.\n     */\n\n  }, {\n    key: 'socketId',\n    value: function socketId() {\n      return this.connector.socketId();\n    }\n    /**\n     * Register 3rd party request interceptiors. These are used to automatically\n     * send a connections socket id to a Laravel app with a X-Socket-Id header.\n     */\n\n  }, {\n    key: 'registerInterceptors',\n    value: function registerInterceptors() {\n      if (typeof Vue === 'function' && Vue.http) {\n        this.registerVueRequestInterceptor();\n      }\n\n      if (typeof axios === 'function') {\n        this.registerAxiosRequestInterceptor();\n      }\n\n      if (typeof jQuery === 'function') {\n        this.registerjQueryAjaxSetup();\n      }\n    }\n    /**\n     * Register a Vue HTTP interceptor to add the X-Socket-ID header.\n     */\n\n  }, {\n    key: 'registerVueRequestInterceptor',\n    value: function registerVueRequestInterceptor() {\n      var _this = this;\n\n      Vue.http.interceptors.push(function (request, next) {\n        if (_this.socketId()) {\n          request.headers.set('X-Socket-ID', _this.socketId());\n        }\n\n        next();\n      });\n    }\n    /**\n     * Register an Axios HTTP interceptor to add the X-Socket-ID header.\n     */\n\n  }, {\n    key: 'registerAxiosRequestInterceptor',\n    value: function registerAxiosRequestInterceptor() {\n      var _this2 = this;\n\n      axios.interceptors.request.use(function (config) {\n        if (_this2.socketId()) {\n          config.headers['X-Socket-Id'] = _this2.socketId();\n        }\n\n        return config;\n      });\n    }\n    /**\n     * Register jQuery AjaxPrefilter to add the X-Socket-ID header.\n     */\n\n  }, {\n    key: 'registerjQueryAjaxSetup',\n    value: function registerjQueryAjaxSetup() {\n      var _this3 = this;\n\n      if (typeof jQuery.ajax != 'undefined') {\n        jQuery.ajaxPrefilter(function (options, originalOptions, xhr) {\n          if (_this3.socketId()) {\n            xhr.setRequestHeader('X-Socket-Id', _this3.socketId());\n          }\n        });\n      }\n    }\n  }]);\n  return Echo;\n}();\n\nexport default Echo;"],"sourceRoot":""}