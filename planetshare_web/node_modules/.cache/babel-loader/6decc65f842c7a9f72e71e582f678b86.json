{"ast":null,"code":"\"use strict\";\n/*\n * DOCS: https://razorpay.com/docs/invoices/\n */\n\nvar _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n\nfunction _objectWithoutProperties(obj, keys) {\n  var target = {};\n\n  for (var i in obj) {\n    if (keys.indexOf(i) >= 0) continue;\n    if (!Object.prototype.hasOwnProperty.call(obj, i)) continue;\n    target[i] = obj[i];\n  }\n\n  return target;\n}\n\nvar Promise = require(\"promise\"),\n    _require = require('../utils/razorpay-utils'),\n    normalizeDate = _require.normalizeDate,\n    normalizeNotes = _require.normalizeNotes;\n\nmodule.exports = function invoicesApi(api) {\n  var BASE_URL = \"/invoices\",\n      MISSING_ID_ERROR = \"Invoice ID is mandatory\";\n  /**\n   * Invoice entity gets used for both Payment Links and Invoices system.\n   * Few of the methods are only meaningful for Invoices system and\n   * calling those for against/for a Payment Link would throw\n   * Bad request error.\n   */\n\n  return {\n    create: function create() {\n      var params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      var callback = arguments[1];\n      /*\n       * Creates invoice of any type(invoice|link|ecod).\n       *\n       * @param {Object} params\n       * @param {Function} callback\n       *\n       * @return {Promise}\n       */\n\n      var url = BASE_URL,\n          notes = params.notes,\n          rest = _objectWithoutProperties(params, [\"notes\"]),\n          data = Object.assign(rest, normalizeNotes(notes));\n\n      return api.post({\n        url: url,\n        data: data\n      }, callback);\n    },\n    edit: function edit(invoiceId) {\n      var params = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      var callback = arguments[2];\n      /*\n       * Patches given invoice with new attributes\n       *\n       * @param {String} invoiceId\n       * @param {Object} params\n       * @param {Function} callback\n       *\n       * @return {Promise}\n       */\n\n      var url = BASE_URL + \"/\" + invoiceId,\n          notes = params.notes,\n          rest = _objectWithoutProperties(params, [\"notes\"]),\n          data = Object.assign(rest, normalizeNotes(notes));\n\n      if (!invoiceId) {\n        return Promise.reject(\"Invoice ID is mandatory\");\n      }\n\n      return api.patch({\n        url: url,\n        data: data\n      }, callback);\n    },\n    issue: function issue(invoiceId, callback) {\n      /*\n       * Issues drafted invoice\n       *\n       * @param {String} invoiceId\n       * @param {Function} callback\n       * \n       * @return {Promise}\n       */\n      if (!invoiceId) {\n        return Promise.reject(MISSING_ID_ERROR);\n      }\n\n      var url = BASE_URL + \"/\" + invoiceId + \"/issue\";\n      return api.post({\n        url: url\n      }, callback);\n    },\n    delete: function _delete(invoiceId, callback) {\n      /*\n       * Deletes drafted invoice\n       *\n       * @param {String} invoiceId\n       * @param {Function} callback\n       *\n       * @return {Promise}\n       */\n      if (!invoiceId) {\n        return Promise.reject(MISSING_ID_ERROR);\n      }\n\n      var url = BASE_URL + \"/\" + invoiceId;\n      return api.delete({\n        url: url\n      }, callback);\n    },\n    cancel: function cancel(invoiceId, callback) {\n      /*\n       * Cancels issued invoice\n       * \n       * @param {String} invoiceId\n       * @param {Function} callback\n       *\n       * @return {Promise}\n       */\n      if (!invoiceId) {\n        return Promise.reject(MISSING_ID_ERROR);\n      }\n\n      var url = BASE_URL + \"/\" + invoiceId + \"/cancel\";\n      return api.post({\n        url: url\n      }, callback);\n    },\n    fetch: function fetch(invoiceId, callback) {\n      /*\n       * Fetches invoice entity with given id\n       *\n       * @param {String} invoiceId\n       * @param {Function} callback\n       *\n       * @return {Promise}\n       */\n      if (!invoiceId) {\n        return Promise.reject(MISSING_ID_ERROR);\n      }\n\n      var url = BASE_URL + \"/\" + invoiceId;\n      return api.get({\n        url: url\n      }, callback);\n    },\n    all: function all() {\n      var params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      var callback = arguments[1];\n      /*\n       * Fetches multiple invoices with given query options\n       *\n       * @param {Object} invoiceId\n       * @param {Function} callback\n       *\n       * @return {Promise}\n       */\n\n      var from = params.from,\n          to = params.to,\n          count = params.count,\n          skip = params.skip,\n          url = BASE_URL;\n\n      if (from) {\n        from = normalizeDate(from);\n      }\n\n      if (to) {\n        to = normalizeDate(to);\n      }\n\n      count = Number(count) || 10;\n      skip = Number(skip) || 0;\n      return api.get({\n        url: url,\n        data: _extends({}, params, {\n          from: from,\n          to: to,\n          count: count,\n          skip: skip\n        })\n      }, callback);\n    },\n    notifyBy: function notifyBy(invoiceId, medium, callback) {\n      /*\n       * Send/re-send notification for invoice by given medium\n       * \n       * @param {String} invoiceId\n       * @param {String} medium\n       * @param {Function} callback\n       * \n       * @return {Promise}\n       */\n      if (!invoiceId) {\n        return Promise.reject(MISSING_ID_ERROR);\n      }\n\n      if (!medium) {\n        return Promise.reject(\"`medium` is required\");\n      }\n\n      var url = BASE_URL + \"/\" + invoiceId + \"/notify_by/\" + medium;\n      return api.post({\n        url: url\n      }, callback);\n    }\n  };\n};","map":null,"metadata":{},"sourceType":"script"}