{"ast":null,"code":"import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\n/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\n\n/* global Reflect, Promise */\n\nvar _extendStatics = function extendStatics(d, b) {\n  _extendStatics = Object.setPrototypeOf || {\n    __proto__: []\n  } instanceof Array && function (d, b) {\n    d.__proto__ = b;\n  } || function (d, b) {\n    for (var p in b) {\n      if (b.hasOwnProperty(p)) d[p] = b[p];\n    }\n  };\n\n  return _extendStatics(d, b);\n};\n\nfunction __extends(d, b) {\n  _extendStatics(d, b);\n\n  function __() {\n    this.constructor = d;\n  }\n\n  d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n}\n\nfunction styleInject(css, ref) {\n  if (ref === void 0) ref = {};\n  var insertAt = ref.insertAt;\n\n  if (!css || typeof document === 'undefined') {\n    return;\n  }\n\n  var head = document.head || document.getElementsByTagName('head')[0];\n  var style = document.createElement('style');\n  style.type = 'text/css';\n\n  if (insertAt === 'top') {\n    if (head.firstChild) {\n      head.insertBefore(style, head.firstChild);\n    } else {\n      head.appendChild(style);\n    }\n  } else {\n    head.appendChild(style);\n  }\n\n  if (style.styleSheet) {\n    style.styleSheet.cssText = css;\n  } else {\n    style.appendChild(document.createTextNode(css));\n  }\n}\n\nvar css = \".styles_loading-bar__1m8p1 {\\r\\n  position: fixed;\\r\\n  top: 0;\\r\\n  left: 0;\\r\\n  height: inherit;\\r\\n  background-color: #f11946;\\r\\n  opacity: 1;\\r\\n  transition: all 0.5s ease;\\r\\n  -moz-transition: all 0.5s ease;\\r\\n  -webkit-transition: all 0.5s ease;\\r\\n  -o-transition: all 0.5s ease;\\r\\n  z-index: 999999;\\r\\n}\\r\\n\\r\\n.styles_loading-bar-full__3dDSH {\\r\\n  position: fixed;\\r\\n  top: 0;\\r\\n  left: 0;\\r\\n  opacity: 0;\\r\\n  height: inherit;\\r\\n  transition: opacity 0.1s ease-out;\\r\\n  -moz-transition: opacity 0.1s ease-out;\\r\\n  -webkit-transition: opacity 0.1s ease-out;\\r\\n  -o-transition: opacity 0.1s ease-out;\\r\\n  z-index: 999999;\\r\\n}\\r\\n\";\nvar styles = {\n  \"loading-bar\": \"styles_loading-bar__1m8p1\",\n  \"loading-bar-full\": \"styles_loading-bar-full__3dDSH\"\n};\nstyleInject(css);\n\nvar LoadingBar =\n/** @class */\nfunction (_super) {\n  __extends(LoadingBar, _super);\n\n  function LoadingBar() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n\n    _this.state = {\n      show: true,\n      full: false,\n      progress: 0,\n      wait: false\n    };\n\n    _this.add = function (value) {\n      _this.setState({\n        progress: _this.state.progress + value\n      }, function () {\n        _this.onProgressChange();\n      });\n    };\n\n    _this.onProgressChange = function () {\n      if (_this.props.onProgressChange) _this.props.onProgressChange(_this.state.progress);\n\n      _this.checkIfFull();\n    };\n\n    _this.decrease = function (value) {\n      _this.setState({\n        progress: _this.state.progress - value\n      }, function () {\n        _this.onProgressChange();\n      });\n    };\n    /** @deprecated this method contains a typo, use continuousStart */\n\n\n    _this.continousStart = function (startingValue) {\n      var random = startingValue || _this.randomInt(20, 30);\n\n      _this.setState({\n        progress: random\n      });\n\n      var interval = setInterval(function () {\n        if (_this.state.progress < 90) {\n          var random_1 = _this.randomInt(2, 10);\n\n          if (!_this.mounted) return false;\n\n          _this.setState({\n            progress: _this.state.progress + random_1\n          }, function () {\n            _this.onProgressChange();\n          });\n        } else {\n          clearInterval(interval);\n        }\n      }, 1000);\n    };\n\n    _this.continuousStart = function (startingValue) {\n      var random = startingValue || _this.randomInt(20, 30);\n\n      _this.setState({\n        progress: random\n      });\n\n      var interval = setInterval(function () {\n        if (_this.state.progress < 90) {\n          var random_2 = _this.randomInt(2, 10);\n\n          if (!_this.mounted) return false;\n\n          _this.setState({\n            progress: _this.state.progress + random_2\n          }, function () {\n            _this.onProgressChange();\n          });\n        } else {\n          clearInterval(interval);\n        }\n      }, 1000);\n    };\n\n    _this.staticStart = function (startingValue) {\n      var random = startingValue || _this.randomInt(30, 50);\n\n      _this.setState({\n        progress: random\n      }, function () {\n        _this.onProgressChange();\n      });\n    };\n\n    _this.complete = function () {\n      _this.setState({\n        progress: 100\n      }, function () {\n        _this.onProgressChange();\n      });\n    };\n\n    _this.onLoaderFinished = function () {\n      if (_this.props.onLoaderFinished) _this.props.onLoaderFinished();\n\n      _this.setState({\n        progress: 0\n      }, function () {\n        _this.onProgressChange();\n      });\n    }; // Check whether the progress is full\n\n\n    _this.checkIfFull = function () {\n      if (!_this.mounted) return false;\n\n      if (_this.state.progress >= 100) {\n        // Prevent new progress change\n        _this.setState({\n          wait: true\n        }); // Start animate it\n\n\n        setTimeout(function () {\n          if (!_this.mounted) return false; // animate when element removed\n\n          _this.setState({\n            full: true\n          });\n\n          setTimeout(function () {\n            if (!_this.mounted) return false;\n\n            _this.setState({\n              // remove bar element\n              show: false,\n              progress: 0,\n              wait: false\n            });\n\n            setTimeout(function () {\n              if (!_this.mounted) return false;\n\n              _this.setState({\n                // Show Bar\n                full: false,\n                show: true\n              });\n\n              _this.onLoaderFinished();\n            }); // Duration to Waiting for hiding animation\n          }, 250); // Duration is depend on css animation-duration of loading-bar\n        }, 700);\n      }\n    };\n\n    return _this;\n  }\n\n  LoadingBar.prototype.randomInt = function (low, high) {\n    return Math.floor(Math.random() * (high - low) + low);\n  };\n\n  LoadingBar.prototype.render = function () {\n    var _a = this.props,\n        className = _a.className,\n        height = _a.height;\n    var _b = this.state,\n        show = _b.show,\n        full = _b.full;\n    return React.createElement('div', {\n      style: {\n        height: height\n      }\n    }, show ? React.createElement('div', {\n      className: styles['loading-bar'] + ' ' + (className || '') + ' ' + (full ? styles['loading-bar-full'] : ''),\n      style: this.barStyle()\n    }) : null);\n  };\n\n  LoadingBar.prototype.UNSAFE_componentWillReceiveProps = function (nextProps) {\n    var _this = this; // Watching Progress Changes\n\n\n    if (nextProps.progress !== this.props.progress) {\n      this.setState({\n        progress: nextProps.progress\n      }, function () {\n        if (_this.props.onProgressChange != null) {\n          _this.props.onProgressChange();\n        }\n\n        _this.checkIfFull();\n      });\n    }\n  };\n\n  LoadingBar.prototype.componentDidMount = function () {\n    this.mounted = true;\n    if (this.props.onRef) this.props.onRef(this);\n\n    if (this.state.progress !== this.props.progress) {\n      this.setState({\n        progress: this.props.progress\n      });\n    }\n  };\n\n  LoadingBar.prototype.componentWillUnmount = function () {\n    this.mounted = false;\n    if (this.props.onRef) this.props.onRef(undefined);\n  }; // apply width style to our element as inline style\n\n\n  LoadingBar.prototype.barStyle = function () {\n    // When loading bar still in progress\n    var _a = this.props,\n        color = _a.color,\n        background = _a.background;\n\n    if (background || background !== '') {\n      console.warn(\"react-top-loading-bar: Please don't use background property as a property since it's deprecated. Please use 'color' since it now haves the same function as background.\");\n    }\n\n    if (!this.state.wait) {\n      return {\n        width: this.state.progress + \"%\",\n        background: background || color\n      };\n    } else {\n      return {\n        width: '100%',\n        background: background || color\n      };\n    }\n  };\n\n  LoadingBar.propTypes = {\n    progress: PropTypes.number,\n    color: PropTypes.string,\n    background: PropTypes.string,\n    height: PropTypes.number,\n    onLoaderFinished: PropTypes.func,\n    onProgressChange: PropTypes.func,\n    className: PropTypes.string,\n    onRef: PropTypes.func\n  };\n  LoadingBar.defaultProps = {\n    progress: 0,\n    color: '#f11946',\n    height: 3,\n    className: '',\n    background: ''\n  };\n  return LoadingBar;\n}(Component);\n\nexport default LoadingBar;","map":null,"metadata":{},"sourceType":"module"}