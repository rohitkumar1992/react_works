{"ast":null,"code":"'use strict';\n\nfunction _objectWithoutProperties(obj, keys) {\n  var target = {};\n\n  for (var i in obj) {\n    if (keys.indexOf(i) >= 0) continue;\n    if (!Object.prototype.hasOwnProperty.call(obj, i)) continue;\n    target[i] = obj[i];\n  }\n\n  return target;\n}\n\nvar _require = require('../utils/razorpay-utils'),\n    normalizeNotes = _require.normalizeNotes;\n\nmodule.exports = function (api) {\n  return {\n    create: function create(params, callback) {\n      var notes = params.notes,\n          rest = _objectWithoutProperties(params, ['notes']);\n\n      var data = Object.assign(rest, normalizeNotes(notes));\n      return api.post({\n        url: '/customers',\n        data: data\n      }, callback);\n    },\n    edit: function edit(customerId, params, callback) {\n      var notes = params.notes,\n          rest = _objectWithoutProperties(params, ['notes']);\n\n      var data = Object.assign(rest, normalizeNotes(notes));\n      return api.put({\n        url: '/customers/' + customerId,\n        data: data\n      }, callback);\n    },\n    fetch: function fetch(customerId, callback) {\n      return api.get({\n        url: '/customers/' + customerId\n      }, callback);\n    },\n    fetchTokens: function fetchTokens(customerId, callback) {\n      return api.get({\n        url: '/customers/' + customerId + '/tokens'\n      }, callback);\n    },\n    fetchToken: function fetchToken(customerId, tokenId, callback) {\n      return api.get({\n        url: '/customers/' + customerId + '/tokens/' + tokenId\n      }, callback);\n    },\n    deleteToken: function deleteToken(customerId, tokenId, callback) {\n      return api.delete({\n        url: '/customers/' + customerId + '/tokens/' + tokenId\n      }, callback);\n    }\n  };\n};","map":null,"metadata":{},"sourceType":"script"}