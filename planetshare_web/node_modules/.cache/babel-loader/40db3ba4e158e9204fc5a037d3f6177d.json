{"ast":null,"code":"'use strict';\n\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nvar request = require('request-promise');\n\nvar nodeify = require('./utils/nodeify');\n\nvar _require = require('./utils/razorpay-utils'),\n    isNonNullObject = _require.isNonNullObject;\n\nvar allowedHeaders = {\n  \"X-Razorpay-Account\": \"\"\n};\n\nfunction getValidHeaders(headers) {\n  var result = {};\n\n  if (!isNonNullObject(headers)) {\n    return result;\n  }\n\n  return Object.keys(headers).reduce(function (result, headerName) {\n    if (allowedHeaders.hasOwnProperty(headerName)) {\n      result[headerName] = headers[headerName];\n    }\n\n    return result;\n  }, result);\n}\n\nfunction normalizeError(err) {\n  throw {\n    statusCode: err.statusCode,\n    error: err.error.error\n  };\n}\n\nvar API = function () {\n  function API(options) {\n    _classCallCheck(this, API);\n\n    this.rq = request.defaults({\n      baseUrl: options.hostUrl,\n      json: true,\n      auth: {\n        user: options.key_id,\n        pass: options.key_secret\n      },\n      headers: Object.assign({\n        'User-Agent': options.ua\n      }, getValidHeaders(options.headers))\n    });\n  }\n\n  _createClass(API, [{\n    key: 'get',\n    value: function get(params, cb) {\n      return nodeify(this.rq.get({\n        url: params.url,\n        qs: params.data\n      }).catch(normalizeError), cb);\n    }\n  }, {\n    key: 'post',\n    value: function post(params, cb) {\n      return nodeify(this.rq.post({\n        url: params.url,\n        form: params.data\n      }).catch(normalizeError), cb);\n    }\n  }, {\n    key: 'put',\n    value: function put(params, cb) {\n      return nodeify(this.rq.put({\n        url: params.url,\n        form: params.data\n      }).catch(normalizeError), cb);\n    }\n  }, {\n    key: 'patch',\n    value: function patch(params, cb) {\n      return nodeify(this.rq.patch({\n        url: params.url,\n        form: params.data\n      }).catch(normalizeError), cb);\n    }\n  }, {\n    key: 'delete',\n    value: function _delete(params, cb) {\n      return nodeify(this.rq.delete({\n        url: params.url\n      }).catch(normalizeError), cb);\n    }\n  }]);\n\n  return API;\n}();\n\nmodule.exports = API;","map":null,"metadata":{},"sourceType":"script"}