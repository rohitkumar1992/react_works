{"map":"{\"version\":3,\"sources\":[\"/var/www/html/REACT_WORK/planetshare_web/node_modules/babel-loader/lib/index.js??ref--6-oneOf-2!/var/www/html/REACT_WORK/planetshare_web/node_modules/resumablejs/resumable.js\"],\"names\":[\"module\",\"exports\",\"Resumable\",\"opts\",\"this\",\"version\",\"support\",\"File\",\"Blob\",\"FileList\",\"prototype\",\"webkitSlice\",\"mozSlice\",\"slice\",\"$\",\"files\",\"defaults\",\"chunkSize\",\"forceChunkSize\",\"simultaneousUploads\",\"fileParameterName\",\"chunkNumberParameterName\",\"chunkSizeParameterName\",\"currentChunkSizeParameterName\",\"totalSizeParameterName\",\"typeParameterName\",\"identifierParameterName\",\"fileNameParameterName\",\"relativePathParameterName\",\"totalChunksParameterName\",\"throttleProgressCallbacks\",\"query\",\"headers\",\"preprocess\",\"method\",\"uploadMethod\",\"testMethod\",\"prioritizeFirstAndLastChunk\",\"target\",\"testTarget\",\"parameterNamespace\",\"testChunks\",\"generateUniqueIdentifier\",\"getTarget\",\"maxChunkRetries\",\"chunkRetryInterval\",\"undefined\",\"permanentErrors\",\"maxFiles\",\"withCredentials\",\"xhrTimeout\",\"clearInput\",\"chunkFormat\",\"setChunkTypeFromFile\",\"maxFilesErrorCallback\",\"errorCount\",\"getOpt\",\"alert\",\"minFileSize\",\"minFileSizeErrorCallback\",\"file\",\"fileName\",\"name\",\"$h\",\"formatSize\",\"maxFileSize\",\"maxFileSizeErrorCallback\",\"fileType\",\"fileTypeErrorCallback\",\"o\",\"$opt\",\"Array\",\"options\",\"each\",\"option\",\"ResumableChunk\",\"fileObj\",\"ResumableFile\",\"resumableObj\",\"events\",\"on\",\"event\",\"callback\",\"push\",\"toLowerCase\",\"fire\",\"args\",\"i\",\"arguments\",\"length\",\"apply\",\"stopEvent\",\"e\",\"stopPropagation\",\"preventDefault\",\"custom\",\"relativePath\",\"webkitRelativePath\",\"size\",\"replace\",\"contains\",\"array\",\"test\",\"result\",\"value\",\"toFixed\",\"request\",\"params\",\"separator\",\"indexOf\",\"join\",\"onDrop\",\"dataTransfer\",\"items\",\"loadFiles\",\"processItem\",\"item\",\"path\",\"cb\",\"entry\",\"isFile\",\"isDirectory\",\"webkitGetAsEntry\",\"directory\",\"createReader\",\"readEntries\",\"entries\",\"processCallbacks\",\"map\",\"bind\",\"processDirectory\",\"getAsFile\",\"call\",\"appendFilesFromFileList\",\"fileList\",\"removeFile\",\"filesSkipped\",\"remaining\",\"decreaseReamining\",\"window\",\"setTimeout\",\"fileTypeFound\",\"index\",\"extension\",\"addFile\",\"uniqueIdentifier\",\"getFromUniqueIdentifier\",\"f\",\"container\",\"srcElement\",\"then\",\"_prevProgress\",\"_pause\",\"_error\",\"chunkEvent\",\"message\",\"abort\",\"chunks\",\"isComplete\",\"abortCount\",\"c\",\"status\",\"cancel\",\"_chunks\",\"uploadNextChunk\",\"retry\",\"bootstrap\",\"firedRetry\",\"upload\",\"round\",\"Math\",\"ceil\",\"floor\",\"maxOffset\",\"max\",\"offset\",\"progress\",\"ret\",\"error\",\"isUploading\",\"uploading\",\"chunk\",\"outstanding\",\"preprocessState\",\"pause\",\"isPaused\",\"fileObjSize\",\"fileObjType\",\"type\",\"lastProgressCallback\",\"Date\",\"tested\",\"retries\",\"pendingRetry\",\"loaded\",\"startByte\",\"endByte\",\"min\",\"xhr\",\"XMLHttpRequest\",\"testHandler\",\"send\",\"addEventListener\",\"customQuery\",\"k\",\"v\",\"encodeURIComponent\",\"concat\",\"filter\",\"pair\",\"open\",\"timeout\",\"customHeaders\",\"setRequestHeader\",\"preprocessFinished\",\"doneHandler\",\"retryInterval\",\"reduce\",\"func\",\"bytes\",\"data\",\"FormData\",\"append\",\"fr\",\"FileReader\",\"onload\",\"readAsDataURL\",\"readyState\",\"responseText\",\"relative\",\"factor\",\"found\",\"assignBrowse\",\"domNodes\",\"domNode\",\"input\",\"tagName\",\"document\",\"createElement\",\"setAttribute\",\"style\",\"display\",\"opacity\",\"focus\",\"click\",\"appendChild\",\"removeAttribute\",\"fileTypes\",\"assignDrop\",\"unAssignDrop\",\"removeEventListener\",\"num\",\"totalDone\",\"totalSize\",\"addFiles\",\"splice\",\"getSize\",\"handleDropEvent\",\"handleChangeEvent\",\"updateQuery\"],\"mappings\":\"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\",\"sourcesContent\":[\"/*\\n* MIT Licensed\\n* http://www.23developer.com/opensource\\n* http://github.com/23/resumable.js\\n* Steffen Tiedemann Christensen, steffen@23company.com\\n*/\\n(function () {\\n  \\\"use strict\\\";\\n\\n  var Resumable = function Resumable(opts) {\\n    if (!(this instanceof Resumable)) {\\n      return new Resumable(opts);\\n    }\\n\\n    this.version = 1.0; // SUPPORTED BY BROWSER?\\n    // Check if these features are support by the browser:\\n    // - File object type\\n    // - Blob object type\\n    // - FileList object type\\n    // - slicing files\\n\\n    this.support = typeof File !== 'undefined' && typeof Blob !== 'undefined' && typeof FileList !== 'undefined' && (!!Blob.prototype.webkitSlice || !!Blob.prototype.mozSlice || !!Blob.prototype.slice || false);\\n    if (!this.support) return false; // PROPERTIES\\n\\n    var $ = this;\\n    $.files = [];\\n    $.defaults = {\\n      chunkSize: 1 * 1024 * 1024,\\n      forceChunkSize: false,\\n      simultaneousUploads: 3,\\n      fileParameterName: 'file',\\n      chunkNumberParameterName: 'resumableChunkNumber',\\n      chunkSizeParameterName: 'resumableChunkSize',\\n      currentChunkSizeParameterName: 'resumableCurrentChunkSize',\\n      totalSizeParameterName: 'resumableTotalSize',\\n      typeParameterName: 'resumableType',\\n      identifierParameterName: 'resumableIdentifier',\\n      fileNameParameterName: 'resumableFilename',\\n      relativePathParameterName: 'resumableRelativePath',\\n      totalChunksParameterName: 'resumableTotalChunks',\\n      throttleProgressCallbacks: 0.5,\\n      query: {},\\n      headers: {},\\n      preprocess: null,\\n      method: 'multipart',\\n      uploadMethod: 'POST',\\n      testMethod: 'GET',\\n      prioritizeFirstAndLastChunk: false,\\n      target: '/',\\n      testTarget: null,\\n      parameterNamespace: '',\\n      testChunks: true,\\n      generateUniqueIdentifier: null,\\n      getTarget: null,\\n      maxChunkRetries: 100,\\n      chunkRetryInterval: undefined,\\n      permanentErrors: [400, 404, 415, 500, 501],\\n      maxFiles: undefined,\\n      withCredentials: false,\\n      xhrTimeout: 0,\\n      clearInput: true,\\n      chunkFormat: 'blob',\\n      setChunkTypeFromFile: false,\\n      maxFilesErrorCallback: function maxFilesErrorCallback(files, errorCount) {\\n        var maxFiles = $.getOpt('maxFiles');\\n        alert('Please upload no more than ' + maxFiles + ' file' + (maxFiles === 1 ? '' : 's') + ' at a time.');\\n      },\\n      minFileSize: 1,\\n      minFileSizeErrorCallback: function minFileSizeErrorCallback(file, errorCount) {\\n        alert(file.fileName || file.name + ' is too small, please upload files larger than ' + $h.formatSize($.getOpt('minFileSize')) + '.');\\n      },\\n      maxFileSize: undefined,\\n      maxFileSizeErrorCallback: function maxFileSizeErrorCallback(file, errorCount) {\\n        alert(file.fileName || file.name + ' is too large, please upload files less than ' + $h.formatSize($.getOpt('maxFileSize')) + '.');\\n      },\\n      fileType: [],\\n      fileTypeErrorCallback: function fileTypeErrorCallback(file, errorCount) {\\n        alert(file.fileName || file.name + ' has type not allowed, please upload files of type ' + $.getOpt('fileType') + '.');\\n      }\\n    };\\n    $.opts = opts || {};\\n\\n    $.getOpt = function (o) {\\n      var $opt = this; // Get multiple option if passed an array\\n\\n      if (o instanceof Array) {\\n        var options = {};\\n        $h.each(o, function (option) {\\n          options[option] = $opt.getOpt(option);\\n        });\\n        return options;\\n      } // Otherwise, just return a simple option\\n\\n\\n      if ($opt instanceof ResumableChunk) {\\n        if (typeof $opt.opts[o] !== 'undefined') {\\n          return $opt.opts[o];\\n        } else {\\n          $opt = $opt.fileObj;\\n        }\\n      }\\n\\n      if ($opt instanceof ResumableFile) {\\n        if (typeof $opt.opts[o] !== 'undefined') {\\n          return $opt.opts[o];\\n        } else {\\n          $opt = $opt.resumableObj;\\n        }\\n      }\\n\\n      if ($opt instanceof Resumable) {\\n        if (typeof $opt.opts[o] !== 'undefined') {\\n          return $opt.opts[o];\\n        } else {\\n          return $opt.defaults[o];\\n        }\\n      }\\n    }; // EVENTS\\n    // catchAll(event, ...)\\n    // fileSuccess(file), fileProgress(file), fileAdded(file, event), filesAdded(files, filesSkipped), fileRetry(file),\\n    // fileError(file, message), complete(), progress(), error(message, file), pause()\\n\\n\\n    $.events = [];\\n\\n    $.on = function (event, callback) {\\n      $.events.push(event.toLowerCase(), callback);\\n    };\\n\\n    $.fire = function () {\\n      // `arguments` is an object, not array, in FF, so:\\n      var args = [];\\n\\n      for (var i = 0; i < arguments.length; i++) {\\n        args.push(arguments[i]);\\n      } // Find event listeners, and support pseudo-event `catchAll`\\n\\n\\n      var event = args[0].toLowerCase();\\n\\n      for (var i = 0; i <= $.events.length; i += 2) {\\n        if ($.events[i] == event) $.events[i + 1].apply($, args.slice(1));\\n        if ($.events[i] == 'catchall') $.events[i + 1].apply(null, args);\\n      }\\n\\n      if (event == 'fileerror') $.fire('error', args[2], args[1]);\\n      if (event == 'fileprogress') $.fire('progress');\\n    }; // INTERNAL HELPER METHODS (handy, but ultimately not part of uploading)\\n\\n\\n    var $h = {\\n      stopEvent: function stopEvent(e) {\\n        e.stopPropagation();\\n        e.preventDefault();\\n      },\\n      each: function each(o, callback) {\\n        if (typeof o.length !== 'undefined') {\\n          for (var i = 0; i < o.length; i++) {\\n            // Array or FileList\\n            if (callback(o[i]) === false) return;\\n          }\\n        } else {\\n          for (i in o) {\\n            // Object\\n            if (callback(i, o[i]) === false) return;\\n          }\\n        }\\n      },\\n      generateUniqueIdentifier: function generateUniqueIdentifier(file, event) {\\n        var custom = $.getOpt('generateUniqueIdentifier');\\n\\n        if (typeof custom === 'function') {\\n          return custom(file, event);\\n        }\\n\\n        var relativePath = file.webkitRelativePath || file.fileName || file.name; // Some confusion in different versions of Firefox\\n\\n        var size = file.size;\\n        return size + '-' + relativePath.replace(/[^0-9a-zA-Z_-]/img, '');\\n      },\\n      contains: function contains(array, test) {\\n        var result = false;\\n        $h.each(array, function (value) {\\n          if (value == test) {\\n            result = true;\\n            return false;\\n          }\\n\\n          return true;\\n        });\\n        return result;\\n      },\\n      formatSize: function formatSize(size) {\\n        if (size < 1024) {\\n          return size + ' bytes';\\n        } else if (size < 1024 * 1024) {\\n          return (size / 1024.0).toFixed(0) + ' KB';\\n        } else if (size < 1024 * 1024 * 1024) {\\n          return (size / 1024.0 / 1024.0).toFixed(1) + ' MB';\\n        } else {\\n          return (size / 1024.0 / 1024.0 / 1024.0).toFixed(1) + ' GB';\\n        }\\n      },\\n      getTarget: function getTarget(request, params) {\\n        var target = $.getOpt('target');\\n\\n        if (request === 'test' && $.getOpt('testTarget')) {\\n          target = $.getOpt('testTarget') === '/' ? $.getOpt('target') : $.getOpt('testTarget');\\n        }\\n\\n        if (typeof target === 'function') {\\n          return target(params);\\n        }\\n\\n        var separator = target.indexOf('?') < 0 ? '?' : '&';\\n        var joinedParams = params.join('&');\\n        return target + separator + joinedParams;\\n      }\\n    };\\n\\n    var onDrop = function onDrop(event) {\\n      $h.stopEvent(event); //handle dropped things as items if we can (this lets us deal with folders nicer in some cases)\\n\\n      if (event.dataTransfer && event.dataTransfer.items) {\\n        loadFiles(event.dataTransfer.items, event);\\n      } //else handle them as files\\n      else if (event.dataTransfer && event.dataTransfer.files) {\\n          loadFiles(event.dataTransfer.files, event);\\n        }\\n    };\\n\\n    var preventDefault = function preventDefault(e) {\\n      e.preventDefault();\\n    };\\n    /**\\n     * processes a single upload item (file or directory)\\n     * @param {Object} item item to upload, may be file or directory entry\\n     * @param {string} path current file path\\n     * @param {File[]} items list of files to append new items to\\n     * @param {Function} cb callback invoked when item is processed\\n     */\\n\\n\\n    function processItem(item, path, items, cb) {\\n      var entry;\\n\\n      if (item.isFile) {\\n        // file provided\\n        return item.file(function (file) {\\n          file.relativePath = path + file.name;\\n          items.push(file);\\n          cb();\\n        });\\n      } else if (item.isDirectory) {\\n        // item is already a directory entry, just assign\\n        entry = item;\\n      } else if (item instanceof File) {\\n        items.push(item);\\n      }\\n\\n      if ('function' === typeof item.webkitGetAsEntry) {\\n        // get entry from file object\\n        entry = item.webkitGetAsEntry();\\n      }\\n\\n      if (entry && entry.isDirectory) {\\n        // directory provided, process it\\n        return processDirectory(entry, path + entry.name + '/', items, cb);\\n      }\\n\\n      if ('function' === typeof item.getAsFile) {\\n        // item represents a File object, convert it\\n        item = item.getAsFile();\\n\\n        if (item instanceof File) {\\n          item.relativePath = path + item.name;\\n          items.push(item);\\n        }\\n      }\\n\\n      cb(); // indicate processing is done\\n    }\\n    /**\\n     * cps-style list iteration.\\n     * invokes all functions in list and waits for their callback to be\\n     * triggered.\\n     * @param  {Function[]}   items list of functions expecting callback parameter\\n     * @param  {Function} cb    callback to trigger after the last callback has been invoked\\n     */\\n\\n\\n    function processCallbacks(items, cb) {\\n      if (!items || items.length === 0) {\\n        // empty or no list, invoke callback\\n        return cb();\\n      } // invoke current function, pass the next part as continuation\\n\\n\\n      items[0](function () {\\n        processCallbacks(items.slice(1), cb);\\n      });\\n    }\\n    /**\\n     * recursively traverse directory and collect files to upload\\n     * @param  {Object}   directory directory to process\\n     * @param  {string}   path      current path\\n     * @param  {File[]}   items     target list of items\\n     * @param  {Function} cb        callback invoked after traversing directory\\n     */\\n\\n\\n    function processDirectory(directory, path, items, cb) {\\n      var dirReader = directory.createReader();\\n      dirReader.readEntries(function (entries) {\\n        if (!entries.length) {\\n          // empty directory, skip\\n          return cb();\\n        } // process all conversion callbacks, finally invoke own one\\n\\n\\n        processCallbacks(entries.map(function (entry) {\\n          // bind all properties except for callback\\n          return processItem.bind(null, entry, path, items);\\n        }), cb);\\n      });\\n    }\\n    /**\\n     * process items to extract files to be uploaded\\n     * @param  {File[]} items items to process\\n     * @param  {Event} event event that led to upload\\n     */\\n\\n\\n    function loadFiles(items, event) {\\n      if (!items.length) {\\n        return; // nothing to do\\n      }\\n\\n      $.fire('beforeAdd');\\n      var files = [];\\n      processCallbacks(Array.prototype.map.call(items, function (item) {\\n        // bind all properties except for callback\\n        return processItem.bind(null, item, \\\"\\\", files);\\n      }), function () {\\n        if (files.length) {\\n          // at least one file found\\n          appendFilesFromFileList(files, event);\\n        }\\n      });\\n    }\\n\\n    ;\\n\\n    var appendFilesFromFileList = function appendFilesFromFileList(fileList, event) {\\n      // check for uploading too many files\\n      var errorCount = 0;\\n      var o = $.getOpt(['maxFiles', 'minFileSize', 'maxFileSize', 'maxFilesErrorCallback', 'minFileSizeErrorCallback', 'maxFileSizeErrorCallback', 'fileType', 'fileTypeErrorCallback']);\\n\\n      if (typeof o.maxFiles !== 'undefined' && o.maxFiles < fileList.length + $.files.length) {\\n        // if single-file upload, file is already added, and trying to add 1 new file, simply replace the already-added file\\n        if (o.maxFiles === 1 && $.files.length === 1 && fileList.length === 1) {\\n          $.removeFile($.files[0]);\\n        } else {\\n          o.maxFilesErrorCallback(fileList, errorCount++);\\n          return false;\\n        }\\n      }\\n\\n      var files = [],\\n          filesSkipped = [],\\n          remaining = fileList.length;\\n\\n      var decreaseReamining = function decreaseReamining() {\\n        if (! --remaining) {\\n          // all files processed, trigger event\\n          if (!files.length && !filesSkipped.length) {\\n            // no succeeded files, just skip\\n            return;\\n          }\\n\\n          window.setTimeout(function () {\\n            $.fire('filesAdded', files, filesSkipped);\\n          }, 0);\\n        }\\n      };\\n\\n      $h.each(fileList, function (file) {\\n        var fileName = file.name;\\n\\n        if (o.fileType.length > 0) {\\n          var fileTypeFound = false;\\n\\n          for (var index in o.fileType) {\\n            var extension = '.' + o.fileType[index];\\n\\n            if (fileName.toLowerCase().indexOf(extension.toLowerCase(), fileName.length - extension.length) !== -1) {\\n              fileTypeFound = true;\\n              break;\\n            }\\n          }\\n\\n          if (!fileTypeFound) {\\n            o.fileTypeErrorCallback(file, errorCount++);\\n            return false;\\n          }\\n        }\\n\\n        if (typeof o.minFileSize !== 'undefined' && file.size < o.minFileSize) {\\n          o.minFileSizeErrorCallback(file, errorCount++);\\n          return false;\\n        }\\n\\n        if (typeof o.maxFileSize !== 'undefined' && file.size > o.maxFileSize) {\\n          o.maxFileSizeErrorCallback(file, errorCount++);\\n          return false;\\n        }\\n\\n        function addFile(uniqueIdentifier) {\\n          if (!$.getFromUniqueIdentifier(uniqueIdentifier)) {\\n            (function () {\\n              file.uniqueIdentifier = uniqueIdentifier;\\n              var f = new ResumableFile($, file, uniqueIdentifier);\\n              $.files.push(f);\\n              files.push(f);\\n              f.container = typeof event != 'undefined' ? event.srcElement : null;\\n              window.setTimeout(function () {\\n                $.fire('fileAdded', f, event);\\n              }, 0);\\n            })();\\n          } else {\\n            filesSkipped.push(file);\\n          }\\n\\n          ;\\n          decreaseReamining();\\n        } // directories have size == 0\\n\\n\\n        var uniqueIdentifier = $h.generateUniqueIdentifier(file, event);\\n\\n        if (uniqueIdentifier && typeof uniqueIdentifier.then === 'function') {\\n          // Promise or Promise-like object provided as unique identifier\\n          uniqueIdentifier.then(function (uniqueIdentifier) {\\n            // unique identifier generation succeeded\\n            addFile(uniqueIdentifier);\\n          }, function () {\\n            // unique identifier generation failed\\n            // skip further processing, only decrease file count\\n            decreaseReamining();\\n          });\\n        } else {\\n          // non-Promise provided as unique identifier, process synchronously\\n          addFile(uniqueIdentifier);\\n        }\\n      });\\n    }; // INTERNAL OBJECT TYPES\\n\\n\\n    function ResumableFile(resumableObj, file, uniqueIdentifier) {\\n      var $ = this;\\n      $.opts = {};\\n      $.getOpt = resumableObj.getOpt;\\n      $._prevProgress = 0;\\n      $.resumableObj = resumableObj;\\n      $.file = file;\\n      $.fileName = file.fileName || file.name; // Some confusion in different versions of Firefox\\n\\n      $.size = file.size;\\n      $.relativePath = file.relativePath || file.webkitRelativePath || $.fileName;\\n      $.uniqueIdentifier = uniqueIdentifier;\\n      $._pause = false;\\n      $.container = '';\\n\\n      var _error = uniqueIdentifier !== undefined; // Callback when something happens within the chunk\\n\\n\\n      var chunkEvent = function chunkEvent(event, message) {\\n        // event can be 'progress', 'success', 'error' or 'retry'\\n        switch (event) {\\n          case 'progress':\\n            $.resumableObj.fire('fileProgress', $, message);\\n            break;\\n\\n          case 'error':\\n            $.abort();\\n            _error = true;\\n            $.chunks = [];\\n            $.resumableObj.fire('fileError', $, message);\\n            break;\\n\\n          case 'success':\\n            if (_error) return;\\n            $.resumableObj.fire('fileProgress', $); // it's at least progress\\n\\n            if ($.isComplete()) {\\n              $.resumableObj.fire('fileSuccess', $, message);\\n            }\\n\\n            break;\\n\\n          case 'retry':\\n            $.resumableObj.fire('fileRetry', $);\\n            break;\\n        }\\n      }; // Main code to set up a file object with chunks,\\n      // packaged to be able to handle retries if needed.\\n\\n\\n      $.chunks = [];\\n\\n      $.abort = function () {\\n        // Stop current uploads\\n        var abortCount = 0;\\n        $h.each($.chunks, function (c) {\\n          if (c.status() == 'uploading') {\\n            c.abort();\\n            abortCount++;\\n          }\\n        });\\n        if (abortCount > 0) $.resumableObj.fire('fileProgress', $);\\n      };\\n\\n      $.cancel = function () {\\n        // Reset this file to be void\\n        var _chunks = $.chunks;\\n        $.chunks = []; // Stop current uploads\\n\\n        $h.each(_chunks, function (c) {\\n          if (c.status() == 'uploading') {\\n            c.abort();\\n            $.resumableObj.uploadNextChunk();\\n          }\\n        });\\n        $.resumableObj.removeFile($);\\n        $.resumableObj.fire('fileProgress', $);\\n      };\\n\\n      $.retry = function () {\\n        $.bootstrap();\\n        var firedRetry = false;\\n        $.resumableObj.on('chunkingComplete', function () {\\n          if (!firedRetry) $.resumableObj.upload();\\n          firedRetry = true;\\n        });\\n      };\\n\\n      $.bootstrap = function () {\\n        $.abort();\\n        _error = false; // Rebuild stack of chunks from file\\n\\n        $.chunks = [];\\n        $._prevProgress = 0;\\n        var round = $.getOpt('forceChunkSize') ? Math.ceil : Math.floor;\\n        var maxOffset = Math.max(round($.file.size / $.getOpt('chunkSize')), 1);\\n\\n        for (var offset = 0; offset < maxOffset; offset++) {\\n          (function (offset) {\\n            window.setTimeout(function () {\\n              $.chunks.push(new ResumableChunk($.resumableObj, $, offset, chunkEvent));\\n              $.resumableObj.fire('chunkingProgress', $, offset / maxOffset);\\n            }, 0);\\n          })(offset);\\n        }\\n\\n        window.setTimeout(function () {\\n          $.resumableObj.fire('chunkingComplete', $);\\n        }, 0);\\n      };\\n\\n      $.progress = function () {\\n        if (_error) return 1; // Sum up progress across everything\\n\\n        var ret = 0;\\n        var error = false;\\n        $h.each($.chunks, function (c) {\\n          if (c.status() == 'error') error = true;\\n          ret += c.progress(true); // get chunk progress relative to entire file\\n        });\\n        ret = error ? 1 : ret > 0.99999 ? 1 : ret;\\n        ret = Math.max($._prevProgress, ret); // We don't want to lose percentages when an upload is paused\\n\\n        $._prevProgress = ret;\\n        return ret;\\n      };\\n\\n      $.isUploading = function () {\\n        var uploading = false;\\n        $h.each($.chunks, function (chunk) {\\n          if (chunk.status() == 'uploading') {\\n            uploading = true;\\n            return false;\\n          }\\n        });\\n        return uploading;\\n      };\\n\\n      $.isComplete = function () {\\n        var outstanding = false;\\n        $h.each($.chunks, function (chunk) {\\n          var status = chunk.status();\\n\\n          if (status == 'pending' || status == 'uploading' || chunk.preprocessState === 1) {\\n            outstanding = true;\\n            return false;\\n          }\\n        });\\n        return !outstanding;\\n      };\\n\\n      $.pause = function (pause) {\\n        if (typeof pause === 'undefined') {\\n          $._pause = $._pause ? false : true;\\n        } else {\\n          $._pause = pause;\\n        }\\n      };\\n\\n      $.isPaused = function () {\\n        return $._pause;\\n      }; // Bootstrap and return\\n\\n\\n      $.resumableObj.fire('chunkingStart', $);\\n      $.bootstrap();\\n      return this;\\n    }\\n\\n    function ResumableChunk(resumableObj, fileObj, offset, callback) {\\n      var $ = this;\\n      $.opts = {};\\n      $.getOpt = resumableObj.getOpt;\\n      $.resumableObj = resumableObj;\\n      $.fileObj = fileObj;\\n      $.fileObjSize = fileObj.size;\\n      $.fileObjType = fileObj.file.type;\\n      $.offset = offset;\\n      $.callback = callback;\\n      $.lastProgressCallback = new Date();\\n      $.tested = false;\\n      $.retries = 0;\\n      $.pendingRetry = false;\\n      $.preprocessState = 0; // 0 = unprocessed, 1 = processing, 2 = finished\\n      // Computed properties\\n\\n      var chunkSize = $.getOpt('chunkSize');\\n      $.loaded = 0;\\n      $.startByte = $.offset * chunkSize;\\n      $.endByte = Math.min($.fileObjSize, ($.offset + 1) * chunkSize);\\n\\n      if ($.fileObjSize - $.endByte < chunkSize && !$.getOpt('forceChunkSize')) {\\n        // The last chunk will be bigger than the chunk size, but less than 2*chunkSize\\n        $.endByte = $.fileObjSize;\\n      }\\n\\n      $.xhr = null; // test() makes a GET request without any data to see if the chunk has already been uploaded in a previous session\\n\\n      $.test = function () {\\n        // Set up request and listen for event\\n        $.xhr = new XMLHttpRequest();\\n\\n        var testHandler = function testHandler(e) {\\n          $.tested = true;\\n          var status = $.status();\\n\\n          if (status == 'success') {\\n            $.callback(status, $.message());\\n            $.resumableObj.uploadNextChunk();\\n          } else {\\n            $.send();\\n          }\\n        };\\n\\n        $.xhr.addEventListener('load', testHandler, false);\\n        $.xhr.addEventListener('error', testHandler, false);\\n        $.xhr.addEventListener('timeout', testHandler, false); // Add data from the query options\\n\\n        var params = [];\\n        var parameterNamespace = $.getOpt('parameterNamespace');\\n        var customQuery = $.getOpt('query');\\n        if (typeof customQuery == 'function') customQuery = customQuery($.fileObj, $);\\n        $h.each(customQuery, function (k, v) {\\n          params.push([encodeURIComponent(parameterNamespace + k), encodeURIComponent(v)].join('='));\\n        }); // Add extra data to identify chunk\\n\\n        params = params.concat([// define key/value pairs for additional parameters\\n        ['chunkNumberParameterName', $.offset + 1], ['chunkSizeParameterName', $.getOpt('chunkSize')], ['currentChunkSizeParameterName', $.endByte - $.startByte], ['totalSizeParameterName', $.fileObjSize], ['typeParameterName', $.fileObjType], ['identifierParameterName', $.fileObj.uniqueIdentifier], ['fileNameParameterName', $.fileObj.fileName], ['relativePathParameterName', $.fileObj.relativePath], ['totalChunksParameterName', $.fileObj.chunks.length]].filter(function (pair) {\\n          // include items that resolve to truthy values\\n          // i.e. exclude false, null, undefined and empty strings\\n          return $.getOpt(pair[0]);\\n        }).map(function (pair) {\\n          // map each key/value pair to its final form\\n          return [parameterNamespace + $.getOpt(pair[0]), encodeURIComponent(pair[1])].join('=');\\n        })); // Append the relevant chunk and send it\\n\\n        $.xhr.open($.getOpt('testMethod'), $h.getTarget('test', params));\\n        $.xhr.timeout = $.getOpt('xhrTimeout');\\n        $.xhr.withCredentials = $.getOpt('withCredentials'); // Add data from header options\\n\\n        var customHeaders = $.getOpt('headers');\\n\\n        if (typeof customHeaders === 'function') {\\n          customHeaders = customHeaders($.fileObj, $);\\n        }\\n\\n        $h.each(customHeaders, function (k, v) {\\n          $.xhr.setRequestHeader(k, v);\\n        });\\n        $.xhr.send(null);\\n      };\\n\\n      $.preprocessFinished = function () {\\n        $.preprocessState = 2;\\n        $.send();\\n      }; // send() uploads the actual data in a POST call\\n\\n\\n      $.send = function () {\\n        var preprocess = $.getOpt('preprocess');\\n\\n        if (typeof preprocess === 'function') {\\n          switch ($.preprocessState) {\\n            case 0:\\n              $.preprocessState = 1;\\n              preprocess($);\\n              return;\\n\\n            case 1:\\n              return;\\n\\n            case 2:\\n              break;\\n          }\\n        }\\n\\n        if ($.getOpt('testChunks') && !$.tested) {\\n          $.test();\\n          return;\\n        } // Set up request and listen for event\\n\\n\\n        $.xhr = new XMLHttpRequest(); // Progress\\n\\n        $.xhr.upload.addEventListener('progress', function (e) {\\n          if (new Date() - $.lastProgressCallback > $.getOpt('throttleProgressCallbacks') * 1000) {\\n            $.callback('progress');\\n            $.lastProgressCallback = new Date();\\n          }\\n\\n          $.loaded = e.loaded || 0;\\n        }, false);\\n        $.loaded = 0;\\n        $.pendingRetry = false;\\n        $.callback('progress'); // Done (either done, failed or retry)\\n\\n        var doneHandler = function doneHandler(e) {\\n          var status = $.status();\\n\\n          if (status == 'success' || status == 'error') {\\n            $.callback(status, $.message());\\n            $.resumableObj.uploadNextChunk();\\n          } else {\\n            $.callback('retry', $.message());\\n            $.abort();\\n            $.retries++;\\n            var retryInterval = $.getOpt('chunkRetryInterval');\\n\\n            if (retryInterval !== undefined) {\\n              $.pendingRetry = true;\\n              setTimeout($.send, retryInterval);\\n            } else {\\n              $.send();\\n            }\\n          }\\n        };\\n\\n        $.xhr.addEventListener('load', doneHandler, false);\\n        $.xhr.addEventListener('error', doneHandler, false);\\n        $.xhr.addEventListener('timeout', doneHandler, false); // Set up the basic query data from Resumable\\n\\n        var query = [['chunkNumberParameterName', $.offset + 1], ['chunkSizeParameterName', $.getOpt('chunkSize')], ['currentChunkSizeParameterName', $.endByte - $.startByte], ['totalSizeParameterName', $.fileObjSize], ['typeParameterName', $.fileObjType], ['identifierParameterName', $.fileObj.uniqueIdentifier], ['fileNameParameterName', $.fileObj.fileName], ['relativePathParameterName', $.fileObj.relativePath], ['totalChunksParameterName', $.fileObj.chunks.length]].filter(function (pair) {\\n          // include items that resolve to truthy values\\n          // i.e. exclude false, null, undefined and empty strings\\n          return $.getOpt(pair[0]);\\n        }).reduce(function (query, pair) {\\n          // assign query key/value\\n          query[$.getOpt(pair[0])] = pair[1];\\n          return query;\\n        }, {}); // Mix in custom data\\n\\n        var customQuery = $.getOpt('query');\\n        if (typeof customQuery == 'function') customQuery = customQuery($.fileObj, $);\\n        $h.each(customQuery, function (k, v) {\\n          query[k] = v;\\n        });\\n        var func = $.fileObj.file.slice ? 'slice' : $.fileObj.file.mozSlice ? 'mozSlice' : $.fileObj.file.webkitSlice ? 'webkitSlice' : 'slice';\\n        var bytes = $.fileObj.file[func]($.startByte, $.endByte, $.getOpt('setChunkTypeFromFile') ? $.fileObj.file.type : \\\"\\\");\\n        var data = null;\\n        var params = [];\\n        var parameterNamespace = $.getOpt('parameterNamespace');\\n\\n        if ($.getOpt('method') === 'octet') {\\n          // Add data from the query options\\n          data = bytes;\\n          $h.each(query, function (k, v) {\\n            params.push([encodeURIComponent(parameterNamespace + k), encodeURIComponent(v)].join('='));\\n          });\\n        } else {\\n          // Add data from the query options\\n          data = new FormData();\\n          $h.each(query, function (k, v) {\\n            data.append(parameterNamespace + k, v);\\n            params.push([encodeURIComponent(parameterNamespace + k), encodeURIComponent(v)].join('='));\\n          });\\n\\n          if ($.getOpt('chunkFormat') == 'blob') {\\n            data.append(parameterNamespace + $.getOpt('fileParameterName'), bytes, $.fileObj.fileName);\\n          } else if ($.getOpt('chunkFormat') == 'base64') {\\n            var fr = new FileReader();\\n\\n            fr.onload = function (e) {\\n              data.append(parameterNamespace + $.getOpt('fileParameterName'), fr.result);\\n              $.xhr.send(data);\\n            };\\n\\n            fr.readAsDataURL(bytes);\\n          }\\n        }\\n\\n        var target = $h.getTarget('upload', params);\\n        var method = $.getOpt('uploadMethod');\\n        $.xhr.open(method, target);\\n\\n        if ($.getOpt('method') === 'octet') {\\n          $.xhr.setRequestHeader('Content-Type', 'application/octet-stream');\\n        }\\n\\n        $.xhr.timeout = $.getOpt('xhrTimeout');\\n        $.xhr.withCredentials = $.getOpt('withCredentials'); // Add data from header options\\n\\n        var customHeaders = $.getOpt('headers');\\n\\n        if (typeof customHeaders === 'function') {\\n          customHeaders = customHeaders($.fileObj, $);\\n        }\\n\\n        $h.each(customHeaders, function (k, v) {\\n          $.xhr.setRequestHeader(k, v);\\n        });\\n\\n        if ($.getOpt('chunkFormat') == 'blob') {\\n          $.xhr.send(data);\\n        }\\n      };\\n\\n      $.abort = function () {\\n        // Abort and reset\\n        if ($.xhr) $.xhr.abort();\\n        $.xhr = null;\\n      };\\n\\n      $.status = function () {\\n        // Returns: 'pending', 'uploading', 'success', 'error'\\n        if ($.pendingRetry) {\\n          // if pending retry then that's effectively the same as actively uploading,\\n          // there might just be a slight delay before the retry starts\\n          return 'uploading';\\n        } else if (!$.xhr) {\\n          return 'pending';\\n        } else if ($.xhr.readyState < 4) {\\n          // Status is really 'OPENED', 'HEADERS_RECEIVED' or 'LOADING' - meaning that stuff is happening\\n          return 'uploading';\\n        } else {\\n          if ($.xhr.status == 200 || $.xhr.status == 201) {\\n            // HTTP 200, 201 (created)\\n            return 'success';\\n          } else if ($h.contains($.getOpt('permanentErrors'), $.xhr.status) || $.retries >= $.getOpt('maxChunkRetries')) {\\n            // HTTP 415/500/501, permanent error\\n            return 'error';\\n          } else {\\n            // this should never happen, but we'll reset and queue a retry\\n            // a likely case for this would be 503 service unavailable\\n            $.abort();\\n            return 'pending';\\n          }\\n        }\\n      };\\n\\n      $.message = function () {\\n        return $.xhr ? $.xhr.responseText : '';\\n      };\\n\\n      $.progress = function (relative) {\\n        if (typeof relative === 'undefined') relative = false;\\n        var factor = relative ? ($.endByte - $.startByte) / $.fileObjSize : 1;\\n        if ($.pendingRetry) return 0;\\n        if (!$.xhr || !$.xhr.status) factor *= .95;\\n        var s = $.status();\\n\\n        switch (s) {\\n          case 'success':\\n          case 'error':\\n            return 1 * factor;\\n\\n          case 'pending':\\n            return 0 * factor;\\n\\n          default:\\n            return $.loaded / ($.endByte - $.startByte) * factor;\\n        }\\n      };\\n\\n      return this;\\n    } // QUEUE\\n\\n\\n    $.uploadNextChunk = function () {\\n      var found = false; // In some cases (such as videos) it's really handy to upload the first\\n      // and last chunk of a file quickly; this let's the server check the file's\\n      // metadata and determine if there's even a point in continuing.\\n\\n      if ($.getOpt('prioritizeFirstAndLastChunk')) {\\n        $h.each($.files, function (file) {\\n          if (file.chunks.length && file.chunks[0].status() == 'pending' && file.chunks[0].preprocessState === 0) {\\n            file.chunks[0].send();\\n            found = true;\\n            return false;\\n          }\\n\\n          if (file.chunks.length > 1 && file.chunks[file.chunks.length - 1].status() == 'pending' && file.chunks[file.chunks.length - 1].preprocessState === 0) {\\n            file.chunks[file.chunks.length - 1].send();\\n            found = true;\\n            return false;\\n          }\\n        });\\n        if (found) return true;\\n      } // Now, simply look for the next, best thing to upload\\n\\n\\n      $h.each($.files, function (file) {\\n        if (file.isPaused() === false) {\\n          $h.each(file.chunks, function (chunk) {\\n            if (chunk.status() == 'pending' && chunk.preprocessState === 0) {\\n              chunk.send();\\n              found = true;\\n              return false;\\n            }\\n          });\\n        }\\n\\n        if (found) return false;\\n      });\\n      if (found) return true; // The are no more outstanding chunks to upload, check is everything is done\\n\\n      var outstanding = false;\\n      $h.each($.files, function (file) {\\n        if (!file.isComplete()) {\\n          outstanding = true;\\n          return false;\\n        }\\n      });\\n\\n      if (!outstanding) {\\n        // All chunks have been uploaded, complete\\n        $.fire('complete');\\n      }\\n\\n      return false;\\n    }; // PUBLIC METHODS FOR RESUMABLE.JS\\n\\n\\n    $.assignBrowse = function (domNodes, isDirectory) {\\n      if (typeof domNodes.length == 'undefined') domNodes = [domNodes];\\n      $h.each(domNodes, function (domNode) {\\n        var input;\\n\\n        if (domNode.tagName === 'INPUT' && domNode.type === 'file') {\\n          input = domNode;\\n        } else {\\n          input = document.createElement('input');\\n          input.setAttribute('type', 'file');\\n          input.style.display = 'none';\\n          domNode.addEventListener('click', function () {\\n            input.style.opacity = 0;\\n            input.style.display = 'block';\\n            input.focus();\\n            input.click();\\n            input.style.display = 'none';\\n          }, false);\\n          domNode.appendChild(input);\\n        }\\n\\n        var maxFiles = $.getOpt('maxFiles');\\n\\n        if (typeof maxFiles === 'undefined' || maxFiles != 1) {\\n          input.setAttribute('multiple', 'multiple');\\n        } else {\\n          input.removeAttribute('multiple');\\n        }\\n\\n        if (isDirectory) {\\n          input.setAttribute('webkitdirectory', 'webkitdirectory');\\n        } else {\\n          input.removeAttribute('webkitdirectory');\\n        }\\n\\n        var fileTypes = $.getOpt('fileType');\\n\\n        if (typeof fileTypes !== 'undefined' && fileTypes.length >= 1) {\\n          input.setAttribute('accept', fileTypes.map(function (e) {\\n            return '.' + e;\\n          }).join(','));\\n        } else {\\n          input.removeAttribute('accept');\\n        } // When new files are added, simply append them to the overall list\\n\\n\\n        input.addEventListener('change', function (e) {\\n          appendFilesFromFileList(e.target.files, e);\\n          var clearInput = $.getOpt('clearInput');\\n\\n          if (clearInput) {\\n            e.target.value = '';\\n          }\\n        }, false);\\n      });\\n    };\\n\\n    $.assignDrop = function (domNodes) {\\n      if (typeof domNodes.length == 'undefined') domNodes = [domNodes];\\n      $h.each(domNodes, function (domNode) {\\n        domNode.addEventListener('dragover', preventDefault, false);\\n        domNode.addEventListener('dragenter', preventDefault, false);\\n        domNode.addEventListener('drop', onDrop, false);\\n      });\\n    };\\n\\n    $.unAssignDrop = function (domNodes) {\\n      if (typeof domNodes.length == 'undefined') domNodes = [domNodes];\\n      $h.each(domNodes, function (domNode) {\\n        domNode.removeEventListener('dragover', preventDefault);\\n        domNode.removeEventListener('dragenter', preventDefault);\\n        domNode.removeEventListener('drop', onDrop);\\n      });\\n    };\\n\\n    $.isUploading = function () {\\n      var uploading = false;\\n      $h.each($.files, function (file) {\\n        if (file.isUploading()) {\\n          uploading = true;\\n          return false;\\n        }\\n      });\\n      return uploading;\\n    };\\n\\n    $.upload = function () {\\n      // Make sure we don't start too many uploads at once\\n      if ($.isUploading()) return; // Kick off the queue\\n\\n      $.fire('uploadStart');\\n\\n      for (var num = 1; num <= $.getOpt('simultaneousUploads'); num++) {\\n        $.uploadNextChunk();\\n      }\\n    };\\n\\n    $.pause = function () {\\n      // Resume all chunks currently being uploaded\\n      $h.each($.files, function (file) {\\n        file.abort();\\n      });\\n      $.fire('pause');\\n    };\\n\\n    $.cancel = function () {\\n      $.fire('beforeCancel');\\n\\n      for (var i = $.files.length - 1; i >= 0; i--) {\\n        $.files[i].cancel();\\n      }\\n\\n      $.fire('cancel');\\n    };\\n\\n    $.progress = function () {\\n      var totalDone = 0;\\n      var totalSize = 0; // Resume all chunks currently being uploaded\\n\\n      $h.each($.files, function (file) {\\n        totalDone += file.progress() * file.size;\\n        totalSize += file.size;\\n      });\\n      return totalSize > 0 ? totalDone / totalSize : 0;\\n    };\\n\\n    $.addFile = function (file, event) {\\n      appendFilesFromFileList([file], event);\\n    };\\n\\n    $.addFiles = function (files, event) {\\n      appendFilesFromFileList(files, event);\\n    };\\n\\n    $.removeFile = function (file) {\\n      for (var i = $.files.length - 1; i >= 0; i--) {\\n        if ($.files[i] === file) {\\n          $.files.splice(i, 1);\\n        }\\n      }\\n    };\\n\\n    $.getFromUniqueIdentifier = function (uniqueIdentifier) {\\n      var ret = false;\\n      $h.each($.files, function (f) {\\n        if (f.uniqueIdentifier == uniqueIdentifier) ret = f;\\n      });\\n      return ret;\\n    };\\n\\n    $.getSize = function () {\\n      var totalSize = 0;\\n      $h.each($.files, function (file) {\\n        totalSize += file.size;\\n      });\\n      return totalSize;\\n    };\\n\\n    $.handleDropEvent = function (e) {\\n      onDrop(e);\\n    };\\n\\n    $.handleChangeEvent = function (e) {\\n      appendFilesFromFileList(e.target.files, e);\\n      e.target.value = '';\\n    };\\n\\n    $.updateQuery = function (query) {\\n      $.opts.query = query;\\n    };\\n\\n    return this;\\n  }; // Node.js-style export for Node and Component\\n\\n\\n  if (typeof module != 'undefined') {\\n    module.exports = Resumable;\\n  } else if (typeof define === \\\"function\\\" && define.amd) {\\n    // AMD/requirejs: Define the module\\n    define(function () {\\n      return Resumable;\\n    });\\n  } else {\\n    // Browser: Expose to window\\n    window.Resumable = Resumable;\\n  }\\n})();\"]}","code":"(window.webpackJsonp=window.webpackJsonp||[]).push([[2],{655:function(e,t,r){!function(){\"use strict\";e.exports=function e(t){if(!(this instanceof e))return new e(t);if(this.version=1,this.support=\"undefined\"!==typeof File&&\"undefined\"!==typeof Blob&&\"undefined\"!==typeof FileList&&(!!Blob.prototype.webkitSlice||!!Blob.prototype.mozSlice||!!Blob.prototype.slice||!1),!this.support)return!1;var r=this;r.files=[],r.defaults={chunkSize:1048576,forceChunkSize:!1,simultaneousUploads:3,fileParameterName:\"file\",chunkNumberParameterName:\"resumableChunkNumber\",chunkSizeParameterName:\"resumableChunkSize\",currentChunkSizeParameterName:\"resumableCurrentChunkSize\",totalSizeParameterName:\"resumableTotalSize\",typeParameterName:\"resumableType\",identifierParameterName:\"resumableIdentifier\",fileNameParameterName:\"resumableFilename\",relativePathParameterName:\"resumableRelativePath\",totalChunksParameterName:\"resumableTotalChunks\",throttleProgressCallbacks:.5,query:{},headers:{},preprocess:null,method:\"multipart\",uploadMethod:\"POST\",testMethod:\"GET\",prioritizeFirstAndLastChunk:!1,target:\"/\",testTarget:null,parameterNamespace:\"\",testChunks:!0,generateUniqueIdentifier:null,getTarget:null,maxChunkRetries:100,chunkRetryInterval:void 0,permanentErrors:[400,404,415,500,501],maxFiles:void 0,withCredentials:!1,xhrTimeout:0,clearInput:!0,chunkFormat:\"blob\",setChunkTypeFromFile:!1,maxFilesErrorCallback:function(e,t){var n=r.getOpt(\"maxFiles\");alert(\"Please upload no more than \"+n+\" file\"+(1===n?\"\":\"s\")+\" at a time.\")},minFileSize:1,minFileSizeErrorCallback:function(e,t){alert(e.fileName||e.name+\" is too small, please upload files larger than \"+n.formatSize(r.getOpt(\"minFileSize\"))+\".\")},maxFileSize:void 0,maxFileSizeErrorCallback:function(e,t){alert(e.fileName||e.name+\" is too large, please upload files less than \"+n.formatSize(r.getOpt(\"maxFileSize\"))+\".\")},fileType:[],fileTypeErrorCallback:function(e,t){alert(e.fileName||e.name+\" has type not allowed, please upload files of type \"+r.getOpt(\"fileType\")+\".\")}},r.opts=t||{},r.getOpt=function(t){var r=this;if(t instanceof Array){var i={};return n.each(t,function(e){i[e]=r.getOpt(e)}),i}if(r instanceof c){if(\"undefined\"!==typeof r.opts[t])return r.opts[t];r=r.fileObj}if(r instanceof f){if(\"undefined\"!==typeof r.opts[t])return r.opts[t];r=r.resumableObj}if(r instanceof e)return\"undefined\"!==typeof r.opts[t]?r.opts[t]:r.defaults[t]},r.events=[],r.on=function(e,t){r.events.push(e.toLowerCase(),t)},r.fire=function(){for(var e=[],t=0;t<arguments.length;t++)e.push(arguments[t]);var n=e[0].toLowerCase();for(t=0;t<=r.events.length;t+=2)r.events[t]==n&&r.events[t+1].apply(r,e.slice(1)),\"catchall\"==r.events[t]&&r.events[t+1].apply(null,e);\"fileerror\"==n&&r.fire(\"error\",e[2],e[1]),\"fileprogress\"==n&&r.fire(\"progress\")};var n={stopEvent:function(e){e.stopPropagation(),e.preventDefault()},each:function(e,t){if(\"undefined\"!==typeof e.length){for(var r=0;r<e.length;r++)if(!1===t(e[r]))return}else for(r in e)if(!1===t(r,e[r]))return},generateUniqueIdentifier:function(e,t){var n=r.getOpt(\"generateUniqueIdentifier\");if(\"function\"===typeof n)return n(e,t);var i=e.webkitRelativePath||e.fileName||e.name;return e.size+\"-\"+i.replace(/[^0-9a-zA-Z_-]/gim,\"\")},contains:function(e,t){var r=!1;return n.each(e,function(e){return e!=t||(r=!0,!1)}),r},formatSize:function(e){return e<1024?e+\" bytes\":e<1048576?(e/1024).toFixed(0)+\" KB\":e<1073741824?(e/1024/1024).toFixed(1)+\" MB\":(e/1024/1024/1024).toFixed(1)+\" GB\"},getTarget:function(e,t){var n=r.getOpt(\"target\");if(\"test\"===e&&r.getOpt(\"testTarget\")&&(n=\"/\"===r.getOpt(\"testTarget\")?r.getOpt(\"target\"):r.getOpt(\"testTarget\")),\"function\"===typeof n)return n(t);var i=n.indexOf(\"?\")<0?\"?\":\"&\";return n+i+t.join(\"&\")}},i=function(e){n.stopEvent(e),e.dataTransfer&&e.dataTransfer.items?u(e.dataTransfer.items,e):e.dataTransfer&&e.dataTransfer.files&&u(e.dataTransfer.files,e)},a=function(e){e.preventDefault()};function s(e,t,r,n){var i;return e.isFile?e.file(function(e){e.relativePath=t+e.name,r.push(e),n()}):(e.isDirectory?i=e:e instanceof File&&r.push(e),\"function\"===typeof e.webkitGetAsEntry&&(i=e.webkitGetAsEntry()),i&&i.isDirectory?function(e,t,r,n){e.createReader().readEntries(function(e){if(!e.length)return n();o(e.map(function(e){return s.bind(null,e,t,r)}),n)})}(i,t+i.name+\"/\",r,n):(\"function\"===typeof e.getAsFile&&(e=e.getAsFile())instanceof File&&(e.relativePath=t+e.name,r.push(e)),void n()))}function o(e,t){if(!e||0===e.length)return t();e[0](function(){o(e.slice(1),t)})}function u(e,t){if(e.length){r.fire(\"beforeAdd\");var n=[];o(Array.prototype.map.call(e,function(e){return s.bind(null,e,\"\",n)}),function(){n.length&&l(n,t)})}}var l=function(e,t){var i=0,a=r.getOpt([\"maxFiles\",\"minFileSize\",\"maxFileSize\",\"maxFilesErrorCallback\",\"minFileSizeErrorCallback\",\"maxFileSizeErrorCallback\",\"fileType\",\"fileTypeErrorCallback\"]);if(\"undefined\"!==typeof a.maxFiles&&a.maxFiles<e.length+r.files.length){if(1!==a.maxFiles||1!==r.files.length||1!==e.length)return a.maxFilesErrorCallback(e,i++),!1;r.removeFile(r.files[0])}var s=[],o=[],u=e.length,l=function(){if(!--u){if(!s.length&&!o.length)return;window.setTimeout(function(){r.fire(\"filesAdded\",s,o)},0)}};n.each(e,function(e){var u=e.name;if(a.fileType.length>0){var c=!1;for(var p in a.fileType){var d=\".\"+a.fileType[p];if(-1!==u.toLowerCase().indexOf(d.toLowerCase(),u.length-d.length)){c=!0;break}}if(!c)return a.fileTypeErrorCallback(e,i++),!1}if(\"undefined\"!==typeof a.minFileSize&&e.size<a.minFileSize)return a.minFileSizeErrorCallback(e,i++),!1;if(\"undefined\"!==typeof a.maxFileSize&&e.size>a.maxFileSize)return a.maxFileSizeErrorCallback(e,i++),!1;function h(n){r.getFromUniqueIdentifier(n)?o.push(e):function(){e.uniqueIdentifier=n;var i=new f(r,e,n);r.files.push(i),s.push(i),i.container=\"undefined\"!=typeof t?t.srcElement:null,window.setTimeout(function(){r.fire(\"fileAdded\",i,t)},0)}(),l()}var m=n.generateUniqueIdentifier(e,t);m&&\"function\"===typeof m.then?m.then(function(e){h(e)},function(){l()}):h(m)})};function f(e,t,r){var i=this;i.opts={},i.getOpt=e.getOpt,i._prevProgress=0,i.resumableObj=e,i.file=t,i.fileName=t.fileName||t.name,i.size=t.size,i.relativePath=t.relativePath||t.webkitRelativePath||i.fileName,i.uniqueIdentifier=r,i._pause=!1,i.container=\"\";var a=void 0!==r,s=function(e,t){switch(e){case\"progress\":i.resumableObj.fire(\"fileProgress\",i,t);break;case\"error\":i.abort(),a=!0,i.chunks=[],i.resumableObj.fire(\"fileError\",i,t);break;case\"success\":if(a)return;i.resumableObj.fire(\"fileProgress\",i),i.isComplete()&&i.resumableObj.fire(\"fileSuccess\",i,t);break;case\"retry\":i.resumableObj.fire(\"fileRetry\",i)}};return i.chunks=[],i.abort=function(){var e=0;n.each(i.chunks,function(t){\"uploading\"==t.status()&&(t.abort(),e++)}),e>0&&i.resumableObj.fire(\"fileProgress\",i)},i.cancel=function(){var e=i.chunks;i.chunks=[],n.each(e,function(e){\"uploading\"==e.status()&&(e.abort(),i.resumableObj.uploadNextChunk())}),i.resumableObj.removeFile(i),i.resumableObj.fire(\"fileProgress\",i)},i.retry=function(){i.bootstrap();var e=!1;i.resumableObj.on(\"chunkingComplete\",function(){e||i.resumableObj.upload(),e=!0})},i.bootstrap=function(){i.abort(),a=!1,i.chunks=[],i._prevProgress=0;for(var e=i.getOpt(\"forceChunkSize\")?Math.ceil:Math.floor,t=Math.max(e(i.file.size/i.getOpt(\"chunkSize\")),1),r=0;r<t;r++)!function(e){window.setTimeout(function(){i.chunks.push(new c(i.resumableObj,i,e,s)),i.resumableObj.fire(\"chunkingProgress\",i,e/t)},0)}(r);window.setTimeout(function(){i.resumableObj.fire(\"chunkingComplete\",i)},0)},i.progress=function(){if(a)return 1;var e=0,t=!1;return n.each(i.chunks,function(r){\"error\"==r.status()&&(t=!0),e+=r.progress(!0)}),e=t?1:e>.99999?1:e,e=Math.max(i._prevProgress,e),i._prevProgress=e,e},i.isUploading=function(){var e=!1;return n.each(i.chunks,function(t){if(\"uploading\"==t.status())return e=!0,!1}),e},i.isComplete=function(){var e=!1;return n.each(i.chunks,function(t){var r=t.status();if(\"pending\"==r||\"uploading\"==r||1===t.preprocessState)return e=!0,!1}),!e},i.pause=function(e){i._pause=\"undefined\"===typeof e?!i._pause:e},i.isPaused=function(){return i._pause},i.resumableObj.fire(\"chunkingStart\",i),i.bootstrap(),this}function c(e,t,r,i){var a=this;a.opts={},a.getOpt=e.getOpt,a.resumableObj=e,a.fileObj=t,a.fileObjSize=t.size,a.fileObjType=t.file.type,a.offset=r,a.callback=i,a.lastProgressCallback=new Date,a.tested=!1,a.retries=0,a.pendingRetry=!1,a.preprocessState=0;var s=a.getOpt(\"chunkSize\");return a.loaded=0,a.startByte=a.offset*s,a.endByte=Math.min(a.fileObjSize,(a.offset+1)*s),a.fileObjSize-a.endByte<s&&!a.getOpt(\"forceChunkSize\")&&(a.endByte=a.fileObjSize),a.xhr=null,a.test=function(){a.xhr=new XMLHttpRequest;var e=function(e){a.tested=!0;var t=a.status();\"success\"==t?(a.callback(t,a.message()),a.resumableObj.uploadNextChunk()):a.send()};a.xhr.addEventListener(\"load\",e,!1),a.xhr.addEventListener(\"error\",e,!1),a.xhr.addEventListener(\"timeout\",e,!1);var t=[],r=a.getOpt(\"parameterNamespace\"),i=a.getOpt(\"query\");\"function\"==typeof i&&(i=i(a.fileObj,a)),n.each(i,function(e,n){t.push([encodeURIComponent(r+e),encodeURIComponent(n)].join(\"=\"))}),t=t.concat([[\"chunkNumberParameterName\",a.offset+1],[\"chunkSizeParameterName\",a.getOpt(\"chunkSize\")],[\"currentChunkSizeParameterName\",a.endByte-a.startByte],[\"totalSizeParameterName\",a.fileObjSize],[\"typeParameterName\",a.fileObjType],[\"identifierParameterName\",a.fileObj.uniqueIdentifier],[\"fileNameParameterName\",a.fileObj.fileName],[\"relativePathParameterName\",a.fileObj.relativePath],[\"totalChunksParameterName\",a.fileObj.chunks.length]].filter(function(e){return a.getOpt(e[0])}).map(function(e){return[r+a.getOpt(e[0]),encodeURIComponent(e[1])].join(\"=\")})),a.xhr.open(a.getOpt(\"testMethod\"),n.getTarget(\"test\",t)),a.xhr.timeout=a.getOpt(\"xhrTimeout\"),a.xhr.withCredentials=a.getOpt(\"withCredentials\");var s=a.getOpt(\"headers\");\"function\"===typeof s&&(s=s(a.fileObj,a)),n.each(s,function(e,t){a.xhr.setRequestHeader(e,t)}),a.xhr.send(null)},a.preprocessFinished=function(){a.preprocessState=2,a.send()},a.send=function(){var e=a.getOpt(\"preprocess\");if(\"function\"===typeof e)switch(a.preprocessState){case 0:return a.preprocessState=1,void e(a);case 1:return}if(!a.getOpt(\"testChunks\")||a.tested){a.xhr=new XMLHttpRequest,a.xhr.upload.addEventListener(\"progress\",function(e){new Date-a.lastProgressCallback>1e3*a.getOpt(\"throttleProgressCallbacks\")&&(a.callback(\"progress\"),a.lastProgressCallback=new Date),a.loaded=e.loaded||0},!1),a.loaded=0,a.pendingRetry=!1,a.callback(\"progress\");var t=function(e){var t=a.status();if(\"success\"==t||\"error\"==t)a.callback(t,a.message()),a.resumableObj.uploadNextChunk();else{a.callback(\"retry\",a.message()),a.abort(),a.retries++;var r=a.getOpt(\"chunkRetryInterval\");void 0!==r?(a.pendingRetry=!0,setTimeout(a.send,r)):a.send()}};a.xhr.addEventListener(\"load\",t,!1),a.xhr.addEventListener(\"error\",t,!1),a.xhr.addEventListener(\"timeout\",t,!1);var r=[[\"chunkNumberParameterName\",a.offset+1],[\"chunkSizeParameterName\",a.getOpt(\"chunkSize\")],[\"currentChunkSizeParameterName\",a.endByte-a.startByte],[\"totalSizeParameterName\",a.fileObjSize],[\"typeParameterName\",a.fileObjType],[\"identifierParameterName\",a.fileObj.uniqueIdentifier],[\"fileNameParameterName\",a.fileObj.fileName],[\"relativePathParameterName\",a.fileObj.relativePath],[\"totalChunksParameterName\",a.fileObj.chunks.length]].filter(function(e){return a.getOpt(e[0])}).reduce(function(e,t){return e[a.getOpt(t[0])]=t[1],e},{}),i=a.getOpt(\"query\");\"function\"==typeof i&&(i=i(a.fileObj,a)),n.each(i,function(e,t){r[e]=t});var s=a.fileObj.file.slice?\"slice\":a.fileObj.file.mozSlice?\"mozSlice\":a.fileObj.file.webkitSlice?\"webkitSlice\":\"slice\",o=a.fileObj.file[s](a.startByte,a.endByte,a.getOpt(\"setChunkTypeFromFile\")?a.fileObj.file.type:\"\"),u=null,l=[],f=a.getOpt(\"parameterNamespace\");if(\"octet\"===a.getOpt(\"method\"))u=o,n.each(r,function(e,t){l.push([encodeURIComponent(f+e),encodeURIComponent(t)].join(\"=\"))});else if(u=new FormData,n.each(r,function(e,t){u.append(f+e,t),l.push([encodeURIComponent(f+e),encodeURIComponent(t)].join(\"=\"))}),\"blob\"==a.getOpt(\"chunkFormat\"))u.append(f+a.getOpt(\"fileParameterName\"),o,a.fileObj.fileName);else if(\"base64\"==a.getOpt(\"chunkFormat\")){var c=new FileReader;c.onload=function(e){u.append(f+a.getOpt(\"fileParameterName\"),c.result),a.xhr.send(u)},c.readAsDataURL(o)}var p=n.getTarget(\"upload\",l),d=a.getOpt(\"uploadMethod\");a.xhr.open(d,p),\"octet\"===a.getOpt(\"method\")&&a.xhr.setRequestHeader(\"Content-Type\",\"application/octet-stream\"),a.xhr.timeout=a.getOpt(\"xhrTimeout\"),a.xhr.withCredentials=a.getOpt(\"withCredentials\");var h=a.getOpt(\"headers\");\"function\"===typeof h&&(h=h(a.fileObj,a)),n.each(h,function(e,t){a.xhr.setRequestHeader(e,t)}),\"blob\"==a.getOpt(\"chunkFormat\")&&a.xhr.send(u)}else a.test()},a.abort=function(){a.xhr&&a.xhr.abort(),a.xhr=null},a.status=function(){return a.pendingRetry?\"uploading\":a.xhr?a.xhr.readyState<4?\"uploading\":200==a.xhr.status||201==a.xhr.status?\"success\":n.contains(a.getOpt(\"permanentErrors\"),a.xhr.status)||a.retries>=a.getOpt(\"maxChunkRetries\")?\"error\":(a.abort(),\"pending\"):\"pending\"},a.message=function(){return a.xhr?a.xhr.responseText:\"\"},a.progress=function(e){\"undefined\"===typeof e&&(e=!1);var t=e?(a.endByte-a.startByte)/a.fileObjSize:1;if(a.pendingRetry)return 0;switch(a.xhr&&a.xhr.status||(t*=.95),a.status()){case\"success\":case\"error\":return 1*t;case\"pending\":return 0*t;default:return a.loaded/(a.endByte-a.startByte)*t}},this}return r.uploadNextChunk=function(){var e=!1;if(r.getOpt(\"prioritizeFirstAndLastChunk\")&&(n.each(r.files,function(t){return t.chunks.length&&\"pending\"==t.chunks[0].status()&&0===t.chunks[0].preprocessState?(t.chunks[0].send(),e=!0,!1):t.chunks.length>1&&\"pending\"==t.chunks[t.chunks.length-1].status()&&0===t.chunks[t.chunks.length-1].preprocessState?(t.chunks[t.chunks.length-1].send(),e=!0,!1):void 0}),e))return!0;if(n.each(r.files,function(t){if(!1===t.isPaused()&&n.each(t.chunks,function(t){if(\"pending\"==t.status()&&0===t.preprocessState)return t.send(),e=!0,!1}),e)return!1}),e)return!0;var t=!1;return n.each(r.files,function(e){if(!e.isComplete())return t=!0,!1}),t||r.fire(\"complete\"),!1},r.assignBrowse=function(e,t){\"undefined\"==typeof e.length&&(e=[e]),n.each(e,function(e){var n;\"INPUT\"===e.tagName&&\"file\"===e.type?n=e:((n=document.createElement(\"input\")).setAttribute(\"type\",\"file\"),n.style.display=\"none\",e.addEventListener(\"click\",function(){n.style.opacity=0,n.style.display=\"block\",n.focus(),n.click(),n.style.display=\"none\"},!1),e.appendChild(n));var i=r.getOpt(\"maxFiles\");\"undefined\"===typeof i||1!=i?n.setAttribute(\"multiple\",\"multiple\"):n.removeAttribute(\"multiple\"),t?n.setAttribute(\"webkitdirectory\",\"webkitdirectory\"):n.removeAttribute(\"webkitdirectory\");var a=r.getOpt(\"fileType\");\"undefined\"!==typeof a&&a.length>=1?n.setAttribute(\"accept\",a.map(function(e){return\".\"+e}).join(\",\")):n.removeAttribute(\"accept\"),n.addEventListener(\"change\",function(e){l(e.target.files,e),r.getOpt(\"clearInput\")&&(e.target.value=\"\")},!1)})},r.assignDrop=function(e){\"undefined\"==typeof e.length&&(e=[e]),n.each(e,function(e){e.addEventListener(\"dragover\",a,!1),e.addEventListener(\"dragenter\",a,!1),e.addEventListener(\"drop\",i,!1)})},r.unAssignDrop=function(e){\"undefined\"==typeof e.length&&(e=[e]),n.each(e,function(e){e.removeEventListener(\"dragover\",a),e.removeEventListener(\"dragenter\",a),e.removeEventListener(\"drop\",i)})},r.isUploading=function(){var e=!1;return n.each(r.files,function(t){if(t.isUploading())return e=!0,!1}),e},r.upload=function(){if(!r.isUploading()){r.fire(\"uploadStart\");for(var e=1;e<=r.getOpt(\"simultaneousUploads\");e++)r.uploadNextChunk()}},r.pause=function(){n.each(r.files,function(e){e.abort()}),r.fire(\"pause\")},r.cancel=function(){r.fire(\"beforeCancel\");for(var e=r.files.length-1;e>=0;e--)r.files[e].cancel();r.fire(\"cancel\")},r.progress=function(){var e=0,t=0;return n.each(r.files,function(r){e+=r.progress()*r.size,t+=r.size}),t>0?e/t:0},r.addFile=function(e,t){l([e],t)},r.addFiles=function(e,t){l(e,t)},r.removeFile=function(e){for(var t=r.files.length-1;t>=0;t--)r.files[t]===e&&r.files.splice(t,1)},r.getFromUniqueIdentifier=function(e){var t=!1;return n.each(r.files,function(r){r.uniqueIdentifier==e&&(t=r)}),t},r.getSize=function(){var e=0;return n.each(r.files,function(t){e+=t.size}),e},r.handleDropEvent=function(e){i(e)},r.handleChangeEvent=function(e){l(e.target.files,e),e.target.value=\"\"},r.updateQuery=function(e){r.opts.query=e},this}}()}}]);","extractedComments":[]}